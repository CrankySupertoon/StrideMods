#line 1 "built/tmp/vrmlLexer.lxx.cxx"

#line 3 "built/tmp/vrmlLexer.lxx.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer vrmlyy_create_buffer
#define yy_delete_buffer vrmlyy_delete_buffer
#define yy_scan_buffer vrmlyy_scan_buffer
#define yy_scan_string vrmlyy_scan_string
#define yy_scan_bytes vrmlyy_scan_bytes
#define yy_init_buffer vrmlyy_init_buffer
#define yy_flush_buffer vrmlyy_flush_buffer
#define yy_load_buffer_state vrmlyy_load_buffer_state
#define yy_switch_to_buffer vrmlyy_switch_to_buffer
#define yypush_buffer_state vrmlyypush_buffer_state
#define yypop_buffer_state vrmlyypop_buffer_state
#define yyensure_buffer_stack vrmlyyensure_buffer_stack
#define yy_flex_debug vrmlyy_flex_debug
#define yyin vrmlyyin
#define yyleng vrmlyyleng
#define yylex vrmlyylex
#define yylineno vrmlyylineno
#define yyout vrmlyyout
#define yyrestart vrmlyyrestart
#define yytext vrmlyytext
#define yywrap vrmlyywrap
#define yyalloc vrmlyyalloc
#define yyrealloc vrmlyyrealloc
#define yyfree vrmlyyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define vrmlyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer vrmlyy_create_buffer
#endif

#ifdef yy_delete_buffer
#define vrmlyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer vrmlyy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define vrmlyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer vrmlyy_scan_buffer
#endif

#ifdef yy_scan_string
#define vrmlyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string vrmlyy_scan_string
#endif

#ifdef yy_scan_bytes
#define vrmlyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes vrmlyy_scan_bytes
#endif

#ifdef yy_init_buffer
#define vrmlyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer vrmlyy_init_buffer
#endif

#ifdef yy_flush_buffer
#define vrmlyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer vrmlyy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define vrmlyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state vrmlyy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define vrmlyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer vrmlyy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define vrmlyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state vrmlyypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define vrmlyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state vrmlyypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define vrmlyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack vrmlyyensure_buffer_stack
#endif

#ifdef yylex
#define vrmlyylex_ALREADY_DEFINED
#else
#define yylex vrmlyylex
#endif

#ifdef yyrestart
#define vrmlyyrestart_ALREADY_DEFINED
#else
#define yyrestart vrmlyyrestart
#endif

#ifdef yylex_init
#define vrmlyylex_init_ALREADY_DEFINED
#else
#define yylex_init vrmlyylex_init
#endif

#ifdef yylex_init_extra
#define vrmlyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra vrmlyylex_init_extra
#endif

#ifdef yylex_destroy
#define vrmlyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy vrmlyylex_destroy
#endif

#ifdef yyget_debug
#define vrmlyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug vrmlyyget_debug
#endif

#ifdef yyset_debug
#define vrmlyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug vrmlyyset_debug
#endif

#ifdef yyget_extra
#define vrmlyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra vrmlyyget_extra
#endif

#ifdef yyset_extra
#define vrmlyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra vrmlyyset_extra
#endif

#ifdef yyget_in
#define vrmlyyget_in_ALREADY_DEFINED
#else
#define yyget_in vrmlyyget_in
#endif

#ifdef yyset_in
#define vrmlyyset_in_ALREADY_DEFINED
#else
#define yyset_in vrmlyyset_in
#endif

#ifdef yyget_out
#define vrmlyyget_out_ALREADY_DEFINED
#else
#define yyget_out vrmlyyget_out
#endif

#ifdef yyset_out
#define vrmlyyset_out_ALREADY_DEFINED
#else
#define yyset_out vrmlyyset_out
#endif

#ifdef yyget_leng
#define vrmlyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng vrmlyyget_leng
#endif

#ifdef yyget_text
#define vrmlyyget_text_ALREADY_DEFINED
#else
#define yyget_text vrmlyyget_text
#endif

#ifdef yyget_lineno
#define vrmlyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno vrmlyyget_lineno
#endif

#ifdef yyset_lineno
#define vrmlyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno vrmlyyset_lineno
#endif

#ifdef yywrap
#define vrmlyywrap_ALREADY_DEFINED
#else
#define yywrap vrmlyywrap
#endif

#ifdef yyalloc
#define vrmlyyalloc_ALREADY_DEFINED
#else
#define yyalloc vrmlyyalloc
#endif

#ifdef yyrealloc
#define vrmlyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc vrmlyyrealloc
#endif

#ifdef yyfree
#define vrmlyyfree_ALREADY_DEFINED
#else
#define yyfree vrmlyyfree
#endif

#ifdef yytext
#define vrmlyytext_ALREADY_DEFINED
#else
#define yytext vrmlyytext
#endif

#ifdef yyleng
#define vrmlyyleng_ALREADY_DEFINED
#else
#define yyleng vrmlyyleng
#endif

#ifdef yyin
#define vrmlyyin_ALREADY_DEFINED
#else
#define yyin vrmlyyin
#endif

#ifdef yyout
#define vrmlyyout_ALREADY_DEFINED
#else
#define yyout vrmlyyout
#endif

#ifdef yy_flex_debug
#define vrmlyy_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug vrmlyy_flex_debug
#endif

#ifdef yylineno
#define vrmlyylineno_ALREADY_DEFINED
#else
#define yylineno vrmlyylineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 48
#define YY_END_OF_BUFFER 49
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[980] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   49,   47,   45,   46,   45,   14,
       45,   15,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   47,   47,   47,   47,   47,   47,   47,   47,
       24,   47,   47,   47,   47,   22,   22,   47,   47,   47,
       37,   35,   37,   37,   47,   47,   34,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   18,   19,   47,

       47,   25,   47,   23,   23,   47,   47,   47,   38,   36,
       38,   38,   47,   47,   47,   47,   47,   47,   40,   40,
       41,   40,   40,   42,   47,   44,   44,   45,   45,   46,
       45,   45,   45,   14,   15,   14,   14,    7,   14,   14,
        6,   14,   14,   14,   14,   14,    0,   16,    0,    0,
        0,    0,    0,    0,    0,    0,   24,   24,    0,    0,
        0,    0,    0,   22,   22,    0,    0,    0,    0,    0,
        0,   37,   37,   37,   16,    0,   34,   34,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   17,    0,   25,

       25,    0,   23,   23,    0,    0,    0,    0,    0,    0,
       38,   38,   38,   17,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   40,   40,   40,   40,
       40,   39,   44,   44,   45,    4,   14,   14,   14,    5,
       14,   14,   14,   14,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   24,    0,
       43,   43,    0,    0,    0,    0,   43,   43,    0,   22,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   34,    0,    0,   26,    0,    0,    0,    0,
        0,   26,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   25,   23,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   27,    0,    0,    0,    0,    0,   27,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   44,   45,   14,   14,   14,   14,   14,   14,
       14,    0,   20,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   43,   43,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   26,    0,   26,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   27,    0,   27,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   45,   14,    2,
        8,   14,   14,   12,   14,   21,    0,    0,   32,    0,
        0,    0,    0,    0,   32,    0,    0,    0,    0,   32,
        0,    0,    0,   32,    0,    0,    0,    0,    0,   32,
        0,    0,    0,   43,   43,   43,   43,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   26,    0,    0,   26,    0,

        0,   28,    0,    0,    0,    0,    0,   28,    0,    0,
        0,    0,   28,    0,    0,    0,   28,    0,    0,    0,
        0,    0,   28,    0,    0,    0,    0,    0,   33,    0,
        0,    0,    0,    0,   33,    0,    0,    0,    0,   33,
        0,    0,    0,   33,    0,    0,    0,    0,    0,   33,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   27,    0,    0,   27,    0,    0,   29,    0,    0,
        0,    0,    0,   29,    0,    0,    0,    0,   29,    0,

        0,    0,   29,    0,    0,    0,    0,    0,   29,    0,
        0,    0,   45,   14,   14,   14,   14,   14,   32,    0,
       32,    0,   32,    0,   32,    0,   32,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
        0,   28,    0,   28,    0,   28,    0,   28,    0,   33,
        0,   33,    0,   33,    0,   33,    0,   33,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       29,    0,   29,    0,   29,    0,   29,    0,   29,    0,

       45,   14,   10,   14,   14,    9,    0,   32,    0,    0,
       32,    0,    0,   32,    0,   32,    0,    0,   32,    0,
        0,   30,    0,    0,    0,    0,    0,   30,    0,    0,
        0,    0,   30,    0,    0,   30,    0,    0,    0,    0,
        0,   30,    0,    0,    0,    0,    0,   30,    0,    0,
        0,   30,    0,    0,    0,    0,    0,   30,    0,    0,
        0,    0,    0,    0,    0,   30,    0,    0,    0,    0,
       28,    0,    0,   28,    0,    0,   28,    0,   28,    0,
        0,   28,    0,   33,    0,    0,   33,    0,    0,   33,
        0,   33,    0,    0,   33,    0,    0,   31,    0,    0,

        0,    0,    0,   31,    0,    0,    0,    0,   31,    0,
        0,   31,    0,    0,    0,    0,    0,   31,    0,    0,
        0,    0,    0,   31,    0,    0,    0,   31,    0,    0,
        0,    0,    0,   31,    0,    0,    0,    0,    0,    0,
        0,   31,    0,    0,    0,    0,   29,    0,    0,   29,
        0,    0,   29,    0,   29,    0,    0,   29,   45,   14,
       11,   14,   30,    0,   30,    0,   30,    0,   30,    0,
       30,    0,   30,    0,   30,    0,   30,    0,   30,    0,
       31,    0,   31,    0,   31,    0,   31,    0,   31,    0,
       31,    0,   31,    0,   31,    0,   31,    0,   45,   14,

       14,    0,   30,    0,    0,   30,    0,    0,   30,    0,
       30,    0,    0,   30,    0,    0,   30,    0,   30,    0,
        0,   30,    0,    0,   30,    0,   31,    0,    0,   31,
        0,    0,   31,    0,   31,    0,    0,   31,    0,    0,
       31,    0,   31,    0,    0,   31,    0,    0,   31,   45,
       14,   14,   45,    3,   14,   45,   13,   45,   45,   45,
       45,    1,    1,   45,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    6,    6,    1,    6,
        6,    6,    9,    2,   10,   11,    6,   12,   13,   14,
       13,   13,   13,   13,   13,   15,   13,    6,    6,    6,
        6,    6,    6,    6,   16,   17,   17,   18,   19,   20,
        6,    6,   21,    6,    6,   22,   23,   24,   25,   26,
        6,   27,   28,   29,   30,   31,    6,   32,    6,    6,
       33,   34,   35,    6,    6,    6,   17,   17,   17,   36,

       37,   38,    6,    6,   39,    6,    6,   40,    6,   41,
       42,   43,    6,   44,   45,   46,   47,   48,    6,   49,
        6,    6,    1,    6,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6
    } ;

static const YY_CHAR yy_meta[50] =
    {   0,
        1,    2,    3,    2,    2,    4,    5,    6,    1,    4,
        1,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    8,    1,    8,    7,    7,    7,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4
    } ;

static const flex_int16_t yy_base[1131] =
    {   0,
        0,    7,   15,    0,   63,   91,  119,    0,   62,   75,
       90,  103,  131,  137,  143,  149,  163,  170,  175,  182,
      188,  194,  200,  206,  212,  238,  264,  290,  316,  342,
      368,  394,  428,  462,  488,  514,  540,  566,  227,  234,
      262,  279,  329,  355, 1078, 8867,  252,    0,  232,    0,
     1061,    0, 1048, 1034, 1027, 1026, 1027, 1013, 1001,   21,
      988,  979,  999,  985,  985,   67,   94,  600,  124,  167,
      279,  294,  636,  223,  305,  379,  320,  347,  333,  684,
        0, 8867,  412,  973,  373,  359,  431,  384,  409,  720,
      426,  439,  756,  444,  459,  792,  971, 8867, 8867,  464,

      472,  477,  492,  525,  498,  504,  518,  828,    0, 8867,
      558,  970,  530,  555,  864,  571,  582,  900,    0,  616,
     8867,    6,  980, 8867,  613,  620,  641,  655,  977,    0,
      976,  965,   83,    0,    0,  951,  941,    0,  934,  926,
        0,  926,  906,  899,  899,  882,  895, 8867,  886,  652,
        0,  659,  936,  950,  666,  692,  699,  728,  736,    0,
      764,  964,  778,  740,    0,  775,    0,  801,  978,  992,
      808,    0,  844,  851,    0,  812,  873,  881,  911,  848,
        0,  916, 1006, 1020, 1027,  920,    0, 1032, 1046, 1060,
     1067, 1071,    0, 1076, 1090, 1104, 1111, 8867, 1115, 1120,

     1128, 1136, 1140,    0, 1146,    0, 1155, 1169, 1183, 1190,
        0, 1204, 1211,    0, 1208, 1245, 1213, 1281, 1295, 1220,
     1228, 1309, 1254, 1345, 1359, 1261,    0, 1325,   90,  118,
      236, 8867, 1265,    0,  272,    0,  890,  878,  877,    0,
      856,  848,  834,  830,  829,  835, 1323, 1327, 1373, 1409,
     1423,    0,    0, 1381, 1437, 1385, 1473, 1389, 1393, 1434,
     1440, 1445, 1488, 1502,    0,    0,  289,    0, 1459,    0,
     1507, 1456, 1521, 1557, 1571,    0,    0, 1529, 1585, 1533,
     1621, 1537, 1541, 1583, 1587, 1594, 1635, 1649,    0,    0,
     1602,  209, 1606, 1663, 1668, 1672, 1686, 1722, 1736,    0,

        0, 1694, 1750, 1698, 1786, 1703, 1707, 1800, 1836, 1850,
        0,    0, 1747, 1773, 1751, 1864, 1758, 1770,    0, 1809,
     1813, 1878, 1914, 1928,    0,    0, 1817, 1942, 1821, 1978,
     1887, 1891, 1940, 1992,    0,    0,    0, 1895,  381, 1899,
     2006, 1951, 1955, 2020, 2056,    0,    0,    0, 1959, 2043,
     2028, 2079,    0,  161,  823,  820,  825,  792,  740,  691,
      634,  643, 8867, 2041, 2093, 2107, 2063, 2121, 2149, 2185,
     2199, 2213,    0, 2249, 2130, 2286, 2300, 2137, 2314, 2350,
     2364, 2378, 2392, 2157, 2165, 2406, 2442, 2456, 2492, 2506,
     2221, 2520, 2556, 2570, 2584, 2598, 2612, 2648, 2662, 2228,

     2676, 2712, 2726, 2740, 2754, 2768, 2804, 2818, 2261, 2832,
     2868, 2882, 2896, 2910, 2322, 2268, 2924, 2960, 2974, 3010,
     3024, 2330, 3038, 3074, 3088, 3102, 3116,  307,  634,    0,
        0,  237,  605,    0,  590, 8867, 2142, 2169, 3121, 3157,
     3171,    0,    0, 2232,  443, 2334, 3185, 3199, 3213, 3227,
     3263, 2415, 2419, 3277, 3313,    0,    0,    0, 2423,  527,
     2427, 2464, 3292,    0, 3329,  539,  540, 2469, 2473, 3377,
     3413, 3427,    0,    0, 2477, 2947, 2528, 3441, 3455, 3469,
     3483, 3519, 2533, 2537, 3533, 3569,    0,    0,    0, 2541,
     3250, 2620, 2624, 3583, 2628, 2632, 3619, 3633,  573, 2685,

     2689, 3638, 3674, 3688,    0,    0, 2693,  579, 2697, 3702,
     3716, 3730, 3744, 3780, 2777, 2781, 3794, 3830,    0,    0,
        0, 2785,  610, 2789, 2840, 3809, 2845, 2849, 3836, 3872,
     3886,    0,    0, 2853,  624, 2932, 3900, 3914, 3928, 3942,
     3978, 2945, 2982, 3992, 4028,    0,    0,    0, 2986,  663,
     2990, 2994, 4007, 3047, 3051, 4043, 4079, 4093,    0,    0,
     3055, 3506, 3059, 4107, 4121, 4135, 4149, 4185, 3130, 3134,
     4199, 4235,    0,    0,    0, 3138, 3556, 3142, 3235, 4249,
     3247, 3285, 4285, 4299,  664, 3386, 3390, 4304, 4340, 4354,
        0,    0, 3394,  665, 3398, 4368, 4382, 4396, 4410, 4446,

     3492, 3503, 4460, 4496,    0,    0,    0, 3541,  671, 3553,
     3591, 4475,  382,  591,  568,  560,  554,  514, 3646, 3598,
     4511, 4547, 4561, 4597, 4611, 3654, 4647, 4683, 4697, 4733,
     4747, 3752, 4761, 4797, 4811, 4825, 4839, 4853, 4889, 4903,
     4917, 4931, 4945, 4981, 3759, 4995, 5031, 5045, 5059, 3844,
     3802, 5073, 5109, 5123, 5159, 5173, 3852, 5209, 5245, 3950,
     3958, 5259, 5295, 5309, 5345, 5359, 4000, 5395, 5431, 5445,
     5481, 5495, 4051, 5509, 5545, 5559, 5573, 5587, 5601, 5637,
     5651, 5665, 5679, 5693, 5729, 4058, 5743, 5779, 5793, 5807,
     4157, 4165, 5821, 5857, 5871, 5907, 5921, 4207, 5957, 5993,

      592,  521,    0,  490,  514,    0, 3602, 3658, 6007, 6021,
      672, 6035, 6049, 4222, 3763, 6063, 6077, 6091,  700, 3857,
     3962, 4626, 6105, 6119,    0,    0, 4062,  701, 4169, 6133,
     6147, 6161, 6175, 4220, 4257, 6211, 6247, 6261,    0,    0,
     4261,  707, 4265, 4269, 5188, 6275, 6289, 6303, 6339, 4313,
     4317, 6353, 6389,    0,    0,    0, 4321,  747, 4325, 4418,
     5374, 4422, 6403, 6417, 6431, 6445, 4426, 4430, 5936, 4468,
     4519, 6481, 6495,  754, 6509, 6523, 4584, 4523, 6537, 6551,
     6565,  773, 4527, 4531, 6579, 6593,  782, 6607, 6621, 4670,
     4569, 6635, 6649, 6663,  845, 4582, 4619, 6184, 6677, 6691,

        0,    0, 4655,  852, 4667, 6705, 6719, 6733, 6747, 4706,
     4710, 6783, 6819, 6833,    0,    0, 4714,  854, 4718, 4769,
     6756, 6847, 6861, 6875, 6911, 4774, 4778, 6925, 6961,    0,
        0,    0, 4782,  861, 4861, 4865, 6940, 4869, 6976, 6990,
     7004, 7018, 4873, 4953, 7027, 4957, 4961, 7063, 7077,  862,
     7091, 7105, 5146, 4965, 7119, 7133, 7147,  938,  548,  497,
        0,  481, 5003, 5011, 7161, 7197, 7211, 7247, 7261, 5081,
     7297, 7333, 7347, 7383, 7397, 5088, 7433, 7469, 7483, 7519,
     5453, 5131, 7533, 7569, 5016, 5143, 5093, 5181, 5517, 5217,
     5222, 5229, 5268, 5275, 5609, 5317, 5280, 5324,  302,  479,

      423, 5328, 5367,  279,  416, 1253,  438,  472, 7583, 5403,
     7619,  484,  613, 1306,  621,  636, 7633, 5407, 7669,  684,
      706, 1939,  720,  753, 7683, 5411, 5415,  789,  799, 1979,
     5461, 5465, 7276, 5525, 7719, 5529, 5617, 5701, 5621, 5709,
     7412, 5713, 7733, 5751, 5755, 6192, 5759, 5763, 7592,  829,
      409,  372,  709,    0,  374,  356,    0,  764,  820, 1476,
     1491, 5837, 5844, 1505, 5849, 5887, 5892, 5899, 5937, 5975,
     5982, 6229, 6234, 6239, 6321, 6328, 6371, 6378, 8867, 7748,
     7756, 7764, 7772, 7780, 7788, 7793, 7797, 7804, 7812, 7820,
     7827, 7835, 7843, 7851, 7859, 7866,  329, 7873, 7881, 7889,

     7897,  317, 7905, 7913, 7920, 7928, 7936, 7944, 7952,  315,
     7960, 7965, 7972, 7980, 7987,  169, 7994, 8002, 8010, 8018,
      121, 8026, 8034, 8042,  112, 8050, 8058, 8066, 8074, 8082,
     8090, 8098, 8106, 8114, 8122, 8130, 8138, 8146, 8154, 8162,
     8170, 8178, 8186, 8194, 8199, 8206, 8214, 8222,    0, 8230,
     8238, 8246, 8254, 8262, 8270, 8278, 8286, 8294, 8302, 8310,
     8318, 8326, 8334, 8342, 8350, 8358, 8366, 8371, 8378, 8386,
     8394, 8402, 8410, 8418, 8426, 8434, 8442, 8450, 8458, 8466,
     8474, 8482, 8490, 8498, 8506, 8514, 8522, 8530, 8538, 8546,
     8554, 8562, 8570, 8575, 8582, 8590, 8598, 8606, 8614, 8622,

     8630, 8638, 8646, 8654, 8662, 8670, 8678, 8686, 8694, 8702,
     8710, 8718, 8726, 8734, 8742, 8750, 8758, 8766, 8774, 8779,
     8786, 8794, 8802, 8810, 8818, 8826, 8834, 8842, 8850, 8858
    } ;

static const flex_int16_t yy_def[1131] =
    {   0,
      980,  980,  979,    3,  980,  980,  980,    7,    7,    7,
        7,    7,    7,    7,    7,    7,  981,  981,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,  982,  982,    7,    7,    7,    7,  983,  983,
      983,  983,    7,    7,  979,  979,  979,  984,  985,  986,
      985,  987,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,   73,  979,  979,  979,  979,  979,  979,
      988,  979,  989,  988,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,

      979,  979,  979,  979,  979,  979,  979,  979,  990,  979,
      991,  990,  979,  979,  979,  979,  979,  979,  992,  992,
      979,  993,  992,  979,  979,  979,  979,  979,  985,  984,
      985,  985,  985,  986,  987,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  979,  979,  979,  979,
       68,   68,  979,  994,  979,  979,  979,  979,  979,   74,
       74,  995,  996,  979,  997,  979,   80,   80,  979,  998,
      979,  988,  989,  989,  988,  979,  979,  979,  979,  979,
       90,   90,  979,  999,  979,  979,   93,   93,  979, 1000,
      979,  979,   96,   96,  979, 1001,  979,  979,  979,  979,

      979,  979,  979, 1002,  979,  108,  108,  979, 1003,  979,
     1004, 1005, 1005, 1004,  979,  979,  216,  979, 1006,  979,
      979,  979,  222,  979, 1007,  979, 1008, 1008, 1009, 1009,
     1009,  979,  979, 1010, 1011, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012,  979,  979,  979,  979,  979, 1013,
     1013,  251,  251,  251,  251,  979,  979,  979,  979,  979,
      979,  979, 1014, 1014,  264,  264,  264,  264, 1015, 1016,
      979,  979,  979, 1017, 1017,  275,  275,  275,  275,  979,
      979,  979,  979,  979,  979,  979, 1018, 1018,  288,  288,
      288,  288,  979,  979,  979,  979,  979, 1019, 1019,  299,

      299,  299,  299,  979,  979,  979,  979,  979, 1020, 1020,
      310,  310,  310,  310,  979,  979,  979,  979, 1021,  979,
      979,  979, 1022, 1022,  324,  324,  324,  324,  979,  979,
      979,  979,  979, 1006,  334,  334,  334,  334,  334,  979,
      979,  979,  979,  979, 1007,  345,  345,  345,  345,  345,
      979,  979, 1010, 1011, 1012, 1012, 1012, 1012, 1012, 1012,
     1012,  979,  979,  249,  979, 1023,  979,  251,  368,  979,
     1024,  368, 1025, 1026,  273,  979, 1027,  979, 1028, 1028,
      979, 1029, 1028,  979,  979, 1030, 1030,  979,  979, 1031,
      979, 1032, 1032,  979, 1033, 1032,  979,  979, 1034,  979,

     1035, 1035,  979, 1036, 1035,  979,  979, 1037,  979, 1038,
     1038,  979, 1039, 1038,  979,  979, 1040, 1040,  979,  979,
     1041,  979, 1042, 1042,  979, 1043, 1042, 1044, 1045, 1045,
     1045, 1045, 1045, 1045, 1045,  979,  979,  979,  979, 1046,
     1046,  441,  441,  441,  441,  979,  979, 1047, 1047,  449,
     1048,  979,  979,  979, 1048,  455,  455,  455,  455,  455,
      449,  449,  450, 1049,  979,  465,  465,  979,  979,  979,
     1050, 1050,  472,  472,  472,  472,  979,  979, 1051, 1051,
      480, 1052,  979,  979,  979, 1052,  486,  486,  486,  486,
      486,  480,  480,  480,  979,  979, 1053, 1053,  498,  979,

      979,  979, 1054, 1054,  504,  504,  504,  504,  979,  979,
     1055, 1055,  512, 1056,  979,  979,  979, 1056,  518,  518,
      518,  518,  518,  512,  512,  513,  979,  979,  979, 1057,
     1057,  531,  531,  531,  531,  979,  979, 1058, 1058,  539,
     1059,  979,  979,  979, 1059,  545,  545,  545,  545,  545,
      539,  539,  540,  979,  979,  979, 1060, 1060,  558,  558,
      558,  558,  979,  979, 1061, 1061,  566, 1062,  979,  979,
      979, 1062,  572,  572,  572,  572,  572,  566,  566,  566,
      979,  979, 1063, 1063,  584,  979,  979,  979, 1064, 1064,
      590,  590,  590,  590,  979,  979, 1065, 1065,  598, 1066,

      979,  979,  979, 1066,  604,  604,  604,  604,  604,  598,
      598,  599, 1067, 1068, 1068, 1068, 1068, 1068,  979,  979,
     1069, 1069, 1070, 1070,  979,  979, 1071, 1071,  979,  979,
     1072,  979, 1073, 1073,  979, 1074, 1073, 1075, 1075,  979,
     1076, 1075,  979, 1074,  979, 1077, 1077, 1076, 1077,  979,
      979, 1078, 1078, 1079, 1079,  979,  979, 1080, 1080,  979,
      979, 1081, 1081, 1082, 1082,  979,  979, 1083, 1083,  979,
      979, 1084,  979, 1085, 1085,  979, 1086, 1085, 1087, 1087,
      979, 1088, 1087,  979, 1086,  979, 1089, 1089, 1088, 1089,
      979,  979, 1090, 1090, 1091, 1091,  979,  979, 1092, 1092,

     1093, 1094, 1094, 1094, 1094, 1094,  979,  979, 1095, 1095,
      710, 1096, 1096,  713,  979,  979, 1097, 1097,  718,  979,
      979,  979, 1098, 1098,  724,  724,  724,  724,  979,  979,
     1099, 1099,  732,  979,  979,  979, 1100, 1100,  738,  738,
      738,  738,  732,  732,  733, 1101, 1101,  747, 1102,  979,
      979,  979, 1102,  753,  753,  753,  753,  753,  747,  747,
      748,  979,  979, 1103, 1103,  765,  765,  765,  766,  979,
      979, 1104, 1104,  773, 1105, 1105,  776,  979,  979, 1106,
     1106,  781,  979,  979, 1107, 1107,  786, 1108, 1108,  789,
      979,  979, 1109, 1109,  794,  979,  979,  979, 1110, 1110,

      800,  800,  800,  800,  979,  979, 1111, 1111,  808,  979,
      979,  979, 1112, 1112,  814,  814,  814,  814,  808,  808,
      809, 1113, 1113,  823, 1114,  979,  979,  979, 1114,  829,
      829,  829,  829,  829,  823,  823,  824,  979,  979, 1115,
     1115,  841,  841,  841,  842,  979,  979, 1116, 1116,  849,
     1117, 1117,  852,  979,  979, 1118, 1118,  857, 1119, 1120,
     1120, 1120,  979,  979, 1121, 1121, 1122, 1122,  979,  979,
     1123, 1123, 1124, 1124,  979,  979, 1125, 1125, 1126, 1126,
      979,  979, 1127, 1127,  809,  808,  812,  979,  814,  814,
      824,  823,  828,  979,  829,  829,  842,  841, 1119, 1120,

     1120,  979,  979,  866,  866,  866,  868,  868,  868,  979,
      979,  872,  872,  872,  874,  874,  874,  979,  979,  878,
      878,  878,  880,  880,  880,  979,  979,  884,  884,  884,
      808,  808,  809,  979,  979,  814,  814,  814,  823,  823,
      824,  979,  979,  829,  829,  829,  841,  841,  842, 1119,
     1120, 1120, 1119, 1120, 1120, 1119, 1120, 1119, 1119, 1128,
     1128,  979, 1128, 1128,  979,  979, 1129, 1128,  979, 1128,
     1130, 1129, 1129, 1129, 1130, 1130, 1130, 1130,    0,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,

      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,

      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979
    } ;

static const flex_int16_t yy_nxt[8917] =
    {   0,
      979,   47,   48,   47,   47,  979,  464,   49,   47,   48,
       47,   47,  131,  231,   49,   46,   47,   48,   47,   47,
       50,   46,   51,   46,   46,   46,   52,   52,   52,   52,
       50,   50,   53,   54,   50,   55,   50,   50,   50,   50,
       56,   57,   50,   58,   59,   50,   50,   46,   46,   46,
       50,   60,   61,   50,   50,   62,   50,   50,   50,   50,
       50,   50,   50,   50,   47,   48,   47,   47,  143,  144,
       51,   69,   70,   71,   71,   71,   71,  150,  151,  151,
      151,  151,   63,   64,   69,   70,   71,   71,   71,   71,
      132,   65,   47,   48,   47,   47,  131,  231,   51,   72,

       46,   73,   74,   74,   74,  152,  152,  152,  152,  235,
       63,   64,   72,   46,   73,   74,   74,   74,  464,   65,
       47,   48,   47,   47,  131,  231,   51,  319,   66,   67,
       68,   68,   68,   68,  156,  157,  157,  157,  157,   64,
       75,   46,   76,   77,   77,   77,   75,   46,   76,   77,
       77,   77,   78,   79,   80,   80,   80,   80,   78,   79,
       80,   80,   80,   80,   47,   48,   47,   47,  132,   82,
       83,   47,   48,   47,   47,  270,   82,   83,  158,  158,
      158,  158,  428,   84,   85,   86,   87,   87,   87,   87,
       84,   85,   86,   87,   87,   87,   87,   88,   89,   90,

       90,   90,   90,   88,   89,   90,   90,   90,   90,   91,
       92,   93,   93,   93,   93,   91,   92,   93,   93,   93,
       93,   94,   95,   96,   96,   96,   96,  387,  120,   48,
      120,  120,   97,  121,  122,  120,   48,  120,  120,  132,
      121,  122,  131,  231,   98,  387,   99,   94,   95,   96,
       96,   96,   96,  128,  979,  128,  128,  615,   97,  129,
      123,  616,  133,  120,   48,  120,  120,  123,  124,  122,
       98,  979,   99,  100,  101,  102,  102,  102,  102,  132,
      120,   48,  120,  120,   97,  124,  122,  723,  726,  156,
      157,  157,  157,  157,  354,  123,   98,  159,   99,  100,

      101,  102,  102,  102,  102,  160,  160,  160,  160,  132,
       97,  613,  123,  950,  132,  159,  164,  164,  164,  164,
      374,  353,   98,  319,   99,  103,   46,  104,  105,  105,
      105,  164,  164,  164,  164,  270,   97,  374,  125,   46,
      126,  127,  127,  127,  168,  168,  168,  168,   98,   46,
       99,  103,   46,  104,  105,  105,  105,  166,  167,  167,
      167,  167,   97,  132,  125,   46,  126,  127,  127,  127,
      178,  178,  178,  178,   98,   46,   99,  106,  107,  108,
      108,  108,  108,  176,  177,  177,  177,  177,   97,  132,
      164,  164,  164,  164,  180,  181,  181,  181,  181,  418,

       98,  958,   99,  106,  107,  108,  108,  108,  108,  957,
      165,  955,  701,  131,   97,  131,  131,  418,  131,  174,
      182,  182,  182,  182,  723,  726,   98,  165,   99,   47,
       48,   47,   47,  954,  110,  111,  186,  187,  187,  187,
      187,  176,  177,  177,  177,  177,  471,  474,  112,  179,
      188,  188,  188,  188,  192,  193,  193,  193,  193,  952,
       98,  622,   99,   47,   48,   47,   47,  179,  110,  111,
      194,  194,  194,  194,  199,  200,  200,  200,  200,  622,
      471,  474,  112,  201,  201,  201,  201,  199,  200,  200,
      200,  200,  737,  740,   98,  202,   99,  113,  114,  115,

      115,  115,  115,  203,  203,  203,  203,  951,   97,  203,
      203,  203,  203,  202,  205,  206,  206,  206,  206,  901,
       98,  900,   99,  113,  114,  115,  115,  115,  115,  207,
      207,  207,  207,  862,   97,  861,  203,  203,  203,  203,
      215,  216,  216,  216,  216,  628,   98,  860,   99,  116,
      117,  118,  118,  118,  118,  132,  204,  706,  899,  131,
       97,  131,  131,  628,  131,  213,  217,  217,  217,  217,
      263,  263,   98,  204,   99,  116,  117,  118,  118,  118,
      118,  221,  222,  222,  222,  222,   97,  263,  263,  705,
      131,  387,  131,  223,  223,  223,  223,  653,   98,  132,

       99,  153,  153,  153,  153,  859,  704,  154,  703,  387,
      150,  151,  151,  151,  151,  653,  702,  228,  155,  228,
      228,  737,  740,  229,  233,  233,  233,  233,  659,  274,
      277,  233,  233,  233,  233,  618,  155,  161,  161,  161,
      161,  617,  663,  162,  274,  277,  659,  160,  160,  160,
      160,  234,  233,  233,  233,  233,  128,  614,  128,  128,
      663,  436,  129,  152,  152,  152,  152,  163,  234,  979,
      152,  152,  152,  152,  256,  256,  435,  257,  257,  257,
      257,  669,  418,  694,  163,  169,  169,  169,  169,  700,
      622,  170,  753,  756,  166,  167,  167,  167,  167,  669,

      418,  694,  171,  158,  158,  158,  158,  700,  622,  156,
      157,  157,  157,  157,  753,  756,  132,  159,  628,  866,
      171,  183,  183,  183,  183,  872,  434,  184,  486,  489,
      180,  181,  181,  181,  181,  159,  628,  866,  185,  158,
      158,  158,  158,  872,  258,  258,  159,  259,  259,  259,
      259,  164,  164,  164,  164,  956,  185,  189,  189,  189,
      189,  486,  489,  190,  159,  878,  186,  187,  187,  187,
      187,  132,  653,  260,  191,  261,  262,  262,  262,  161,
      161,  161,  161,  878,  433,  162,  168,  168,  168,  168,
      653,  659,  191,  195,  195,  195,  195,  799,  802,  196,

      663,  959,  192,  193,  193,  193,  193,  799,  802,  659,
      197,  979,  168,  168,  168,  168,  280,  280,  663,  281,
      281,  281,  281,  178,  178,  178,  178,  132,  197,  208,
      208,  208,  208,  953,  960,  209,  132,  432,  205,  206,
      206,  206,  206,  431,  430,  131,  210,  131,  131,  429,
      131,  174,  131,  363,  131,  131,  362,  131,  174,  182,
      182,  182,  182,  669,  210,  218,  218,  218,  218,  361,
      884,  219,  890,  360,  215,  216,  216,  216,  216,  896,
      694,  669,  220,  176,  177,  177,  177,  177,  884,  359,
      890,  179,  178,  178,  178,  178,  358,  896,  694,  179,

      220,  224,  224,  224,  224,  357,  356,  225,  355,  179,
      221,  222,  222,  222,  222,  246,  245,  179,  226,  282,
      282,  244,  283,  283,  283,  283,  979,  182,  182,  182,
      182,  188,  188,  188,  188,  243,  226,  153,  153,  153,
      153,  242,  241,  154,  240,  247,  248,  249,  249,  249,
      249,  251,  153,  251,  251,  239,  700,  252,  238,  253,
      254,  255,  255,  255,  255,  264,  161,  264,  264,  237,
      236,  265,  132,  266,  700,  267,  268,  268,  268,  169,
      169,  169,  169,  132,  132,  170,  232,  271,  272,  273,
      273,  273,  273,  275,  169,  275,  275,  214,  198,  276,

      175,  277,  278,  279,  279,  279,  279,  183,  183,  183,
      183,  149,  148,  184,  147,  284,  285,  286,  286,  286,
      286,  288,  183,  288,  288,  146,  145,  289,  142,  290,
      291,  292,  292,  292,  292,  293,  293,  141,  294,  294,
      294,  294,  979,  188,  188,  188,  188,  189,  189,  189,
      189,  140,  139,  190,  138,  295,  296,  297,  297,  297,
      297,  299,  189,  299,  299,  137,  136,  300,  132,  301,
      302,  303,  303,  303,  303,  304,  304,  979,  305,  305,
      305,  305,  194,  194,  194,  194,  979,  194,  194,  194,
      194,  195,  195,  195,  195,  979,  979,  196,  979,  306,

      307,  308,  308,  308,  308,  310,  195,  310,  310,  979,
      979,  311,  979,  312,  313,  314,  314,  314,  314,  315,
      315,  979,  316,  316,  316,  316,  201,  201,  201,  201,
      199,  200,  200,  200,  200,  979,  979,  979,  202,  201,
      201,  201,  201,  979,  317,  317,  202,  318,  318,  318,
      318,  203,  203,  203,  203,  979,  202,  207,  207,  207,
      207,  979,  979,  979,  202,  979,  207,  207,  207,  207,
      208,  208,  208,  208,  979,  979,  209,  979,  320,  321,
      322,  322,  322,  322,  324,  208,  324,  324,  979,  979,
      325,  979,  326,  327,  328,  328,  328,  328,  329,  329,

      979,  330,  330,  330,  330,  131,  979,  131,  131,  979,
      131,  213,  131,  979,  131,  131,  979,  131,  213,  217,
      217,  217,  217,  979,  217,  217,  217,  217,  340,  340,
      979,  341,  341,  341,  341,  979,  131,  979,  131,  223,
      223,  223,  223,  131,  979,  131,  218,  218,  218,  218,
      979,  979,  219,  979,  979,  215,  216,  216,  216,  216,
      979,  723,  726,  220,  979,  223,  223,  223,  223,  351,
      351,  866,  352,  352,  352,  352,  233,  233,  233,  233,
      979,  220,  218,  218,  218,  218,  979,  979,  219,  866,
      331,  332,  333,  333,  333,  333,  335,  218,  335,  335,

      979,  979,  336,  979,  337,  338,  339,  339,  339,  339,
      224,  224,  224,  224,  737,  740,  225,  979,  979,  221,
      222,  222,  222,  222,  872,  979,  228,  226,  228,  228,
      979,  979,  229,  248,  249,  249,  249,  249,  364,  364,
      364,  364,  872,  979,  979,  226,  224,  224,  224,  224,
      979,  979,  225,  979,  342,  343,  344,  344,  344,  344,
      346,  224,  346,  346,  979,  979,  347,  979,  348,  349,
      350,  350,  350,  350,  365,  365,  365,  365,  979,  979,
      366,  979,  979,  248,  249,  249,  249,  249,  979,  979,
      979,  367,  368,  368,  368,  368,  257,  257,  257,  257,

      259,  259,  259,  259,  259,  259,  259,  259,  979,  367,
      251,  153,  251,  251,  979,  979,  252,  979,  253,  254,
      255,  255,  255,  255,  251,  153,  251,  251,  979,  979,
      252,  979,  253,  254,  255,  255,  255,  255,  369,  370,
      369,  369,  979,  979,  371,  262,  262,  262,  262,  979,
      979,  262,  262,  262,  262,  372,  262,  262,  262,  262,
      161,  161,  161,  161,  979,  979,  162,  375,  375,  375,
      375,  373,  979,  372,  153,  153,  153,  153,  962,  963,
      154,  979,  979,  964,  257,  257,  257,  257,  373,  264,
      161,  264,  264,  962,  963,  265,  979,  266,  964,  267,

      268,  268,  268,  264,  161,  264,  264,  962,  963,  265,
      979,  266,  964,  267,  268,  268,  268,  272,  273,  273,
      273,  273,  376,  376,  376,  376,  979,  979,  377,  979,
      979,  272,  273,  273,  273,  273,  979,  979,  979,  378,
      379,  379,  379,  379,  281,  281,  281,  281,  283,  283,
      283,  283,  283,  283,  283,  283,  979,  378,  275,  169,
      275,  275,  979,  979,  276,  979,  277,  278,  279,  279,
      279,  279,  275,  169,  275,  275,  979,  979,  276,  979,
      277,  278,  279,  279,  279,  279,  380,  381,  380,  380,
      979,  979,  382,  285,  286,  286,  286,  286,  384,  384,

      384,  384,  979,  383,  285,  286,  286,  286,  286,  979,
      979,  979,  385,  386,  386,  386,  386,  294,  294,  294,
      294,  383,  169,  169,  169,  169,  979,  979,  170,  979,
      385,  979,  281,  281,  281,  281,  288,  183,  288,  288,
      979,  979,  289,  979,  290,  291,  292,  292,  292,  292,
      288,  183,  288,  288,  979,  979,  289,  979,  290,  291,
      292,  292,  292,  292,  183,  183,  183,  183,  979,  979,
      184,  979,  979,  979,  294,  294,  294,  294,  296,  297,
      297,  297,  297,  388,  388,  388,  388,  389,  389,  389,
      389,  979,  979,  390,  979,  979,  296,  297,  297,  297,

      297,  979,  979,  979,  391,  392,  392,  392,  392,  305,
      305,  305,  305,  307,  308,  308,  308,  308,  397,  397,
      397,  397,  391,  299,  189,  299,  299,  979,  979,  300,
      979,  301,  302,  303,  303,  303,  303,  299,  189,  299,
      299,  979,  979,  300,  979,  301,  302,  303,  303,  303,
      303,  393,  394,  393,  393,  979,  979,  395,  401,  401,
      401,  401,  316,  316,  316,  316,  979,  979,  396,  318,
      318,  318,  318,  979,  402,  403,  402,  402,  979,  979,
      404,  318,  318,  318,  318,  979,  396,  189,  189,  189,
      189,  405,  979,  190,  979,  979,  979,  305,  305,  305,

      305,  398,  398,  398,  398,  979,  979,  399,  979,  405,
      307,  308,  308,  308,  308,  979,  979,  979,  400,  321,
      322,  322,  322,  322,  406,  406,  406,  406,  410,  410,
      410,  410,  330,  330,  330,  330,  400,  310,  195,  310,
      310,  979,  979,  311,  979,  312,  313,  314,  314,  314,
      314,  310,  195,  310,  310,  979,  979,  311,  979,  312,
      313,  314,  314,  314,  314,  195,  195,  195,  195,  979,
      979,  196,  979,  979,  979,  316,  316,  316,  316,  407,
      407,  407,  407,  979,  979,  408,  979,  979,  321,  322,
      322,  322,  322,  979,  979,  979,  409,  332,  333,  333,

      333,  333,  415,  415,  415,  415,  417,  417,  417,  417,
      341,  341,  341,  341,  409,  324,  208,  324,  324,  979,
      979,  325,  979,  326,  327,  328,  328,  328,  328,  324,
      208,  324,  324,  979,  979,  325,  979,  326,  327,  328,
      328,  328,  328,  411,  412,  411,  411,  753,  756,  413,
      332,  333,  333,  333,  333,  979,  979,  878,  416,  979,
      414,  343,  344,  344,  344,  344,  419,  419,  419,  419,
      423,  423,  423,  423,  979,  878,  416,  979,  414,  208,
      208,  208,  208,  979,  979,  209,  979,  799,  802,  330,
      330,  330,  330,  335,  218,  335,  335,  884,  979,  336,

      979,  337,  338,  339,  339,  339,  339,  218,  218,  218,
      218,  979,  979,  219,  979,  884,  979,  341,  341,  341,
      341,  420,  420,  420,  420,  979,  979,  421,  979,  979,
      343,  344,  344,  344,  344,  979,  979,  979,  422,  352,
      352,  352,  352,  979,  424,  425,  424,  424,  979,  979,
      426,  979,  364,  364,  364,  364,  422,  346,  224,  346,
      346,  427,  979,  347,  979,  348,  349,  350,  350,  350,
      350,  446,  446,  979,  447,  447,  447,  447,  979,  427,
      224,  224,  224,  224,  979,  979,  225,  979,  979,  979,
      352,  352,  352,  352,  365,  365,  365,  365,  979,  979,

      366,  979,  437,  438,  439,  439,  439,  439,  441,  365,
      441,  441,  979,  979,  442,  979,  443,  444,  445,  445,
      445,  445,  369,  370,  369,  369,  979,  979,  371,  979,
      979,  979,  368,  368,  368,  368,  979,  979,  979,  372,
      979,  375,  375,  375,  375,  477,  477,  979,  478,  478,
      478,  478,  438,  439,  439,  439,  439,  372,  448,  449,
      450,  450,  450,  450,  979,  979,  979,  250,  384,  384,
      384,  384,  979,  495,  495,  385,  496,  496,  496,  496,
      619,  619,  619,  619,  979,  250,  370,  370,  370,  370,
      979,  979,  451,  385,  452,  453,  454,  454,  454,  454,

      456,  370,  456,  456,  979,  979,  457,  979,  458,  459,
      460,  460,  460,  460,  251,  153,  251,  251,  979,  979,
      252,  461,  462,  979,  463,  463,  463,  463,  979,  509,
      509,  250,  510,  510,  510,  510,  536,  536,  979,  537,
      537,  537,  537,  621,  621,  621,  621,  979,  979,  250,
      264,  161,  264,  264,  979,  979,  265,  979,  266,  979,
      465,  466,  466,  466,  467,  467,  467,  467,  467,  563,
      563,  979,  564,  564,  564,  564,  581,  581,  979,  582,
      582,  582,  582,  979,  467,  467,  467,  376,  376,  376,
      376,  979,  979,  377,  979,  468,  469,  470,  470,  470,

      470,  472,  376,  472,  472,  979,  979,  473,  979,  474,
      475,  476,  476,  476,  476,  380,  381,  380,  380,  979,
      979,  382,  979,  277,  278,  379,  379,  379,  379,  979,
      979,  979,  383,  415,  415,  415,  415,  979,  595,  595,
      416,  596,  596,  596,  596,  447,  447,  447,  447,  979,
      383,  380,  381,  380,  380,  979,  979,  382,  416,  479,
      480,  481,  481,  481,  481,  381,  381,  381,  381,  979,
      979,  482,  979,  483,  484,  485,  485,  485,  485,  487,
      381,  487,  487,  979,  979,  488,  979,  489,  490,  491,
      491,  491,  491,  275,  169,  275,  275,  979,  979,  276,

      492,  493,  278,  494,  494,  494,  494,  288,  183,  288,
      288,  979,  979,  289,  979,  290,  291,  386,  386,  386,
      386,  979,  979,  979,  387,  453,  454,  454,  454,  454,
      625,  625,  625,  625,  627,  627,  627,  627,  463,  463,
      463,  463,  387,  288,  183,  288,  288,  979,  979,  289,
      497,  498,  291,  499,  499,  499,  499,  389,  389,  389,
      389,  979,  979,  390,  979,  979,  979,  388,  388,  388,
      388,  979,  979,  979,  391,  463,  463,  463,  463,  469,
      470,  470,  470,  470,  629,  629,  629,  629,  633,  633,
      633,  633,  391,  389,  389,  389,  389,  979,  979,  390,

      979,  500,  501,  502,  502,  502,  502,  504,  389,  504,
      504,  979,  979,  505,  979,  506,  507,  508,  508,  508,
      508,  393,  394,  393,  393,  979,  979,  395,  979,  301,
      302,  392,  392,  392,  392,  979,  979,  979,  396,  478,
      478,  478,  478,  484,  485,  485,  485,  485,  643,  643,
      643,  643,  646,  646,  646,  646,  396,  393,  394,  393,
      393,  979,  979,  395,  979,  511,  512,  513,  513,  513,
      513,  394,  394,  394,  394,  979,  979,  514,  979,  515,
      516,  517,  517,  517,  517,  519,  394,  519,  519,  979,
      979,  520,  979,  521,  522,  523,  523,  523,  523,  299,

      189,  299,  299,  979,  979,  300,  524,  525,  302,  526,
      526,  526,  526,  398,  398,  398,  398,  979,  979,  399,
      979,  979,  979,  397,  397,  397,  397,  979,  979,  979,
      400,  494,  494,  494,  494,  494,  494,  494,  494,  496,
      496,  496,  496,  496,  496,  496,  496,  979,  400,  398,
      398,  398,  398,  979,  979,  399,  979,  527,  528,  529,
      529,  529,  529,  531,  398,  531,  531,  979,  979,  532,
      979,  533,  534,  535,  535,  535,  535,  402,  403,  402,
      402,  979,  979,  404,  979,  312,  313,  401,  401,  401,
      401,  979,  979,  979,  405,  501,  502,  502,  502,  502,

      650,  650,  650,  650,  652,  652,  652,  652,  510,  510,
      510,  510,  405,  402,  403,  402,  402,  979,  979,  404,
      979,  538,  539,  540,  540,  540,  540,  403,  403,  403,
      403,  979,  979,  541,  979,  542,  543,  544,  544,  544,
      544,  546,  403,  546,  546,  979,  979,  547,  979,  548,
      549,  550,  550,  550,  550,  310,  195,  310,  310,  979,
      979,  311,  551,  552,  313,  553,  553,  553,  553,  407,
      407,  407,  407,  979,  979,  408,  979,  979,  979,  406,
      406,  406,  406,  979,  979,  979,  409,  516,  517,  517,
      517,  517,  656,  656,  656,  656,  658,  658,  658,  658,

      526,  526,  526,  526,  409,  407,  407,  407,  407,  979,
      979,  408,  979,  554,  555,  556,  556,  556,  556,  558,
      407,  558,  558,  979,  979,  559,  979,  560,  561,  562,
      562,  562,  562,  411,  412,  411,  411,  979,  979,  413,
      979,  326,  327,  410,  410,  410,  410,  979,  979,  979,
      414,  526,  526,  526,  526,  528,  529,  529,  529,  529,
      660,  660,  660,  660,  662,  662,  662,  662,  414,  411,
      412,  411,  411,  979,  979,  413,  979,  565,  566,  567,
      567,  567,  567,  412,  412,  412,  412,  979,  979,  568,
      979,  569,  570,  571,  571,  571,  571,  573,  412,  573,

      573,  979,  979,  574,  979,  575,  576,  577,  577,  577,
      577,  324,  208,  324,  324,  979,  979,  325,  578,  579,
      327,  580,  580,  580,  580,  335,  218,  335,  335,  979,
      979,  336,  979,  337,  338,  417,  417,  417,  417,  979,
      979,  979,  418,  537,  537,  537,  537,  979,  634,  635,
      634,  634,  979,  979,  636,  543,  544,  544,  544,  544,
      418,  335,  218,  335,  335,  637,  979,  336,  583,  584,
      338,  585,  585,  585,  585,  420,  420,  420,  420,  979,
      979,  421,  979,  637,  979,  419,  419,  419,  419,  979,
      979,  979,  422,  666,  666,  666,  666,  668,  668,  668,

      668,  553,  553,  553,  553,  553,  553,  553,  553,  979,
      422,  420,  420,  420,  420,  979,  979,  421,  979,  586,
      587,  588,  588,  588,  588,  590,  420,  590,  590,  979,
      979,  591,  979,  592,  593,  594,  594,  594,  594,  424,
      425,  424,  424,  979,  979,  426,  979,  348,  349,  423,
      423,  423,  423,  979,  979,  979,  427,  555,  556,  556,
      556,  556,  670,  670,  670,  670,  674,  674,  674,  674,
      564,  564,  564,  564,  427,  424,  425,  424,  424,  979,
      979,  426,  979,  597,  598,  599,  599,  599,  599,  425,
      425,  425,  425,  979,  979,  600,  979,  601,  602,  603,

      603,  603,  603,  605,  425,  605,  605,  979,  979,  606,
      979,  607,  608,  609,  609,  609,  609,  346,  224,  346,
      346,  979,  979,  347,  610,  611,  349,  612,  612,  612,
      612,  438,  439,  439,  439,  439,  979,  979,  979,  620,
      570,  571,  571,  571,  571,  684,  684,  684,  684,  687,
      687,  687,  687,  580,  580,  580,  580,  620,  441,  365,
      441,  441,  979,  979,  442,  979,  443,  444,  445,  445,
      445,  445,  441,  365,  441,  441,  979,  979,  442,  979,
      443,  444,  445,  445,  445,  445,  365,  365,  365,  365,
      979,  979,  366,  979,  979,  979,  447,  447,  447,  447,

      251,  153,  251,  251,  979,  979,  252,  979,  253,  449,
      450,  450,  450,  450,  251,  153,  251,  251,  979,  979,
      252,  979,  253,  254,  623,  623,  623,  623,  369,  370,
      369,  369,  979,  979,  371,  979,  979,  449,  450,  450,
      450,  450,  979,  979,  979,  624,  580,  580,  580,  580,
      979,  647,  640,  647,  647,  979,  979,  648,  582,  582,
      582,  582,  979,  624,  456,  370,  456,  456,  649,  979,
      457,  979,  458,  459,  460,  460,  460,  460,  365,  365,
      365,  365,  979,  979,  366,  979,  649,  453,  454,  454,
      454,  454,  979,  979,  979,  626,  582,  582,  582,  582,

      979,  979,  254,  463,  463,  463,  463,  979,  979,  979,
      372,  979,  979,  626,  456,  370,  456,  456,  979,  979,
      457,  979,  458,  459,  460,  460,  460,  460,  372,  263,
      264,  161,  264,  264,  263,  263,  265,  263,  266,  263,
      465,  466,  466,  466,  467,  467,  467,  467,  467,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      374,  263,  263,  263,  467,  467,  467,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  374,  630,  630,
      630,  630,  979,  979,  631,  979,  979,  469,  470,  470,
      470,  470,  979,  979,  979,  632,  587,  588,  588,  588,

      588,  691,  691,  691,  691,  693,  693,  693,  693,  596,
      596,  596,  596,  632,  472,  376,  472,  472,  979,  979,
      473,  979,  474,  475,  476,  476,  476,  476,  472,  376,
      472,  472,  979,  979,  473,  979,  474,  475,  476,  476,
      476,  476,  376,  376,  376,  376,  979,  979,  377,  979,
      979,  979,  478,  478,  478,  478,  275,  169,  275,  275,
      979,  979,  276,  979,  277,  480,  481,  481,  481,  481,
      275,  169,  275,  275,  979,  979,  276,  979,  277,  278,
      638,  638,  638,  638,  639,  640,  639,  639,  979,  979,
      641,  979,  979,  480,  481,  481,  481,  481,  979,  979,

      979,  642,  602,  603,  603,  603,  603,  675,  676,  675,
      675,  979,  979,  677,  697,  697,  697,  697,  979,  642,
      487,  381,  487,  487,  678,  979,  488,  979,  489,  490,
      491,  491,  491,  491,  635,  635,  635,  635,  979,  979,
      644,  979,  678,  484,  485,  485,  485,  485,  979,  979,
      979,  645,  699,  699,  699,  699,  979,  688,  681,  688,
      688,  979,  979,  689,  612,  612,  612,  612,  979,  645,
      487,  381,  487,  487,  690,  979,  488,  979,  489,  490,
      491,  491,  491,  491,  380,  381,  380,  380,  979,  979,
      382,  979,  690,  979,  494,  494,  494,  494,  979,  979,

      979,  383,  612,  612,  612,  612,  707,  707,  979,  708,
      708,  708,  708,  708,  708,  708,  708,  979,  979,  383,
      288,  183,  288,  288,  979,  979,  289,  979,  290,  291,
      499,  499,  499,  499,  288,  183,  288,  288,  979,  979,
      289,  979,  290,  291,  499,  499,  499,  499,  501,  502,
      502,  502,  502,  979,  979,  979,  651,  619,  619,  619,
      619,  979,  715,  715,  620,  716,  716,  716,  716,  708,
      708,  708,  708,  979,  651,  504,  389,  504,  504,  979,
      979,  505,  620,  506,  507,  508,  508,  508,  508,  504,
      389,  504,  504,  979,  979,  505,  979,  506,  507,  508,

      508,  508,  508,  389,  389,  389,  389,  979,  979,  390,
      979,  979,  979,  510,  510,  510,  510,  299,  189,  299,
      299,  979,  979,  300,  979,  301,  512,  513,  513,  513,
      513,  299,  189,  299,  299,  979,  979,  300,  979,  301,
      302,  654,  654,  654,  654,  393,  394,  393,  393,  979,
      979,  395,  979,  979,  512,  513,  513,  513,  513,  979,
      729,  729,  655,  730,  730,  730,  730,  762,  762,  979,
      763,  763,  763,  763,  716,  716,  716,  716,  979,  979,
      655,  519,  394,  519,  519,  979,  979,  520,  979,  521,
      522,  523,  523,  523,  523,  389,  389,  389,  389,  979,

      979,  390,  979,  979,  516,  517,  517,  517,  517,  979,
      770,  770,  657,  771,  771,  771,  771,  979,  979,  302,
      526,  526,  526,  526,  979,  979,  979,  396,  979,  979,
      657,  519,  394,  519,  519,  979,  979,  520,  979,  521,
      522,  523,  523,  523,  523,  396,  528,  529,  529,  529,
      529,  979,  979,  979,  661,  650,  650,  650,  650,  979,
      778,  778,  651,  779,  779,  779,  779,  721,  722,  722,
      722,  722,  661,  531,  398,  531,  531,  979,  979,  532,
      651,  533,  534,  535,  535,  535,  535,  531,  398,  531,
      531,  979,  979,  532,  979,  533,  534,  535,  535,  535,

      535,  398,  398,  398,  398,  979,  979,  399,  979,  979,
      979,  537,  537,  537,  537,  310,  195,  310,  310,  979,
      979,  311,  979,  312,  539,  540,  540,  540,  540,  310,
      195,  310,  310,  979,  979,  311,  979,  312,  313,  664,
      664,  664,  664,  402,  403,  402,  402,  979,  979,  404,
      979,  979,  539,  540,  540,  540,  540,  979,  979,  979,
      665,  660,  660,  660,  660,  979,  783,  783,  661,  784,
      784,  784,  784,  863,  863,  863,  863,  979,  665,  546,
      403,  546,  546,  979,  979,  547,  661,  548,  549,  550,
      550,  550,  550,  398,  398,  398,  398,  979,  979,  399,

      979,  979,  543,  544,  544,  544,  544,  979,  791,  791,
      667,  792,  792,  792,  792,  979,  979,  313,  553,  553,
      553,  553,  979,  979,  979,  405,  979,  979,  667,  546,
      403,  546,  546,  979,  979,  547,  979,  548,  549,  550,
      550,  550,  550,  405,  671,  671,  671,  671,  979,  979,
      672,  979,  979,  555,  556,  556,  556,  556,  979,  805,
      805,  673,  806,  806,  806,  806,  838,  838,  979,  839,
      839,  839,  839,  865,  865,  865,  865,  979,  979,  673,
      558,  407,  558,  558,  979,  979,  559,  979,  560,  561,
      562,  562,  562,  562,  558,  407,  558,  558,  979,  979,

      559,  979,  560,  561,  562,  562,  562,  562,  407,  407,
      407,  407,  979,  979,  408,  979,  979,  979,  564,  564,
      564,  564,  324,  208,  324,  324,  979,  979,  325,  979,
      326,  566,  567,  567,  567,  567,  324,  208,  324,  324,
      979,  979,  325,  979,  326,  327,  679,  679,  679,  679,
      680,  681,  680,  680,  979,  979,  682,  979,  979,  566,
      567,  567,  567,  567,  979,  979,  979,  683,  691,  691,
      691,  691,  979,  846,  846,  692,  847,  847,  847,  847,
      730,  730,  730,  730,  979,  683,  573,  412,  573,  573,
      979,  979,  574,  692,  575,  576,  577,  577,  577,  577,

      676,  676,  676,  676,  979,  979,  685,  979,  979,  570,
      571,  571,  571,  571,  979,  854,  854,  686,  855,  855,
      855,  855,  979,  369,  370,  369,  369,  979,  979,  371,
      735,  736,  736,  736,  736,  686,  573,  412,  573,  573,
      372,  979,  574,  979,  575,  576,  577,  577,  577,  577,
      411,  412,  411,  411,  979,  979,  413,  979,  372,  979,
      580,  580,  580,  580,  979,  979,  979,  414,  869,  869,
      869,  869,  871,  871,  871,  871,  745,  745,  745,  745,
      745,  745,  745,  745,  979,  414,  335,  218,  335,  335,
      979,  979,  336,  979,  337,  338,  585,  585,  585,  585,

      335,  218,  335,  335,  979,  979,  336,  979,  337,  338,
      585,  585,  585,  585,  587,  588,  588,  588,  588,  979,
      979,  979,  692,  751,  752,  752,  752,  752,  875,  875,
      875,  875,  877,  877,  877,  877,  761,  761,  761,  761,
      692,  590,  420,  590,  590,  979,  979,  591,  979,  592,
      593,  594,  594,  594,  594,  590,  420,  590,  590,  979,
      979,  591,  979,  592,  593,  594,  594,  594,  594,  420,
      420,  420,  420,  979,  979,  421,  979,  979,  979,  596,
      596,  596,  596,  346,  224,  346,  346,  979,  979,  347,
      979,  348,  598,  599,  599,  599,  599,  346,  224,  346,

      346,  979,  979,  347,  979,  348,  349,  695,  695,  695,
      695,  424,  425,  424,  424,  979,  979,  426,  979,  979,
      598,  599,  599,  599,  599,  979,  979,  979,  696,  761,
      761,  761,  761,  763,  763,  763,  763,  769,  769,  769,
      769,  769,  769,  769,  769,  979,  696,  605,  425,  605,
      605,  979,  979,  606,  979,  607,  608,  609,  609,  609,
      609,  420,  420,  420,  420,  979,  979,  421,  979,  979,
      602,  603,  603,  603,  603,  979,  979,  979,  698,  771,
      771,  771,  771,  979,  979,  349,  612,  612,  612,  612,
      979,  979,  979,  427,  979,  979,  698,  605,  425,  605,

      605,  979,  979,  606,  979,  607,  608,  609,  609,  609,
      609,  427,  441,  365,  441,  441,  979,  979,  442,  979,
      443,  444,  621,  621,  621,  621,  979,  979,  979,  622,
      771,  771,  771,  771,  779,  779,  779,  779,  784,  784,
      784,  784,  784,  784,  784,  784,  979,  622,  441,  365,
      441,  441,  979,  979,  442,  709,  710,  444,  711,  711,
      711,  711,  369,  370,  369,  369,  979,  979,  371,  979,
      253,  254,  623,  623,  623,  623,  979,  979,  979,  624,
      792,  792,  792,  792,  979,  393,  394,  393,  393,  979,
      979,  395,  797,  798,  798,  798,  798,  624,  251,  153,

      251,  251,  396,  979,  252,  712,  713,  254,  714,  714,
      714,  714,  365,  365,  365,  365,  979,  979,  366,  979,
      396,  979,  625,  625,  625,  625,  979,  979,  979,  626,
      881,  881,  881,  881,  979,  979,  721,  722,  722,  722,
      722,  979,  979,  979,  864,  979,  979,  626,  456,  370,
      456,  456,  979,  979,  457,  979,  458,  459,  627,  627,
      627,  627,  864,  979,  979,  628,  883,  883,  883,  883,
      979,  402,  403,  402,  402,  979,  979,  404,  806,  806,
      806,  806,  979,  628,  456,  370,  456,  456,  405,  979,
      457,  717,  718,  459,  719,  719,  719,  719,  630,  630,

      630,  630,  979,  979,  631,  979,  405,  979,  629,  629,
      629,  629,  979,  979,  979,  632,  811,  812,  812,  812,
      812,  887,  887,  887,  887,  889,  889,  889,  889,  821,
      821,  821,  821,  632,  630,  630,  630,  630,  979,  979,
      631,  979,  720,  721,  722,  722,  722,  722,  724,  630,
      724,  724,  979,  979,  725,  979,  726,  727,  728,  728,
      728,  728,  634,  635,  634,  634,  979,  979,  636,  979,
      474,  475,  633,  633,  633,  633,  979,  979,  979,  637,
      821,  821,  821,  821,  827,  828,  828,  828,  828,  893,
      893,  893,  893,  895,  895,  895,  895,  637,  634,  635,

      634,  634,  979,  979,  636,  979,  731,  732,  733,  733,
      733,  733,  635,  635,  635,  635,  979,  979,  644,  979,
      734,  735,  736,  736,  736,  736,  738,  635,  738,  738,
      979,  979,  739,  979,  740,  741,  742,  742,  742,  742,
      472,  376,  472,  472,  979,  979,  473,  743,  744,  475,
      745,  745,  745,  745,  639,  640,  639,  639,  979,  979,
      641,  979,  277,  278,  638,  638,  638,  638,  979,  979,
      979,  642,  837,  837,  837,  837,  837,  837,  837,  837,
      839,  839,  839,  839,  845,  845,  845,  845,  979,  642,
      639,  640,  639,  639,  979,  979,  641,  979,  746,  747,

      748,  748,  748,  748,  640,  640,  640,  640,  979,  979,
      749,  979,  750,  751,  752,  752,  752,  752,  754,  640,
      754,  754,  979,  979,  755,  979,  756,  757,  758,  758,
      758,  758,  275,  169,  275,  275,  979,  979,  276,  759,
      760,  278,  761,  761,  761,  761,  635,  635,  635,  635,
      979,  979,  644,  979,  979,  979,  643,  643,  643,  643,
      979,  979,  979,  645,  845,  845,  845,  845,  847,  847,
      847,  847,  847,  847,  847,  847,  855,  855,  855,  855,
      979,  645,  738,  635,  738,  738,  979,  979,  739,  979,
      740,  741,  742,  742,  742,  742,  647,  640,  647,  647,

      979,  979,  648,  979,  489,  490,  646,  646,  646,  646,
      979,  979,  979,  649,  863,  863,  863,  863,  979,  902,
      902,  864,  903,  903,  903,  903,  561,  885,  885,  885,
      885,  649,  647,  640,  647,  647,  979,  979,  648,  864,
      764,  765,  766,  766,  766,  766,  754,  640,  754,  754,
      979,  979,  755,  979,  756,  757,  758,  758,  758,  758,
      487,  381,  487,  487,  979,  979,  488,  767,  768,  490,
      769,  769,  769,  769,  504,  389,  504,  504,  979,  979,
      505,  979,  506,  507,  652,  652,  652,  652,  979,  910,
      910,  653,  911,  911,  911,  911,  918,  918,  979,  919,

      919,  919,  919,  979,  887,  887,  887,  887,  979,  653,
      504,  389,  504,  504,  979,  979,  505,  772,  773,  507,
      774,  774,  774,  774,  393,  394,  393,  393,  979,  979,
      395,  979,  301,  302,  654,  654,  654,  654,  979,  926,
      926,  655,  927,  927,  927,  927,  979,  424,  425,  424,
      424,  931,  932,  426,  933,  933,  933,  933,  979,  655,
      299,  189,  299,  299,  427,  979,  300,  775,  776,  302,
      777,  777,  777,  777,  389,  389,  389,  389,  979,  979,
      390,  979,  427,  979,  656,  656,  656,  656,  979,  934,
      934,  657,  935,  935,  935,  935,  979,  979,  475,  745,

      745,  745,  745,  979,  979,  979,  637,  979,  979,  657,
      519,  394,  519,  519,  979,  979,  520,  979,  521,  522,
      658,  658,  658,  658,  637,  936,  937,  659,  938,  938,
      938,  938,  327,  891,  891,  891,  891,  939,  940,  979,
      941,  941,  941,  941,  979,  659,  519,  394,  519,  519,
      979,  979,  520,  780,  781,  522,  782,  782,  782,  782,
      531,  398,  531,  531,  979,  979,  532,  979,  533,  534,
      662,  662,  662,  662,  979,  979,  979,  663,  979,  893,
      893,  893,  893,  942,  942,  979,  943,  943,  943,  943,
      576,  897,  897,  897,  897,  663,  531,  398,  531,  531,

      979,  979,  532,  785,  786,  534,  787,  787,  787,  787,
      402,  403,  402,  402,  979,  979,  404,  979,  312,  313,
      664,  664,  664,  664,  979,  944,  945,  665,  946,  946,
      946,  946,  947,  948,  979,  949,  949,  949,  949,  903,
      903,  903,  903,  979,  979,  665,  310,  195,  310,  310,
      979,  979,  311,  788,  789,  313,  790,  790,  790,  790,
      398,  398,  398,  398,  979,  979,  399,  979,  979,  979,
      666,  666,  666,  666,  979,  979,  979,  667,  903,  903,
      903,  903,  979,  979,  278,  761,  761,  761,  761,  979,
      979,  979,  383,  979,  979,  667,  546,  403,  546,  546,

      979,  979,  547,  979,  548,  549,  668,  668,  668,  668,
      383,  979,  979,  669,  911,  911,  911,  911,  919,  919,
      919,  919,  927,  927,  927,  927,  927,  927,  927,  927,
      979,  669,  546,  403,  546,  546,  979,  979,  547,  793,
      794,  549,  795,  795,  795,  795,  671,  671,  671,  671,
      979,  979,  672,  979,  979,  979,  670,  670,  670,  670,
      979,  979,  979,  673,  881,  881,  881,  881,  979,  979,
      979,  882,  933,  933,  933,  933,  933,  933,  933,  933,
      979,  673,  671,  671,  671,  671,  979,  979,  672,  882,
      796,  797,  798,  798,  798,  798,  800,  671,  800,  800,

      979,  979,  801,  979,  802,  803,  804,  804,  804,  804,
      675,  676,  675,  675,  979,  979,  677,  979,  560,  561,
      674,  674,  674,  674,  979,  979,  979,  678,  889,  889,
      889,  889,  979,  979,  979,  890,  935,  935,  935,  935,
      938,  938,  938,  938,  979,  678,  675,  676,  675,  675,
      979,  979,  677,  890,  807,  808,  809,  809,  809,  809,
      676,  676,  676,  676,  979,  979,  685,  979,  810,  811,
      812,  812,  812,  812,  814,  676,  814,  814,  979,  979,
      815,  979,  816,  817,  818,  818,  818,  818,  558,  407,
      558,  558,  979,  979,  559,  819,  820,  561,  821,  821,

      821,  821,  680,  681,  680,  680,  979,  979,  682,  979,
      326,  327,  679,  679,  679,  679,  979,  979,  979,  683,
      895,  895,  895,  895,  979,  979,  979,  896,  938,  938,
      938,  938,  941,  941,  941,  941,  979,  683,  680,  681,
      680,  680,  979,  979,  682,  896,  822,  823,  824,  824,
      824,  824,  681,  681,  681,  681,  979,  979,  825,  979,
      826,  827,  828,  828,  828,  828,  830,  681,  830,  830,
      979,  979,  831,  979,  832,  833,  834,  834,  834,  834,
      324,  208,  324,  324,  979,  979,  325,  835,  836,  327,
      837,  837,  837,  837,  676,  676,  676,  676,  979,  979,

      685,  979,  979,  979,  684,  684,  684,  684,  979,  979,
      979,  686,  938,  938,  938,  938,  979,  979,  979,  890,
      941,  941,  941,  941,  943,  943,  943,  943,  979,  686,
      814,  676,  814,  814,  979,  979,  815,  890,  816,  817,
      818,  818,  818,  818,  688,  681,  688,  688,  979,  979,
      689,  979,  575,  576,  687,  687,  687,  687,  979,  979,
      979,  690,  946,  946,  946,  946,  946,  946,  946,  946,
      949,  949,  949,  949,  949,  949,  949,  949,  979,  690,
      688,  681,  688,  688,  979,  979,  689,  979,  840,  841,
      842,  842,  842,  842,  830,  681,  830,  830,  979,  979,

      831,  979,  832,  833,  834,  834,  834,  834,  573,  412,
      573,  573,  979,  979,  574,  843,  844,  576,  845,  845,
      845,  845,  590,  420,  590,  590,  979,  979,  591,  979,
      592,  593,  693,  693,  693,  693,  979,  979,  965,  694,
      966,  965,  979,  979,  967,  968,  969,  970,  968,  979,
      965,  971,  965,  965,  979,  979,  967,  694,  590,  420,
      590,  590,  979,  979,  591,  848,  849,  593,  850,  850,
      850,  850,  424,  425,  424,  424,  979,  979,  426,  979,
      348,  349,  695,  695,  695,  695,  979,  979,  965,  696,
      965,  965,  979,  973,  967,  973,  973,  979,  979,  974,

      968,  962,  970,  968,  979,  979,  971,  696,  346,  224,
      346,  346,  979,  979,  347,  851,  852,  349,  853,  853,
      853,  853,  420,  420,  420,  420,  979,  979,  421,  979,
      979,  979,  697,  697,  697,  697,  979,  979,  965,  698,
      966,  965,  979,  979,  967,  979,  490,  769,  769,  769,
      769,  979,  979,  979,  649,  979,  979,  698,  605,  425,
      605,  605,  979,  979,  606,  979,  607,  608,  699,  699,
      699,  699,  649,  979,  979,  700,  968,  969,  970,  968,
      979,  979,  971,  976,  962,  977,  976,  979,  979,  978,
      979,  979,  979,  700,  605,  425,  605,  605,  979,  979,

      606,  856,  857,  608,  858,  858,  858,  858,  441,  365,
      441,  441,  979,  979,  442,  979,  443,  444,  711,  711,
      711,  711,  441,  365,  441,  441,  979,  979,  442,  979,
      443,  444,  711,  711,  711,  711,  251,  153,  251,  251,
      979,  979,  252,  979,  253,  254,  714,  714,  714,  714,
      251,  153,  251,  251,  979,  979,  252,  979,  253,  254,
      714,  714,  714,  714,  365,  365,  365,  365,  979,  979,
      366,  979,  979,  979,  716,  716,  716,  716,  456,  370,
      456,  456,  979,  979,  457,  979,  458,  459,  719,  719,
      719,  719,  456,  370,  456,  456,  979,  979,  457,  979,

      458,  459,  719,  719,  719,  719,  724,  630,  724,  724,
      979,  979,  725,  979,  726,  727,  728,  728,  728,  728,
      724,  630,  724,  724,  979,  979,  725,  979,  726,  727,
      728,  728,  728,  728,  630,  630,  630,  630,  979,  979,
      631,  979,  979,  979,  730,  730,  730,  730,  472,  376,
      472,  472,  979,  979,  473,  979,  474,  732,  733,  733,
      733,  733,  472,  376,  472,  472,  979,  979,  473,  979,
      474,  475,  867,  867,  867,  867,  634,  635,  634,  634,
      979,  979,  636,  979,  979,  732,  733,  733,  733,  733,
      979,  979,  979,  868,  797,  798,  798,  798,  798,  979,

      979,  979,  882,  946,  946,  946,  946,  979,  979,  979,
      896,  868,  630,  630,  630,  630,  979,  979,  631,  979,
      882,  735,  736,  736,  736,  736,  979,  979,  896,  870,
      973,  979,  973,  973,  979,  973,  974,  973,  973,  979,
      973,  974,  973,  973,  979,  979,  974,  870,  738,  635,
      738,  738,  979,  979,  739,  979,  740,  741,  742,  742,
      742,  742,  738,  635,  738,  738,  979,  979,  739,  979,
      740,  741,  742,  742,  742,  742,  275,  169,  275,  275,
      979,  979,  276,  979,  277,  747,  748,  748,  748,  748,
      275,  169,  275,  275,  979,  979,  276,  979,  277,  278,

      873,  873,  873,  873,  639,  640,  639,  639,  979,  979,
      641,  979,  979,  747,  748,  748,  748,  748,  979,  979,
      979,  874,  976,  962,  977,  976,  979,  979,  978,  976,
      962,  977,  976,  979,  979,  978,  979,  979,  979,  874,
      754,  640,  754,  754,  979,  979,  755,  979,  756,  757,
      758,  758,  758,  758,  635,  635,  635,  635,  979,  979,
      644,  979,  979,  751,  752,  752,  752,  752,  979,  979,
      979,  876,  976,  969,  977,  976,  979,  979,  978,  976,
      962,  977,  976,  979,  979,  978,  979,  979,  979,  876,
      754,  640,  754,  754,  979,  979,  755,  979,  756,  757,

      758,  758,  758,  758,  635,  635,  635,  635,  979,  979,
      644,  979,  979,  979,  763,  763,  763,  763,  487,  381,
      487,  487,  979,  979,  488,  979,  489,  765,  766,  766,
      766,  766,  487,  381,  487,  487,  979,  979,  488,  979,
      489,  490,  879,  879,  879,  879,  647,  640,  647,  647,
      979,  979,  648,  979,  979,  765,  766,  766,  766,  766,
      979,  979,  979,  880,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  880,  504,  389,  504,  504,  979,  979,  505,  979,
      506,  507,  774,  774,  774,  774,  504,  389,  504,  504,

      979,  979,  505,  979,  506,  507,  774,  774,  774,  774,
      299,  189,  299,  299,  979,  979,  300,  979,  301,  302,
      777,  777,  777,  777,  299,  189,  299,  299,  979,  979,
      300,  979,  301,  302,  777,  777,  777,  777,  389,  389,
      389,  389,  979,  979,  390,  979,  979,  979,  779,  779,
      779,  779,  519,  394,  519,  519,  979,  979,  520,  979,
      521,  522,  782,  782,  782,  782,  519,  394,  519,  519,
      979,  979,  520,  979,  521,  522,  782,  782,  782,  782,
      531,  398,  531,  531,  979,  979,  532,  979,  533,  534,
      787,  787,  787,  787,  531,  398,  531,  531,  979,  979,

      532,  979,  533,  534,  787,  787,  787,  787,  310,  195,
      310,  310,  979,  979,  311,  979,  312,  313,  790,  790,
      790,  790,  310,  195,  310,  310,  979,  979,  311,  979,
      312,  313,  790,  790,  790,  790,  398,  398,  398,  398,
      979,  979,  399,  979,  979,  979,  792,  792,  792,  792,
      546,  403,  546,  546,  979,  979,  547,  979,  548,  549,
      795,  795,  795,  795,  546,  403,  546,  546,  979,  979,
      547,  979,  548,  549,  795,  795,  795,  795,  800,  671,
      800,  800,  979,  979,  801,  979,  802,  803,  804,  804,
      804,  804,  800,  671,  800,  800,  979,  979,  801,  979,

      802,  803,  804,  804,  804,  804,  671,  671,  671,  671,
      979,  979,  672,  979,  979,  979,  806,  806,  806,  806,
      558,  407,  558,  558,  979,  979,  559,  979,  560,  808,
      809,  809,  809,  809,  558,  407,  558,  558,  979,  979,
      559,  979,  560,  561,  885,  885,  885,  885,  675,  676,
      675,  675,  979,  979,  677,  979,  979,  808,  809,  809,
      809,  809,  979,  979,  979,  886,  561,  821,  821,  821,
      821,  979,  979,  979,  678,  979,  979,  979,  979,  979,
      979,  979,  979,  886,  671,  671,  671,  671,  979,  979,
      672,  979,  678,  811,  812,  812,  812,  812,  979,  979,

      979,  888,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  888,
      814,  676,  814,  814,  979,  979,  815,  979,  816,  817,
      818,  818,  818,  818,  814,  676,  814,  814,  979,  979,
      815,  979,  816,  817,  818,  818,  818,  818,  324,  208,
      324,  324,  979,  979,  325,  979,  326,  823,  824,  824,
      824,  824,  324,  208,  324,  324,  979,  979,  325,  979,
      326,  327,  891,  891,  891,  891,  680,  681,  680,  680,
      979,  979,  682,  979,  979,  823,  824,  824,  824,  824,
      979,  979,  979,  892,  979,  979,  979,  979,  979,  979,

      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  892,  830,  681,  830,  830,  979,  979,  831,  979,
      832,  833,  834,  834,  834,  834,  676,  676,  676,  676,
      979,  979,  685,  979,  979,  827,  828,  828,  828,  828,
      979,  979,  979,  894,  979,  979,  979,  979,  979,  979,
      327,  837,  837,  837,  837,  979,  979,  979,  414,  979,
      979,  894,  830,  681,  830,  830,  979,  979,  831,  979,
      832,  833,  834,  834,  834,  834,  414,  676,  676,  676,
      676,  979,  979,  685,  979,  979,  979,  839,  839,  839,
      839,  573,  412,  573,  573,  979,  979,  574,  979,  575,

      841,  842,  842,  842,  842,  573,  412,  573,  573,  979,
      979,  574,  979,  575,  576,  897,  897,  897,  897,  688,
      681,  688,  688,  979,  979,  689,  979,  979,  841,  842,
      842,  842,  842,  979,  979,  979,  898,  576,  845,  845,
      845,  845,  979,  979,  979,  690,  979,  979,  979,  979,
      979,  979,  979,  979,  898,  979,  979,  979,  979,  979,
      979,  979,  979,  690,  590,  420,  590,  590,  979,  979,
      591,  979,  592,  593,  850,  850,  850,  850,  590,  420,
      590,  590,  979,  979,  591,  979,  592,  593,  850,  850,
      850,  850,  346,  224,  346,  346,  979,  979,  347,  979,

      348,  349,  853,  853,  853,  853,  346,  224,  346,  346,
      979,  979,  347,  979,  348,  349,  853,  853,  853,  853,
      420,  420,  420,  420,  979,  979,  421,  979,  979,  979,
      855,  855,  855,  855,  605,  425,  605,  605,  979,  979,
      606,  979,  607,  608,  858,  858,  858,  858,  605,  425,
      605,  605,  979,  979,  606,  979,  607,  608,  858,  858,
      858,  858,  724,  630,  724,  724,  979,  979,  725,  979,
      726,  727,  865,  865,  865,  865,  979,  979,  979,  866,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  866,  724,  630,

      724,  724,  979,  979,  725,  904,  905,  727,  906,  906,
      906,  906,  634,  635,  634,  634,  979,  979,  636,  979,
      474,  475,  867,  867,  867,  867,  979,  979,  979,  868,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  868,  472,  376,
      472,  472,  979,  979,  473,  907,  908,  475,  909,  909,
      909,  909,  630,  630,  630,  630,  979,  979,  631,  979,
      979,  979,  869,  869,  869,  869,  979,  979,  979,  870,
      979,  979,  979,  979,  979,  979,  561,  933,  933,  933,
      933,  979,  979,  979,  678,  979,  979,  870,  738,  635,

      738,  738,  979,  979,  739,  979,  740,  741,  871,  871,
      871,  871,  678,  979,  979,  872,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  872,  738,  635,  738,  738,  979,  979,
      739,  912,  913,  741,  914,  914,  914,  914,  639,  640,
      639,  639,  979,  979,  641,  979,  277,  278,  873,  873,
      873,  873,  979,  979,  979,  874,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  874,  275,  169,  275,  275,  979,  979,
      276,  915,  916,  278,  917,  917,  917,  917,  635,  635,

      635,  635,  979,  979,  644,  979,  979,  979,  875,  875,
      875,  875,  979,  979,  979,  876,  979,  979,  979,  979,
      979,  979,  327,  941,  941,  941,  941,  979,  979,  979,
      414,  979,  979,  876,  754,  640,  754,  754,  979,  979,
      755,  979,  756,  757,  877,  877,  877,  877,  414,  979,
      979,  878,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  878,
      754,  640,  754,  754,  979,  979,  755,  920,  921,  757,
      922,  922,  922,  922,  647,  640,  647,  647,  979,  979,
      648,  979,  489,  490,  879,  879,  879,  879,  979,  979,

      979,  880,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  880,
      487,  381,  487,  487,  979,  979,  488,  923,  924,  490,
      925,  925,  925,  925,  800,  671,  800,  800,  979,  979,
      801,  979,  802,  803,  883,  883,  883,  883,  979,  979,
      979,  884,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  884,
      800,  671,  800,  800,  979,  979,  801,  928,  929,  803,
      930,  930,  930,  930,  634,  635,  634,  634,  979,  979,
      636,  471,  474,  979,  979,  979,  979,  979,  979,  979,

      979,  637,  576,  949,  949,  949,  949,  979,  979,  979,
      690,  979,  979,  979,  979,  979,  979,  979,  979,  637,
      630,  630,  630,  630,  979,  979,  631,  979,  690,  979,
      911,  911,  911,  911,  639,  640,  639,  639,  979,  979,
      641,  274,  277,  979,  979,  979,  979,  979,  979,  979,
      979,  383,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  383,
      635,  635,  635,  635,  979,  979,  644,  979,  979,  979,
      919,  919,  919,  919,  647,  640,  647,  647,  979,  979,
      648,  486,  489,  979,  979,  979,  979,  979,  979,  979,

      979,  649,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  649,
      671,  671,  671,  671,  979,  979,  672,  979,  979,  979,
      935,  935,  935,  935,  676,  676,  676,  676,  979,  979,
      685,  979,  979,  979,  943,  943,  943,  943,   46,   46,
       46,   46,   46,   46,   46,   46,   81,   81,   81,   81,
       81,   81,   81,   81,  109,  109,  109,  109,  109,  109,
      109,  109,  119,  119,  119,  119,  119,  119,  119,  119,
      130,  130,  979,  130,  130,  130,  130,  130,  131,  131,
      979,  131,  131,  131,  131,  131,  134,  979,  979,  134,

      135,  979,  979,  135,  172,  979,  979,  172,  979,  172,
      172,  172,  173,  173,  979,  173,  173,  173,  173,  173,
      211,  979,  979,  211,  979,  211,  211,  212,  212,  979,
      212,  212,  212,  212,  212,  227,  227,  979,  227,  979,
      227,  227,  227,  230,  230,  979,  230,  230,  230,  230,
      230,  250,  250,  250,  250,  250,  250,  250,  250,  263,
      263,  263,  263,  263,  263,  263,  263,  269,  269,  979,
      979,  269,  269,  274,  274,  274,  274,  274,  274,  274,
      274,  287,  287,  287,  287,  287,  287,  287,  287,  298,
      298,  298,  298,  298,  298,  298,  298,  309,  309,  309,

      309,  309,  309,  309,  309,  323,  323,  323,  323,  323,
      323,  323,  323,  211,  979,  979,  211,  979,  211,  211,
      212,  212,  979,  212,  212,  212,  212,  212,  334,  334,
      334,  334,  334,  334,  334,  334,  345,  345,  345,  345,
      345,  345,  345,  345,  227,  227,  979,  227,  979,  227,
      227,  227,  230,  230,  979,  230,  230,  230,  230,  230,
      131,  131,  979,  131,  131,  131,  131,  131,  134,  979,
      979,  134,  250,  250,  250,  250,  250,  250,  250,  250,
      263,  263,  263,  263,  263,  263,  263,  263,  269,  269,
      979,  979,  269,  269,  274,  274,  274,  274,  274,  274,

      274,  274,  287,  287,  287,  287,  287,  287,  287,  287,
      298,  298,  298,  298,  298,  298,  298,  298,  309,  309,
      309,  309,  309,  309,  309,  309,  323,  323,  323,  323,
      323,  323,  323,  323,  440,  440,  440,  440,  440,  440,
      440,  440,  455,  455,  455,  455,  455,  455,  455,  455,
      263,  263,  263,  263,  263,  263,  263,  263,  471,  471,
      471,  471,  471,  471,  471,  471,  274,  274,  274,  274,
      274,  274,  274,  274,  486,  486,  486,  486,  486,  486,
      486,  486,  287,  287,  287,  287,  287,  287,  287,  287,
      503,  503,  503,  503,  503,  503,  503,  503,  298,  298,

      298,  298,  298,  298,  298,  298,  518,  518,  518,  518,
      518,  518,  518,  518,  530,  530,  530,  530,  530,  530,
      530,  530,  309,  309,  309,  309,  309,  309,  309,  309,
      545,  545,  545,  545,  545,  545,  545,  545,  557,  557,
      557,  557,  557,  557,  557,  557,  323,  323,  323,  323,
      323,  323,  323,  323,  572,  572,  572,  572,  572,  572,
      572,  572,  334,  334,  334,  334,  334,  334,  334,  334,
      589,  589,  589,  589,  589,  589,  589,  589,  345,  345,
      345,  345,  345,  345,  345,  345,  604,  604,  604,  604,
      604,  604,  604,  604,  131,  131,  979,  131,  131,  131,

      131,  131,  134,  979,  979,  134,  440,  440,  440,  440,
      440,  440,  440,  440,  250,  250,  250,  250,  250,  250,
      250,  250,  455,  455,  455,  455,  455,  455,  455,  455,
      471,  471,  471,  471,  471,  471,  471,  471,  274,  274,
      274,  274,  274,  274,  274,  274,  486,  486,  486,  486,
      486,  486,  486,  486,  287,  287,  287,  287,  287,  287,
      287,  287,  503,  503,  503,  503,  503,  503,  503,  503,
      298,  298,  298,  298,  298,  298,  298,  298,  518,  518,
      518,  518,  518,  518,  518,  518,  530,  530,  530,  530,
      530,  530,  530,  530,  309,  309,  309,  309,  309,  309,

      309,  309,  545,  545,  545,  545,  545,  545,  545,  545,
      557,  557,  557,  557,  557,  557,  557,  557,  323,  323,
      323,  323,  323,  323,  323,  323,  572,  572,  572,  572,
      572,  572,  572,  572,  334,  334,  334,  334,  334,  334,
      334,  334,  589,  589,  589,  589,  589,  589,  589,  589,
      345,  345,  345,  345,  345,  345,  345,  345,  604,  604,
      604,  604,  604,  604,  604,  604,  131,  131,  979,  131,
      131,  131,  131,  131,  134,  979,  979,  134,  440,  440,
      440,  440,  440,  440,  440,  440,  250,  250,  250,  250,
      250,  250,  250,  250,  455,  455,  455,  455,  455,  455,

      455,  455,  723,  723,  723,  723,  723,  723,  723,  723,
      471,  471,  471,  471,  471,  471,  471,  471,  737,  737,
      737,  737,  737,  737,  737,  737,  274,  274,  274,  274,
      274,  274,  274,  274,  753,  753,  753,  753,  753,  753,
      753,  753,  486,  486,  486,  486,  486,  486,  486,  486,
      503,  503,  503,  503,  503,  503,  503,  503,  298,  298,
      298,  298,  298,  298,  298,  298,  518,  518,  518,  518,
      518,  518,  518,  518,  530,  530,  530,  530,  530,  530,
      530,  530,  309,  309,  309,  309,  309,  309,  309,  309,
      545,  545,  545,  545,  545,  545,  545,  545,  799,  799,

      799,  799,  799,  799,  799,  799,  557,  557,  557,  557,
      557,  557,  557,  557,  813,  813,  813,  813,  813,  813,
      813,  813,  323,  323,  323,  323,  323,  323,  323,  323,
      829,  829,  829,  829,  829,  829,  829,  829,  572,  572,
      572,  572,  572,  572,  572,  572,  589,  589,  589,  589,
      589,  589,  589,  589,  345,  345,  345,  345,  345,  345,
      345,  345,  604,  604,  604,  604,  604,  604,  604,  604,
      131,  131,  979,  131,  131,  131,  131,  131,  134,  979,
      979,  134,  440,  440,  440,  440,  440,  440,  440,  440,
      250,  250,  250,  250,  250,  250,  250,  250,  455,  455,

      455,  455,  455,  455,  455,  455,  723,  723,  723,  723,
      723,  723,  723,  723,  471,  471,  471,  471,  471,  471,
      471,  471,  737,  737,  737,  737,  737,  737,  737,  737,
      274,  274,  274,  274,  274,  274,  274,  274,  753,  753,
      753,  753,  753,  753,  753,  753,  486,  486,  486,  486,
      486,  486,  486,  486,  503,  503,  503,  503,  503,  503,
      503,  503,  298,  298,  298,  298,  298,  298,  298,  298,
      518,  518,  518,  518,  518,  518,  518,  518,  530,  530,
      530,  530,  530,  530,  530,  530,  309,  309,  309,  309,
      309,  309,  309,  309,  545,  545,  545,  545,  545,  545,

      545,  545,  799,  799,  799,  799,  799,  799,  799,  799,
      557,  557,  557,  557,  557,  557,  557,  557,  813,  813,
      813,  813,  813,  813,  813,  813,  323,  323,  323,  323,
      323,  323,  323,  323,  829,  829,  829,  829,  829,  829,
      829,  829,  572,  572,  572,  572,  572,  572,  572,  572,
      589,  589,  589,  589,  589,  589,  589,  589,  345,  345,
      345,  345,  345,  345,  345,  345,  604,  604,  604,  604,
      604,  604,  604,  604,  131,  131,  979,  131,  131,  131,
      131,  131,  134,  979,  979,  134,  723,  723,  723,  723,
      723,  723,  723,  723,  471,  471,  471,  471,  471,  471,

      471,  471,  737,  737,  737,  737,  737,  737,  737,  737,
      274,  274,  274,  274,  274,  274,  274,  274,  753,  753,
      753,  753,  753,  753,  753,  753,  486,  486,  486,  486,
      486,  486,  486,  486,  799,  799,  799,  799,  799,  799,
      799,  799,  961,  961,  961,  961,  961,  961,  961,  961,
      972,  972,  979,  972,  972,  972,  972,  972,  975,  975,
      975,  975,  975,  975,  975,  975,   45,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,

      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979
    } ;

static const flex_int16_t yy_chk[8917] =
    {   0,
        0,    1,    1,    1,    1,    0, 1049,    1,    2,    2,
        2,    2,  122,  122,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    5,   60,   60,
        5,    9,    9,    9,    9,    9,    9,   66,   66,   66,
       66,   66,    5,    5,   10,   10,   10,   10,   10,   10,
      133,    5,    6,    6,    6,    6,  229,  229,    6,   11,

       11,   11,   11,   11,   11,   67,   67,   67,   67,  133,
        6,    6,   12,   12,   12,   12,   12,   12, 1025,    6,
        7,    7,    7,    7,  230,  230,    7, 1021,    7,    7,
        7,    7,    7,    7,   69,   69,   69,   69,   69,    7,
       13,   13,   13,   13,   13,   13,   14,   14,   14,   14,
       14,   14,   15,   15,   15,   15,   15,   15,   16,   16,
       16,   16,   16,   16,   17,   17,   17,   17,  354,   17,
       17,   18,   18,   18,   18, 1016,   18,   18,   70,   70,
       70,   70,  354,   17,   19,   19,   19,   19,   19,   19,
       18,   20,   20,   20,   20,   20,   20,   21,   21,   21,

       21,   21,   21,   22,   22,   22,   22,   22,   22,   23,
       23,   23,   23,   23,   23,   24,   24,   24,   24,   24,
       24,   25,   25,   25,   25,   25,   25,  292,   39,   39,
       39,   39,   25,   39,   39,   40,   40,   40,   40,   49,
       40,   40,  231,  231,   25,  292,   25,   26,   26,   26,
       26,   26,   26,   47,   74,   47,   47,  432,   26,   47,
       39,  432,   49,   41,   41,   41,   41,   40,   41,   41,
       26,   74,   26,   27,   27,   27,   27,   27,   27,  235,
       42,   42,   42,   42,   27,   42,   42,  904,  904,   71,
       71,   71,   71,   71,  235,   41,   27,   71,   27,   28,

       28,   28,   28,   28,   28,   72,   72,   72,   72,  899,
       28,  428,   42,  899,  428,   71,   75,   75,   75,   75,
      267, 1010,   28, 1002,   28,   29,   29,   29,   29,   29,
       29,   77,   77,   77,   77,  997,   29,  267,   43,   43,
       43,   43,   43,   43,   79,   79,   79,   79,   29,   43,
       29,   30,   30,   30,   30,   30,   30,   78,   78,   78,
       78,   78,   30,  956,   44,   44,   44,   44,   44,   44,
       86,   86,   86,   86,   30,   44,   30,   31,   31,   31,
       31,   31,   31,   85,   85,   85,   85,   85,   31,  613,
       76,   76,   76,   76,   88,   88,   88,   88,   88,  339,

       31,  956,   31,   32,   32,   32,   32,   32,   32,  955,
       76,  952,  613,   83,   32,   83,   83,  339,   83,   83,
       89,   89,   89,   89,  905,  905,   32,   76,   32,   33,
       33,   33,   33,  951,   33,   33,   91,   91,   91,   91,
       91,   87,   87,   87,   87,   87,  907,  907,   33,   87,
       92,   92,   92,   92,   94,   94,   94,   94,   94,  901,
       33,  445,   33,   34,   34,   34,   34,   87,   34,   34,
       95,   95,   95,   95,  100,  100,  100,  100,  100,  445,
      908,  908,   34,  101,  101,  101,  101,  102,  102,  102,
      102,  102,  912,  912,   34,  102,   34,   35,   35,   35,

       35,   35,   35,  103,  103,  103,  103,  900,   35,  105,
      105,  105,  105,  102,  106,  106,  106,  106,  106,  862,
       35,  860,   35,   36,   36,   36,   36,   36,   36,  107,
      107,  107,  107,  705,   36,  704,  104,  104,  104,  104,
      113,  113,  113,  113,  113,  460,   36,  702,   36,   37,
       37,   37,   37,   37,   37,  859,  104,  618,  859,  111,
       37,  111,  111,  460,  111,  111,  114,  114,  114,  114,
      466,  467,   37,  104,   37,   38,   38,   38,   38,   38,
       38,  116,  116,  116,  116,  116,   38,  466,  467,  617,
      111,  499,  111,  117,  117,  117,  117,  508,   38,  701,

       38,   68,   68,   68,   68,  701,  616,   68,  615,  499,
       68,   68,   68,   68,   68,  508,  614,  120,   68,  120,
      120,  913,  913,  120,  125,  125,  125,  125,  523,  915,
      915,  126,  126,  126,  126,  435,   68,   73,   73,   73,
       73,  433,  535,   73,  916,  916,  523,   73,   73,   73,
       73,  126,  127,  127,  127,  127,  128,  429,  128,  128,
      535,  362,  128,  150,  150,  150,  150,   73,  126,  152,
      152,  152,  152,  152,  155,  155,  361,  155,  155,  155,
      155,  550,  585,  594,   73,   80,   80,   80,   80,  609,
      711,   80,  920,  920,   80,   80,   80,   80,   80,  550,

      585,  594,   80,  156,  156,  156,  156,  609,  711,  157,
      157,  157,  157,  157,  921,  921,  953,  157,  719,  728,
       80,   90,   90,   90,   90,  742,  360,   90,  923,  923,
       90,   90,   90,   90,   90,  157,  719,  728,   90,  158,
      158,  158,  158,  742,  159,  159,  158,  159,  159,  159,
      159,  164,  164,  164,  164,  953,   90,   93,   93,   93,
       93,  924,  924,   93,  158,  758,   93,   93,   93,   93,
       93,  958,  774,  161,   93,  161,  161,  161,  161,  163,
      163,  163,  163,  758,  359,  163,  166,  166,  166,  166,
      774,  782,   93,   96,   96,   96,   96,  928,  928,   96,

      787,  958,   96,   96,   96,   96,   96,  929,  929,  782,
       96,  168,  168,  168,  168,  168,  171,  171,  787,  171,
      171,  171,  171,  176,  176,  176,  176,  959,   96,  108,
      108,  108,  108,  950,  959,  108,  950,  358,  108,  108,
      108,  108,  108,  357,  356,  173,  108,  173,  173,  355,
      173,  173,  174,  246,  174,  174,  245,  174,  174,  180,
      180,  180,  180,  795,  108,  115,  115,  115,  115,  244,
      804,  115,  818,  243,  115,  115,  115,  115,  115,  834,
      850,  795,  115,  177,  177,  177,  177,  177,  804,  242,
      818,  177,  178,  178,  178,  178,  241,  834,  850,  178,

      115,  118,  118,  118,  118,  239,  238,  118,  237,  177,
      118,  118,  118,  118,  118,  149,  147,  178,  118,  179,
      179,  146,  179,  179,  179,  179,  182,  182,  182,  182,
      182,  186,  186,  186,  186,  145,  118,  153,  153,  153,
      153,  144,  143,  153,  142,  153,  153,  153,  153,  153,
      153,  154,  154,  154,  154,  140,  858,  154,  139,  154,
      154,  154,  154,  154,  154,  162,  162,  162,  162,  137,
      136,  162,  132,  162,  858,  162,  162,  162,  162,  169,
      169,  169,  169,  131,  129,  169,  123,  169,  169,  169,
      169,  169,  169,  170,  170,  170,  170,  112,   97,  170,

       84,  170,  170,  170,  170,  170,  170,  183,  183,  183,
      183,   65,   64,  183,   63,  183,  183,  183,  183,  183,
      183,  184,  184,  184,  184,   62,   61,  184,   59,  184,
      184,  184,  184,  184,  184,  185,  185,   58,  185,  185,
      185,  185,  188,  188,  188,  188,  188,  189,  189,  189,
      189,   57,   56,  189,   55,  189,  189,  189,  189,  189,
      189,  190,  190,  190,  190,   54,   53,  190,   51,  190,
      190,  190,  190,  190,  190,  191,  191,   45,  191,  191,
      191,  191,  192,  192,  192,  192,  194,  194,  194,  194,
      194,  195,  195,  195,  195,    0,    0,  195,    0,  195,

      195,  195,  195,  195,  195,  196,  196,  196,  196,    0,
        0,  196,    0,  196,  196,  196,  196,  196,  196,  197,
      197,    0,  197,  197,  197,  197,  199,  199,  199,  199,
      200,  200,  200,  200,  200,    0,    0,    0,  200,  201,
      201,  201,  201,    0,  202,  202,  201,  202,  202,  202,
      202,  203,  203,  203,  203,    0,  200,  205,  205,  205,
      205,    0,    0,    0,  201,  207,  207,  207,  207,  207,
      208,  208,  208,  208,    0,    0,  208,    0,  208,  208,
      208,  208,  208,  208,  209,  209,  209,  209,    0,    0,
      209,    0,  209,  209,  209,  209,  209,  209,  210,  210,

        0,  210,  210,  210,  210,  212,    0,  212,  212,    0,
      212,  212,  213,    0,  213,  213,    0,  213,  213,  215,
      215,  215,  215,  217,  217,  217,  217,  217,  220,  220,
        0,  220,  220,  220,  220,    0,  212,    0,  212,  221,
      221,  221,  221,  213,    0,  213,  216,  216,  216,  216,
        0,    0,  216,    0,    0,  216,  216,  216,  216,  216,
        0,  906,  906,  216,  223,  223,  223,  223,  223,  226,
      226,  906,  226,  226,  226,  226,  233,  233,  233,  233,
        0,  216,  218,  218,  218,  218,    0,    0,  218,  906,
      218,  218,  218,  218,  218,  218,  219,  219,  219,  219,

        0,    0,  219,    0,  219,  219,  219,  219,  219,  219,
      222,  222,  222,  222,  914,  914,  222,    0,    0,  222,
      222,  222,  222,  222,  914,    0,  228,  222,  228,  228,
        0,    0,  228,  247,  247,  247,  247,  247,  248,  248,
      248,  248,  914,    0,    0,  222,  224,  224,  224,  224,
        0,    0,  224,    0,  224,  224,  224,  224,  224,  224,
      225,  225,  225,  225,    0,    0,  225,    0,  225,  225,
      225,  225,  225,  225,  249,  249,  249,  249,    0,    0,
      249,    0,    0,  249,  249,  249,  249,  249,    0,    0,
        0,  249,  254,  254,  254,  254,  256,  256,  256,  256,

      258,  258,  258,  258,  259,  259,  259,  259,    0,  249,
      250,  250,  250,  250,    0,    0,  250,    0,  250,  250,
      250,  250,  250,  250,  251,  251,  251,  251,    0,    0,
      251,    0,  251,  251,  251,  251,  251,  251,  255,  255,
      255,  255,    0,    0,  255,  260,  260,  260,  260,    0,
        0,  261,  261,  261,  261,  255,  262,  262,  262,  262,
      269,  269,  269,  269,    0,    0,  269,  272,  272,  272,
      272,  261,    0,  255,  257,  257,  257,  257,  960,  960,
      257,    0,    0,  960,  257,  257,  257,  257,  261,  263,
      263,  263,  263,  961,  961,  263,    0,  263,  961,  263,

      263,  263,  263,  264,  264,  264,  264,  964,  964,  264,
        0,  264,  964,  264,  264,  264,  264,  271,  271,  271,
      271,  271,  273,  273,  273,  273,    0,    0,  273,    0,
        0,  273,  273,  273,  273,  273,    0,    0,    0,  273,
      278,  278,  278,  278,  280,  280,  280,  280,  282,  282,
      282,  282,  283,  283,  283,  283,    0,  273,  274,  274,
      274,  274,    0,    0,  274,    0,  274,  274,  274,  274,
      274,  274,  275,  275,  275,  275,    0,    0,  275,    0,
      275,  275,  275,  275,  275,  275,  279,  279,  279,  279,
        0,    0,  279,  284,  284,  284,  284,  284,  285,  285,

      285,  285,    0,  279,  286,  286,  286,  286,  286,    0,
        0,    0,  286,  291,  291,  291,  291,  293,  293,  293,
      293,  279,  281,  281,  281,  281,    0,    0,  281,    0,
      286,    0,  281,  281,  281,  281,  287,  287,  287,  287,
        0,    0,  287,    0,  287,  287,  287,  287,  287,  287,
      288,  288,  288,  288,    0,    0,  288,    0,  288,  288,
      288,  288,  288,  288,  294,  294,  294,  294,    0,    0,
      294,    0,    0,    0,  294,  294,  294,  294,  295,  295,
      295,  295,  295,  296,  296,  296,  296,  297,  297,  297,
      297,    0,    0,  297,    0,    0,  297,  297,  297,  297,

      297,    0,    0,    0,  297,  302,  302,  302,  302,  304,
      304,  304,  304,  306,  306,  306,  306,  306,  307,  307,
      307,  307,  297,  298,  298,  298,  298,    0,    0,  298,
        0,  298,  298,  298,  298,  298,  298,  299,  299,  299,
      299,    0,    0,  299,    0,  299,  299,  299,  299,  299,
      299,  303,  303,  303,  303,    0,    0,  303,  313,  313,
      313,  313,  315,  315,  315,  315,    0,    0,  303,  317,
      317,  317,  317,    0,  314,  314,  314,  314,    0,    0,
      314,  318,  318,  318,  318,    0,  303,  305,  305,  305,
      305,  314,    0,  305,    0,    0,    0,  305,  305,  305,

      305,  308,  308,  308,  308,    0,    0,  308,    0,  314,
      308,  308,  308,  308,  308,    0,    0,    0,  308,  320,
      320,  320,  320,  320,  321,  321,  321,  321,  327,  327,
      327,  327,  329,  329,  329,  329,  308,  309,  309,  309,
      309,    0,    0,  309,    0,  309,  309,  309,  309,  309,
      309,  310,  310,  310,  310,    0,    0,  310,    0,  310,
      310,  310,  310,  310,  310,  316,  316,  316,  316,    0,
        0,  316,    0,    0,    0,  316,  316,  316,  316,  322,
      322,  322,  322,    0,    0,  322,    0,    0,  322,  322,
      322,  322,  322,    0,    0,    0,  322,  331,  331,  331,

      331,  331,  332,  332,  332,  332,  338,  338,  338,  338,
      340,  340,  340,  340,  322,  323,  323,  323,  323,    0,
        0,  323,    0,  323,  323,  323,  323,  323,  323,  324,
      324,  324,  324,    0,    0,  324,    0,  324,  324,  324,
      324,  324,  324,  328,  328,  328,  328,  922,  922,  328,
      333,  333,  333,  333,  333,    0,    0,  922,  333,    0,
      328,  342,  342,  342,  342,  342,  343,  343,  343,  343,
      349,  349,  349,  349,    0,  922,  333,    0,  328,  330,
      330,  330,  330,    0,    0,  330,    0,  930,  930,  330,
      330,  330,  330,  334,  334,  334,  334,  930,    0,  334,

        0,  334,  334,  334,  334,  334,  334,  341,  341,  341,
      341,    0,    0,  341,    0,  930,    0,  341,  341,  341,
      341,  344,  344,  344,  344,    0,    0,  344,    0,    0,
      344,  344,  344,  344,  344,    0,    0,    0,  344,  351,
      351,  351,  351,    0,  350,  350,  350,  350,    0,    0,
      350,  364,  364,  364,  364,  364,  344,  345,  345,  345,
      345,  350,    0,  345,    0,  345,  345,  345,  345,  345,
      345,  367,  367,    0,  367,  367,  367,  367,    0,  350,
      352,  352,  352,  352,    0,    0,  352,    0,    0,    0,
      352,  352,  352,  352,  365,  365,  365,  365,    0,    0,

      365,    0,  365,  365,  365,  365,  365,  365,  366,  366,
      366,  366,    0,    0,  366,    0,  366,  366,  366,  366,
      366,  366,  368,  368,  368,  368,    0,    0,  368,    0,
        0,    0,  368,  368,  368,  368,    0,    0,    0,  368,
      375,  375,  375,  375,  375,  378,  378,    0,  378,  378,
      378,  378,  437,  437,  437,  437,  437,  368,  369,  369,
      369,  369,  369,  369,    0,    0,    0,  369,  384,  384,
      384,  384,    0,  385,  385,  384,  385,  385,  385,  385,
      438,  438,  438,  438,    0,  369,  370,  370,  370,  370,
        0,    0,  370,  384,  370,  370,  370,  370,  370,  370,

      371,  371,  371,  371,    0,    0,  371,    0,  371,  371,
      371,  371,  371,  371,  372,  372,  372,  372,    0,    0,
      372,  372,  372,    0,  372,  372,  372,  372,    0,  391,
      391,  372,  391,  391,  391,  391,  400,  400,    0,  400,
      400,  400,  400,  444,  444,  444,  444,    0,    0,  372,
      374,  374,  374,  374,    0,    0,  374,    0,  374,    0,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  409,
      409,    0,  409,  409,  409,  409,  416,  416,    0,  416,
      416,  416,  416,    0,  374,  374,  374,  376,  376,  376,
      376,    0,    0,  376,    0,  376,  376,  376,  376,  376,

      376,  377,  377,  377,  377,    0,    0,  377,    0,  377,
      377,  377,  377,  377,  377,  379,  379,  379,  379,    0,
        0,  379,    0,  379,  379,  379,  379,  379,  379,    0,
        0,    0,  379,  415,  415,  415,  415,    0,  422,  422,
      415,  422,  422,  422,  422,  446,  446,  446,  446,    0,
      379,  380,  380,  380,  380,    0,    0,  380,  415,  380,
      380,  380,  380,  380,  380,  381,  381,  381,  381,    0,
        0,  381,    0,  381,  381,  381,  381,  381,  381,  382,
      382,  382,  382,    0,    0,  382,    0,  382,  382,  382,
      382,  382,  382,  383,  383,  383,  383,    0,    0,  383,

      383,  383,  383,  383,  383,  383,  383,  386,  386,  386,
      386,    0,    0,  386,    0,  386,  386,  386,  386,  386,
      386,    0,    0,    0,  386,  452,  452,  452,  452,  452,
      453,  453,  453,  453,  459,  459,  459,  459,  461,  461,
      461,  461,  386,  387,  387,  387,  387,    0,    0,  387,
      387,  387,  387,  387,  387,  387,  387,  388,  388,  388,
      388,    0,    0,  388,    0,    0,    0,  388,  388,  388,
      388,    0,    0,    0,  388,  462,  462,  462,  462,  468,
      468,  468,  468,  468,  469,  469,  469,  469,  475,  475,
      475,  475,  388,  389,  389,  389,  389,    0,    0,  389,

        0,  389,  389,  389,  389,  389,  389,  390,  390,  390,
      390,    0,    0,  390,    0,  390,  390,  390,  390,  390,
      390,  392,  392,  392,  392,    0,    0,  392,    0,  392,
      392,  392,  392,  392,  392,    0,    0,    0,  392,  477,
      477,  477,  477,  483,  483,  483,  483,  483,  484,  484,
      484,  484,  490,  490,  490,  490,  392,  393,  393,  393,
      393,    0,    0,  393,    0,  393,  393,  393,  393,  393,
      393,  394,  394,  394,  394,    0,    0,  394,    0,  394,
      394,  394,  394,  394,  394,  395,  395,  395,  395,    0,
        0,  395,    0,  395,  395,  395,  395,  395,  395,  396,

      396,  396,  396,    0,    0,  396,  396,  396,  396,  396,
      396,  396,  396,  397,  397,  397,  397,    0,    0,  397,
        0,    0,    0,  397,  397,  397,  397,    0,    0,    0,
      397,  492,  492,  492,  492,  493,  493,  493,  493,  495,
      495,  495,  495,  496,  496,  496,  496,    0,  397,  398,
      398,  398,  398,    0,    0,  398,    0,  398,  398,  398,
      398,  398,  398,  399,  399,  399,  399,    0,    0,  399,
        0,  399,  399,  399,  399,  399,  399,  401,  401,  401,
      401,    0,    0,  401,    0,  401,  401,  401,  401,  401,
      401,    0,    0,    0,  401,  500,  500,  500,  500,  500,

      501,  501,  501,  501,  507,  507,  507,  507,  509,  509,
      509,  509,  401,  402,  402,  402,  402,    0,    0,  402,
        0,  402,  402,  402,  402,  402,  402,  403,  403,  403,
      403,    0,    0,  403,    0,  403,  403,  403,  403,  403,
      403,  404,  404,  404,  404,    0,    0,  404,    0,  404,
      404,  404,  404,  404,  404,  405,  405,  405,  405,    0,
        0,  405,  405,  405,  405,  405,  405,  405,  405,  406,
      406,  406,  406,    0,    0,  406,    0,    0,    0,  406,
      406,  406,  406,    0,    0,    0,  406,  515,  515,  515,
      515,  515,  516,  516,  516,  516,  522,  522,  522,  522,

      524,  524,  524,  524,  406,  407,  407,  407,  407,    0,
        0,  407,    0,  407,  407,  407,  407,  407,  407,  408,
      408,  408,  408,    0,    0,  408,    0,  408,  408,  408,
      408,  408,  408,  410,  410,  410,  410,    0,    0,  410,
        0,  410,  410,  410,  410,  410,  410,    0,    0,    0,
      410,  525,  525,  525,  525,  527,  527,  527,  527,  527,
      528,  528,  528,  528,  534,  534,  534,  534,  410,  411,
      411,  411,  411,    0,    0,  411,    0,  411,  411,  411,
      411,  411,  411,  412,  412,  412,  412,    0,    0,  412,
        0,  412,  412,  412,  412,  412,  412,  413,  413,  413,

      413,    0,    0,  413,    0,  413,  413,  413,  413,  413,
      413,  414,  414,  414,  414,    0,    0,  414,  414,  414,
      414,  414,  414,  414,  414,  417,  417,  417,  417,    0,
        0,  417,    0,  417,  417,  417,  417,  417,  417,    0,
        0,    0,  417,  536,  536,  536,  536,    0,  476,  476,
      476,  476,    0,    0,  476,  542,  542,  542,  542,  542,
      417,  418,  418,  418,  418,  476,    0,  418,  418,  418,
      418,  418,  418,  418,  418,  419,  419,  419,  419,    0,
        0,  419,    0,  476,    0,  419,  419,  419,  419,    0,
        0,    0,  419,  543,  543,  543,  543,  549,  549,  549,

      549,  551,  551,  551,  551,  552,  552,  552,  552,    0,
      419,  420,  420,  420,  420,    0,    0,  420,    0,  420,
      420,  420,  420,  420,  420,  421,  421,  421,  421,    0,
        0,  421,    0,  421,  421,  421,  421,  421,  421,  423,
      423,  423,  423,    0,    0,  423,    0,  423,  423,  423,
      423,  423,  423,    0,    0,    0,  423,  554,  554,  554,
      554,  554,  555,  555,  555,  555,  561,  561,  561,  561,
      563,  563,  563,  563,  423,  424,  424,  424,  424,    0,
        0,  424,    0,  424,  424,  424,  424,  424,  424,  425,
      425,  425,  425,    0,    0,  425,    0,  425,  425,  425,

      425,  425,  425,  426,  426,  426,  426,    0,    0,  426,
        0,  426,  426,  426,  426,  426,  426,  427,  427,  427,
      427,    0,    0,  427,  427,  427,  427,  427,  427,  427,
      427,  439,  439,  439,  439,  439,    0,    0,    0,  439,
      569,  569,  569,  569,  569,  570,  570,  570,  570,  576,
      576,  576,  576,  578,  578,  578,  578,  439,  440,  440,
      440,  440,    0,    0,  440,    0,  440,  440,  440,  440,
      440,  440,  441,  441,  441,  441,    0,    0,  441,    0,
      441,  441,  441,  441,  441,  441,  447,  447,  447,  447,
        0,    0,  447,    0,    0,    0,  447,  447,  447,  447,

      448,  448,  448,  448,    0,    0,  448,    0,  448,  448,
      448,  448,  448,  448,  449,  449,  449,  449,    0,    0,
      449,    0,  449,  449,  449,  449,  449,  449,  450,  450,
      450,  450,    0,    0,  450,    0,    0,  450,  450,  450,
      450,  450,    0,    0,    0,  450,  579,  579,  579,  579,
        0,  491,  491,  491,  491,    0,    0,  491,  581,  581,
      581,  581,    0,  450,  451,  451,  451,  451,  491,    0,
      451,    0,  451,  451,  451,  451,  451,  451,  454,  454,
      454,  454,    0,    0,  454,    0,  491,  454,  454,  454,
      454,  454,    0,    0,    0,  454,  582,  582,  582,  582,

        0,    0,  463,  463,  463,  463,  463,    0,    0,    0,
      463,    0,    0,  454,  455,  455,  455,  455,    0,    0,
      455,    0,  455,  455,  455,  455,  455,  455,  463,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  470,  470,
      470,  470,    0,    0,  470,    0,    0,  470,  470,  470,
      470,  470,    0,    0,    0,  470,  586,  586,  586,  586,

      586,  587,  587,  587,  587,  593,  593,  593,  593,  595,
      595,  595,  595,  470,  471,  471,  471,  471,    0,    0,
      471,    0,  471,  471,  471,  471,  471,  471,  472,  472,
      472,  472,    0,    0,  472,    0,  472,  472,  472,  472,
      472,  472,  478,  478,  478,  478,    0,    0,  478,    0,
        0,    0,  478,  478,  478,  478,  479,  479,  479,  479,
        0,    0,  479,    0,  479,  479,  479,  479,  479,  479,
      480,  480,  480,  480,    0,    0,  480,    0,  480,  480,
      480,  480,  480,  480,  481,  481,  481,  481,    0,    0,
      481,    0,    0,  481,  481,  481,  481,  481,    0,    0,

        0,  481,  601,  601,  601,  601,  601,  562,  562,  562,
      562,    0,    0,  562,  602,  602,  602,  602,    0,  481,
      482,  482,  482,  482,  562,    0,  482,    0,  482,  482,
      482,  482,  482,  482,  485,  485,  485,  485,    0,    0,
      485,    0,  562,  485,  485,  485,  485,  485,    0,    0,
        0,  485,  608,  608,  608,  608,    0,  577,  577,  577,
      577,    0,    0,  577,  610,  610,  610,  610,    0,  485,
      486,  486,  486,  486,  577,    0,  486,    0,  486,  486,
      486,  486,  486,  486,  494,  494,  494,  494,    0,    0,
      494,    0,  577,    0,  494,  494,  494,  494,    0,    0,

        0,  494,  611,  611,  611,  611,  620,  620,    0,  620,
      620,  620,  620,  707,  707,  707,  707,    0,    0,  494,
      497,  497,  497,  497,    0,    0,  497,    0,  497,  497,
      497,  497,  497,  497,  498,  498,  498,  498,    0,    0,
      498,    0,  498,  498,  498,  498,  498,  498,  502,  502,
      502,  502,  502,    0,    0,    0,  502,  619,  619,  619,
      619,    0,  626,  626,  619,  626,  626,  626,  626,  708,
      708,  708,  708,    0,  502,  503,  503,  503,  503,    0,
        0,  503,  619,  503,  503,  503,  503,  503,  503,  504,
      504,  504,  504,    0,    0,  504,    0,  504,  504,  504,

      504,  504,  504,  510,  510,  510,  510,    0,    0,  510,
        0,    0,    0,  510,  510,  510,  510,  511,  511,  511,
      511,    0,    0,  511,    0,  511,  511,  511,  511,  511,
      511,  512,  512,  512,  512,    0,    0,  512,    0,  512,
      512,  512,  512,  512,  512,  513,  513,  513,  513,    0,
        0,  513,    0,    0,  513,  513,  513,  513,  513,    0,
      632,  632,  513,  632,  632,  632,  632,  645,  645,    0,
      645,  645,  645,  645,  715,  715,  715,  715,    0,    0,
      513,  514,  514,  514,  514,    0,    0,  514,    0,  514,
      514,  514,  514,  514,  514,  517,  517,  517,  517,    0,

        0,  517,    0,    0,  517,  517,  517,  517,  517,    0,
      651,  651,  517,  651,  651,  651,  651,    0,    0,  526,
      526,  526,  526,  526,    0,    0,    0,  526,    0,    0,
      517,  518,  518,  518,  518,    0,    0,  518,    0,  518,
      518,  518,  518,  518,  518,  526,  529,  529,  529,  529,
      529,    0,    0,    0,  529,  650,  650,  650,  650,    0,
      657,  657,  650,  657,  657,  657,  657,  720,  720,  720,
      720,  720,  529,  530,  530,  530,  530,    0,    0,  530,
      650,  530,  530,  530,  530,  530,  530,  531,  531,  531,
      531,    0,    0,  531,    0,  531,  531,  531,  531,  531,

      531,  537,  537,  537,  537,    0,    0,  537,    0,    0,
        0,  537,  537,  537,  537,  538,  538,  538,  538,    0,
        0,  538,    0,  538,  538,  538,  538,  538,  538,  539,
      539,  539,  539,    0,    0,  539,    0,  539,  539,  539,
      539,  539,  539,  540,  540,  540,  540,    0,    0,  540,
        0,    0,  540,  540,  540,  540,  540,    0,    0,    0,
      540,  660,  660,  660,  660,    0,  661,  661,  660,  661,
      661,  661,  661,  721,  721,  721,  721,    0,  540,  541,
      541,  541,  541,    0,    0,  541,  660,  541,  541,  541,
      541,  541,  541,  544,  544,  544,  544,    0,    0,  544,

        0,    0,  544,  544,  544,  544,  544,    0,  667,  667,
      544,  667,  667,  667,  667,    0,    0,  553,  553,  553,
      553,  553,    0,    0,    0,  553,    0,    0,  544,  545,
      545,  545,  545,    0,    0,  545,    0,  545,  545,  545,
      545,  545,  545,  553,  556,  556,  556,  556,    0,    0,
      556,    0,    0,  556,  556,  556,  556,  556,    0,  673,
      673,  556,  673,  673,  673,  673,  686,  686,    0,  686,
      686,  686,  686,  727,  727,  727,  727,    0,    0,  556,
      557,  557,  557,  557,    0,    0,  557,    0,  557,  557,
      557,  557,  557,  557,  558,  558,  558,  558,    0,    0,

      558,    0,  558,  558,  558,  558,  558,  558,  564,  564,
      564,  564,    0,    0,  564,    0,    0,    0,  564,  564,
      564,  564,  565,  565,  565,  565,    0,    0,  565,    0,
      565,  565,  565,  565,  565,  565,  566,  566,  566,  566,
        0,    0,  566,    0,  566,  566,  566,  566,  566,  566,
      567,  567,  567,  567,    0,    0,  567,    0,    0,  567,
      567,  567,  567,  567,    0,    0,    0,  567,  691,  691,
      691,  691,    0,  692,  692,  691,  692,  692,  692,  692,
      729,  729,  729,  729,    0,  567,  568,  568,  568,  568,
        0,    0,  568,  691,  568,  568,  568,  568,  568,  568,

      571,  571,  571,  571,    0,    0,  571,    0,    0,  571,
      571,  571,  571,  571,    0,  698,  698,  571,  698,  698,
      698,  698,    0,  714,  714,  714,  714,    0,    0,  714,
      734,  734,  734,  734,  734,  571,  572,  572,  572,  572,
      714,    0,  572,    0,  572,  572,  572,  572,  572,  572,
      580,  580,  580,  580,    0,    0,  580,    0,  714,    0,
      580,  580,  580,  580,    0,    0,    0,  580,  735,  735,
      735,  735,  741,  741,  741,  741,  743,  743,  743,  743,
      744,  744,  744,  744,    0,  580,  583,  583,  583,  583,
        0,    0,  583,    0,  583,  583,  583,  583,  583,  583,

      584,  584,  584,  584,    0,    0,  584,    0,  584,  584,
      584,  584,  584,  584,  588,  588,  588,  588,  588,    0,
        0,    0,  588,  750,  750,  750,  750,  750,  751,  751,
      751,  751,  757,  757,  757,  757,  759,  759,  759,  759,
      588,  589,  589,  589,  589,    0,    0,  589,    0,  589,
      589,  589,  589,  589,  589,  590,  590,  590,  590,    0,
        0,  590,    0,  590,  590,  590,  590,  590,  590,  596,
      596,  596,  596,    0,    0,  596,    0,    0,    0,  596,
      596,  596,  596,  597,  597,  597,  597,    0,    0,  597,
        0,  597,  597,  597,  597,  597,  597,  598,  598,  598,

      598,    0,    0,  598,    0,  598,  598,  598,  598,  598,
      598,  599,  599,  599,  599,    0,    0,  599,    0,    0,
      599,  599,  599,  599,  599,    0,    0,    0,  599,  760,
      760,  760,  760,  762,  762,  762,  762,  767,  767,  767,
      767,  768,  768,  768,  768,    0,  599,  600,  600,  600,
      600,    0,    0,  600,    0,  600,  600,  600,  600,  600,
      600,  603,  603,  603,  603,    0,    0,  603,    0,    0,
      603,  603,  603,  603,  603,    0,    0,    0,  603,  770,
      770,  770,  770,    0,    0,  612,  612,  612,  612,  612,
        0,    0,    0,  612,    0,    0,  603,  604,  604,  604,

      604,    0,    0,  604,    0,  604,  604,  604,  604,  604,
      604,  612,  621,  621,  621,  621,    0,    0,  621,    0,
      621,  621,  621,  621,  621,  621,    0,    0,    0,  621,
      771,  771,  771,  771,  778,  778,  778,  778,  783,  783,
      783,  783,  784,  784,  784,  784,    0,  621,  622,  622,
      622,  622,    0,    0,  622,  622,  622,  622,  622,  622,
      622,  622,  623,  623,  623,  623,    0,    0,  623,    0,
      623,  623,  623,  623,  623,  623,    0,    0,    0,  623,
      791,  791,  791,  791,    0,  777,  777,  777,  777,    0,
        0,  777,  796,  796,  796,  796,  796,  623,  624,  624,

      624,  624,  777,    0,  624,  624,  624,  624,  624,  624,
      624,  624,  625,  625,  625,  625,    0,    0,  625,    0,
      777,    0,  625,  625,  625,  625,    0,    0,    0,  625,
      797,  797,  797,  797,    0,    0,  722,  722,  722,  722,
      722,    0,    0,    0,  722,    0,    0,  625,  627,  627,
      627,  627,    0,    0,  627,    0,  627,  627,  627,  627,
      627,  627,  722,    0,    0,  627,  803,  803,  803,  803,
        0,  790,  790,  790,  790,    0,    0,  790,  805,  805,
      805,  805,    0,  627,  628,  628,  628,  628,  790,    0,
      628,  628,  628,  628,  628,  628,  628,  628,  629,  629,

      629,  629,    0,    0,  629,    0,  790,    0,  629,  629,
      629,  629,    0,    0,    0,  629,  810,  810,  810,  810,
      810,  811,  811,  811,  811,  817,  817,  817,  817,  819,
      819,  819,  819,  629,  630,  630,  630,  630,    0,    0,
      630,    0,  630,  630,  630,  630,  630,  630,  631,  631,
      631,  631,    0,    0,  631,    0,  631,  631,  631,  631,
      631,  631,  633,  633,  633,  633,    0,    0,  633,    0,
      633,  633,  633,  633,  633,  633,    0,    0,    0,  633,
      820,  820,  820,  820,  826,  826,  826,  826,  826,  827,
      827,  827,  827,  833,  833,  833,  833,  633,  634,  634,

      634,  634,    0,    0,  634,    0,  634,  634,  634,  634,
      634,  634,  635,  635,  635,  635,    0,    0,  635,    0,
      635,  635,  635,  635,  635,  635,  636,  636,  636,  636,
        0,    0,  636,    0,  636,  636,  636,  636,  636,  636,
      637,  637,  637,  637,    0,    0,  637,  637,  637,  637,
      637,  637,  637,  637,  638,  638,  638,  638,    0,    0,
      638,    0,  638,  638,  638,  638,  638,  638,    0,    0,
        0,  638,  835,  835,  835,  835,  836,  836,  836,  836,
      838,  838,  838,  838,  843,  843,  843,  843,    0,  638,
      639,  639,  639,  639,    0,    0,  639,    0,  639,  639,

      639,  639,  639,  639,  640,  640,  640,  640,    0,    0,
      640,    0,  640,  640,  640,  640,  640,  640,  641,  641,
      641,  641,    0,    0,  641,    0,  641,  641,  641,  641,
      641,  641,  642,  642,  642,  642,    0,    0,  642,  642,
      642,  642,  642,  642,  642,  642,  643,  643,  643,  643,
        0,    0,  643,    0,    0,    0,  643,  643,  643,  643,
        0,    0,    0,  643,  844,  844,  844,  844,  846,  846,
      846,  846,  847,  847,  847,  847,  854,  854,  854,  854,
        0,  643,  644,  644,  644,  644,    0,    0,  644,    0,
      644,  644,  644,  644,  644,  644,  646,  646,  646,  646,

        0,    0,  646,    0,  646,  646,  646,  646,  646,  646,
        0,    0,    0,  646,  863,  863,  863,  863,    0,  864,
      864,  863,  864,  864,  864,  864,  885,  885,  885,  885,
      885,  646,  647,  647,  647,  647,    0,    0,  647,  863,
      647,  647,  647,  647,  647,  647,  648,  648,  648,  648,
        0,    0,  648,    0,  648,  648,  648,  648,  648,  648,
      649,  649,  649,  649,    0,    0,  649,  649,  649,  649,
      649,  649,  649,  649,  652,  652,  652,  652,    0,    0,
      652,    0,  652,  652,  652,  652,  652,  652,    0,  870,
      870,  652,  870,  870,  870,  870,  876,  876,    0,  876,

      876,  876,  876,  887,  887,  887,  887,  887,    0,  652,
      653,  653,  653,  653,    0,    0,  653,  653,  653,  653,
      653,  653,  653,  653,  654,  654,  654,  654,    0,    0,
      654,    0,  654,  654,  654,  654,  654,  654,    0,  882,
      882,  654,  882,  882,  882,  882,    0,  853,  853,  853,
      853,  886,  886,  853,  886,  886,  886,  886,    0,  654,
      655,  655,  655,  655,  853,    0,  655,  655,  655,  655,
      655,  655,  655,  655,  656,  656,  656,  656,    0,    0,
      656,    0,  853,    0,  656,  656,  656,  656,    0,  888,
      888,  656,  888,  888,  888,  888,    0,    0,  745,  745,

      745,  745,  745,    0,    0,    0,  745,    0,    0,  656,
      658,  658,  658,  658,    0,    0,  658,    0,  658,  658,
      658,  658,  658,  658,  745,  890,  890,  658,  890,  890,
      890,  890,  891,  891,  891,  891,  891,  892,  892,    0,
      892,  892,  892,  892,    0,  658,  659,  659,  659,  659,
        0,    0,  659,  659,  659,  659,  659,  659,  659,  659,
      662,  662,  662,  662,    0,    0,  662,    0,  662,  662,
      662,  662,  662,  662,    0,    0,    0,  662,  893,  893,
      893,  893,  893,  894,  894,    0,  894,  894,  894,  894,
      897,  897,  897,  897,  897,  662,  663,  663,  663,  663,

        0,    0,  663,  663,  663,  663,  663,  663,  663,  663,
      664,  664,  664,  664,    0,    0,  664,    0,  664,  664,
      664,  664,  664,  664,    0,  896,  896,  664,  896,  896,
      896,  896,  898,  898,    0,  898,  898,  898,  898,  902,
      902,  902,  902,    0,    0,  664,  665,  665,  665,  665,
        0,    0,  665,  665,  665,  665,  665,  665,  665,  665,
      666,  666,  666,  666,    0,    0,  666,    0,    0,    0,
      666,  666,  666,  666,    0,    0,    0,  666,  903,  903,
      903,  903,    0,    0,  761,  761,  761,  761,  761,    0,
        0,    0,  761,    0,    0,  666,  668,  668,  668,  668,

        0,    0,  668,    0,  668,  668,  668,  668,  668,  668,
      761,    0,    0,  668,  910,  910,  910,  910,  918,  918,
      918,  918,  926,  926,  926,  926,  927,  927,  927,  927,
        0,  668,  669,  669,  669,  669,    0,    0,  669,  669,
      669,  669,  669,  669,  669,  669,  670,  670,  670,  670,
        0,    0,  670,    0,    0,    0,  670,  670,  670,  670,
        0,    0,    0,  670,  881,  881,  881,  881,    0,    0,
        0,  881,  931,  931,  931,  931,  932,  932,  932,  932,
        0,  670,  671,  671,  671,  671,    0,    0,  671,  881,
      671,  671,  671,  671,  671,  671,  672,  672,  672,  672,

        0,    0,  672,    0,  672,  672,  672,  672,  672,  672,
      674,  674,  674,  674,    0,    0,  674,    0,  674,  674,
      674,  674,  674,  674,    0,    0,    0,  674,  889,  889,
      889,  889,    0,    0,    0,  889,  934,  934,  934,  934,
      936,  936,  936,  936,    0,  674,  675,  675,  675,  675,
        0,    0,  675,  889,  675,  675,  675,  675,  675,  675,
      676,  676,  676,  676,    0,    0,  676,    0,  676,  676,
      676,  676,  676,  676,  677,  677,  677,  677,    0,    0,
      677,    0,  677,  677,  677,  677,  677,  677,  678,  678,
      678,  678,    0,    0,  678,  678,  678,  678,  678,  678,

      678,  678,  679,  679,  679,  679,    0,    0,  679,    0,
      679,  679,  679,  679,  679,  679,    0,    0,    0,  679,
      895,  895,  895,  895,    0,    0,    0,  895,  937,  937,
      937,  937,  939,  939,  939,  939,    0,  679,  680,  680,
      680,  680,    0,    0,  680,  895,  680,  680,  680,  680,
      680,  680,  681,  681,  681,  681,    0,    0,  681,    0,
      681,  681,  681,  681,  681,  681,  682,  682,  682,  682,
        0,    0,  682,    0,  682,  682,  682,  682,  682,  682,
      683,  683,  683,  683,    0,    0,  683,  683,  683,  683,
      683,  683,  683,  683,  684,  684,  684,  684,    0,    0,

      684,    0,    0,    0,  684,  684,  684,  684,    0,    0,
        0,  684,  938,  938,  938,  938,    0,    0,    0,  938,
      940,  940,  940,  940,  942,  942,  942,  942,    0,  684,
      685,  685,  685,  685,    0,    0,  685,  938,  685,  685,
      685,  685,  685,  685,  687,  687,  687,  687,    0,    0,
      687,    0,  687,  687,  687,  687,  687,  687,    0,    0,
        0,  687,  944,  944,  944,  944,  945,  945,  945,  945,
      947,  947,  947,  947,  948,  948,  948,  948,    0,  687,
      688,  688,  688,  688,    0,    0,  688,    0,  688,  688,
      688,  688,  688,  688,  689,  689,  689,  689,    0,    0,

      689,    0,  689,  689,  689,  689,  689,  689,  690,  690,
      690,  690,    0,    0,  690,  690,  690,  690,  690,  690,
      690,  690,  693,  693,  693,  693,    0,    0,  693,    0,
      693,  693,  693,  693,  693,  693,    0,    0,  962,  693,
      962,  962,    0,    0,  962,  963,  963,  963,  963,    0,
      965,  963,  965,  965,    0,    0,  965,  693,  694,  694,
      694,  694,    0,    0,  694,  694,  694,  694,  694,  694,
      694,  694,  695,  695,  695,  695,    0,    0,  695,    0,
      695,  695,  695,  695,  695,  695,    0,    0,  966,  695,
      966,  966,    0,  967,  966,  967,  967,    0,    0,  967,

      968,  968,  968,  968,    0,    0,  968,  695,  696,  696,
      696,  696,    0,    0,  696,  696,  696,  696,  696,  696,
      696,  696,  697,  697,  697,  697,    0,    0,  697,    0,
        0,    0,  697,  697,  697,  697,    0,    0,  969,  697,
      969,  969,    0,    0,  969,    0,  769,  769,  769,  769,
      769,    0,    0,    0,  769,    0,    0,  697,  699,  699,
      699,  699,    0,    0,  699,    0,  699,  699,  699,  699,
      699,  699,  769,    0,    0,  699,  970,  970,  970,  970,
        0,    0,  970,  971,  971,  971,  971,    0,    0,  971,
        0,    0,    0,  699,  700,  700,  700,  700,    0,    0,

      700,  700,  700,  700,  700,  700,  700,  700,  709,  709,
      709,  709,    0,    0,  709,    0,  709,  709,  709,  709,
      709,  709,  710,  710,  710,  710,    0,    0,  710,    0,
      710,  710,  710,  710,  710,  710,  712,  712,  712,  712,
        0,    0,  712,    0,  712,  712,  712,  712,  712,  712,
      713,  713,  713,  713,    0,    0,  713,    0,  713,  713,
      713,  713,  713,  713,  716,  716,  716,  716,    0,    0,
      716,    0,    0,    0,  716,  716,  716,  716,  717,  717,
      717,  717,    0,    0,  717,    0,  717,  717,  717,  717,
      717,  717,  718,  718,  718,  718,    0,    0,  718,    0,

      718,  718,  718,  718,  718,  718,  723,  723,  723,  723,
        0,    0,  723,    0,  723,  723,  723,  723,  723,  723,
      724,  724,  724,  724,    0,    0,  724,    0,  724,  724,
      724,  724,  724,  724,  730,  730,  730,  730,    0,    0,
      730,    0,    0,    0,  730,  730,  730,  730,  731,  731,
      731,  731,    0,    0,  731,    0,  731,  731,  731,  731,
      731,  731,  732,  732,  732,  732,    0,    0,  732,    0,
      732,  732,  732,  732,  732,  732,  733,  733,  733,  733,
        0,    0,  733,    0,    0,  733,  733,  733,  733,  733,
        0,    0,    0,  733,  798,  798,  798,  798,  798,    0,

        0,    0,  798,  946,  946,  946,  946,    0,    0,    0,
      946,  733,  736,  736,  736,  736,    0,    0,  736,    0,
      798,  736,  736,  736,  736,  736,    0,    0,  946,  736,
      972,    0,  972,  972,    0,  973,  972,  973,  973,    0,
      974,  973,  974,  974,    0,    0,  974,  736,  737,  737,
      737,  737,    0,    0,  737,    0,  737,  737,  737,  737,
      737,  737,  738,  738,  738,  738,    0,    0,  738,    0,
      738,  738,  738,  738,  738,  738,  746,  746,  746,  746,
        0,    0,  746,    0,  746,  746,  746,  746,  746,  746,
      747,  747,  747,  747,    0,    0,  747,    0,  747,  747,

      747,  747,  747,  747,  748,  748,  748,  748,    0,    0,
      748,    0,    0,  748,  748,  748,  748,  748,    0,    0,
        0,  748,  975,  975,  975,  975,    0,    0,  975,  976,
      976,  976,  976,    0,    0,  976,    0,    0,    0,  748,
      749,  749,  749,  749,    0,    0,  749,    0,  749,  749,
      749,  749,  749,  749,  752,  752,  752,  752,    0,    0,
      752,    0,    0,  752,  752,  752,  752,  752,    0,    0,
        0,  752,  977,  977,  977,  977,    0,    0,  977,  978,
      978,  978,  978,    0,    0,  978,    0,    0,    0,  752,
      753,  753,  753,  753,    0,    0,  753,    0,  753,  753,

      753,  753,  753,  753,  763,  763,  763,  763,    0,    0,
      763,    0,    0,    0,  763,  763,  763,  763,  764,  764,
      764,  764,    0,    0,  764,    0,  764,  764,  764,  764,
      764,  764,  765,  765,  765,  765,    0,    0,  765,    0,
      765,  765,  765,  765,  765,  765,  766,  766,  766,  766,
        0,    0,  766,    0,    0,  766,  766,  766,  766,  766,
        0,    0,    0,  766,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  766,  772,  772,  772,  772,    0,    0,  772,    0,
      772,  772,  772,  772,  772,  772,  773,  773,  773,  773,

        0,    0,  773,    0,  773,  773,  773,  773,  773,  773,
      775,  775,  775,  775,    0,    0,  775,    0,  775,  775,
      775,  775,  775,  775,  776,  776,  776,  776,    0,    0,
      776,    0,  776,  776,  776,  776,  776,  776,  779,  779,
      779,  779,    0,    0,  779,    0,    0,    0,  779,  779,
      779,  779,  780,  780,  780,  780,    0,    0,  780,    0,
      780,  780,  780,  780,  780,  780,  781,  781,  781,  781,
        0,    0,  781,    0,  781,  781,  781,  781,  781,  781,
      785,  785,  785,  785,    0,    0,  785,    0,  785,  785,
      785,  785,  785,  785,  786,  786,  786,  786,    0,    0,

      786,    0,  786,  786,  786,  786,  786,  786,  788,  788,
      788,  788,    0,    0,  788,    0,  788,  788,  788,  788,
      788,  788,  789,  789,  789,  789,    0,    0,  789,    0,
      789,  789,  789,  789,  789,  789,  792,  792,  792,  792,
        0,    0,  792,    0,    0,    0,  792,  792,  792,  792,
      793,  793,  793,  793,    0,    0,  793,    0,  793,  793,
      793,  793,  793,  793,  794,  794,  794,  794,    0,    0,
      794,    0,  794,  794,  794,  794,  794,  794,  799,  799,
      799,  799,    0,    0,  799,    0,  799,  799,  799,  799,
      799,  799,  800,  800,  800,  800,    0,    0,  800,    0,

      800,  800,  800,  800,  800,  800,  806,  806,  806,  806,
        0,    0,  806,    0,    0,    0,  806,  806,  806,  806,
      807,  807,  807,  807,    0,    0,  807,    0,  807,  807,
      807,  807,  807,  807,  808,  808,  808,  808,    0,    0,
      808,    0,  808,  808,  808,  808,  808,  808,  809,  809,
      809,  809,    0,    0,  809,    0,    0,  809,  809,  809,
      809,  809,    0,    0,    0,  809,  821,  821,  821,  821,
      821,    0,    0,    0,  821,    0,    0,    0,    0,    0,
        0,    0,    0,  809,  812,  812,  812,  812,    0,    0,
      812,    0,  821,  812,  812,  812,  812,  812,    0,    0,

        0,  812,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  812,
      813,  813,  813,  813,    0,    0,  813,    0,  813,  813,
      813,  813,  813,  813,  814,  814,  814,  814,    0,    0,
      814,    0,  814,  814,  814,  814,  814,  814,  822,  822,
      822,  822,    0,    0,  822,    0,  822,  822,  822,  822,
      822,  822,  823,  823,  823,  823,    0,    0,  823,    0,
      823,  823,  823,  823,  823,  823,  824,  824,  824,  824,
        0,    0,  824,    0,    0,  824,  824,  824,  824,  824,
        0,    0,    0,  824,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  824,  825,  825,  825,  825,    0,    0,  825,    0,
      825,  825,  825,  825,  825,  825,  828,  828,  828,  828,
        0,    0,  828,    0,    0,  828,  828,  828,  828,  828,
        0,    0,    0,  828,    0,    0,    0,    0,    0,    0,
      837,  837,  837,  837,  837,    0,    0,    0,  837,    0,
        0,  828,  829,  829,  829,  829,    0,    0,  829,    0,
      829,  829,  829,  829,  829,  829,  837,  839,  839,  839,
      839,    0,    0,  839,    0,    0,    0,  839,  839,  839,
      839,  840,  840,  840,  840,    0,    0,  840,    0,  840,

      840,  840,  840,  840,  840,  841,  841,  841,  841,    0,
        0,  841,    0,  841,  841,  841,  841,  841,  841,  842,
      842,  842,  842,    0,    0,  842,    0,    0,  842,  842,
      842,  842,  842,    0,    0,    0,  842,  845,  845,  845,
      845,  845,    0,    0,    0,  845,    0,    0,    0,    0,
        0,    0,    0,    0,  842,    0,    0,    0,    0,    0,
        0,    0,    0,  845,  848,  848,  848,  848,    0,    0,
      848,    0,  848,  848,  848,  848,  848,  848,  849,  849,
      849,  849,    0,    0,  849,    0,  849,  849,  849,  849,
      849,  849,  851,  851,  851,  851,    0,    0,  851,    0,

      851,  851,  851,  851,  851,  851,  852,  852,  852,  852,
        0,    0,  852,    0,  852,  852,  852,  852,  852,  852,
      855,  855,  855,  855,    0,    0,  855,    0,    0,    0,
      855,  855,  855,  855,  856,  856,  856,  856,    0,    0,
      856,    0,  856,  856,  856,  856,  856,  856,  857,  857,
      857,  857,    0,    0,  857,    0,  857,  857,  857,  857,
      857,  857,  865,  865,  865,  865,    0,    0,  865,    0,
      865,  865,  865,  865,  865,  865,    0,    0,    0,  865,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  865,  866,  866,

      866,  866,    0,    0,  866,  866,  866,  866,  866,  866,
      866,  866,  867,  867,  867,  867,    0,    0,  867,    0,
      867,  867,  867,  867,  867,  867,    0,    0,    0,  867,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  867,  868,  868,
      868,  868,    0,    0,  868,  868,  868,  868,  868,  868,
      868,  868,  869,  869,  869,  869,    0,    0,  869,    0,
        0,    0,  869,  869,  869,  869,    0,    0,    0,  869,
        0,    0,    0,    0,    0,    0,  933,  933,  933,  933,
      933,    0,    0,    0,  933,    0,    0,  869,  871,  871,

      871,  871,    0,    0,  871,    0,  871,  871,  871,  871,
      871,  871,  933,    0,    0,  871,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  871,  872,  872,  872,  872,    0,    0,
      872,  872,  872,  872,  872,  872,  872,  872,  873,  873,
      873,  873,    0,    0,  873,    0,  873,  873,  873,  873,
      873,  873,    0,    0,    0,  873,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  873,  874,  874,  874,  874,    0,    0,
      874,  874,  874,  874,  874,  874,  874,  874,  875,  875,

      875,  875,    0,    0,  875,    0,    0,    0,  875,  875,
      875,  875,    0,    0,    0,  875,    0,    0,    0,    0,
        0,    0,  941,  941,  941,  941,  941,    0,    0,    0,
      941,    0,    0,  875,  877,  877,  877,  877,    0,    0,
      877,    0,  877,  877,  877,  877,  877,  877,  941,    0,
        0,  877,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  877,
      878,  878,  878,  878,    0,    0,  878,  878,  878,  878,
      878,  878,  878,  878,  879,  879,  879,  879,    0,    0,
      879,    0,  879,  879,  879,  879,  879,  879,    0,    0,

        0,  879,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  879,
      880,  880,  880,  880,    0,    0,  880,  880,  880,  880,
      880,  880,  880,  880,  883,  883,  883,  883,    0,    0,
      883,    0,  883,  883,  883,  883,  883,  883,    0,    0,
        0,  883,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  883,
      884,  884,  884,  884,    0,    0,  884,  884,  884,  884,
      884,  884,  884,  884,  909,  909,  909,  909,    0,    0,
      909,  909,  909,    0,    0,    0,    0,    0,    0,    0,

        0,  909,  949,  949,  949,  949,  949,    0,    0,    0,
      949,    0,    0,    0,    0,    0,    0,    0,    0,  909,
      911,  911,  911,  911,    0,    0,  911,    0,  949,    0,
      911,  911,  911,  911,  917,  917,  917,  917,    0,    0,
      917,  917,  917,    0,    0,    0,    0,    0,    0,    0,
        0,  917,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  917,
      919,  919,  919,  919,    0,    0,  919,    0,    0,    0,
      919,  919,  919,  919,  925,  925,  925,  925,    0,    0,
      925,  925,  925,    0,    0,    0,    0,    0,    0,    0,

        0,  925,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  925,
      935,  935,  935,  935,    0,    0,  935,    0,    0,    0,
      935,  935,  935,  935,  943,  943,  943,  943,    0,    0,
      943,    0,    0,    0,  943,  943,  943,  943,  980,  980,
      980,  980,  980,  980,  980,  980,  981,  981,  981,  981,
      981,  981,  981,  981,  982,  982,  982,  982,  982,  982,
      982,  982,  983,  983,  983,  983,  983,  983,  983,  983,
      984,  984,    0,  984,  984,  984,  984,  984,  985,  985,
        0,  985,  985,  985,  985,  985,  986,    0,    0,  986,

      987,    0,    0,  987,  988,    0,    0,  988,    0,  988,
      988,  988,  989,  989,    0,  989,  989,  989,  989,  989,
      990,    0,    0,  990,    0,  990,  990,  991,  991,    0,
      991,  991,  991,  991,  991,  992,  992,    0,  992,    0,
      992,  992,  992,  993,  993,    0,  993,  993,  993,  993,
      993,  994,  994,  994,  994,  994,  994,  994,  994,  995,
      995,  995,  995,  995,  995,  995,  995,  996,  996,    0,
        0,  996,  996,  998,  998,  998,  998,  998,  998,  998,
      998,  999,  999,  999,  999,  999,  999,  999,  999, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1001, 1001, 1001,

     1001, 1001, 1001, 1001, 1001, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1004,    0,    0, 1004,    0, 1004, 1004,
     1005, 1005,    0, 1005, 1005, 1005, 1005, 1005, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1008, 1008,    0, 1008,    0, 1008,
     1008, 1008, 1009, 1009,    0, 1009, 1009, 1009, 1009, 1009,
     1011, 1011,    0, 1011, 1011, 1011, 1011, 1011, 1012,    0,
        0, 1012, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1015, 1015,
        0,    0, 1015, 1015, 1017, 1017, 1017, 1017, 1017, 1017,

     1017, 1017, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1032, 1032,

     1032, 1032, 1032, 1032, 1032, 1032, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1044, 1044,    0, 1044, 1044, 1044,

     1044, 1044, 1045,    0,    0, 1045, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1058, 1058, 1058, 1058, 1058, 1058,

     1058, 1058, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1066, 1067, 1067,    0, 1067,
     1067, 1067, 1067, 1067, 1068,    0,    0, 1068, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1070, 1070, 1070, 1070,
     1070, 1070, 1070, 1070, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1084, 1084,

     1084, 1084, 1084, 1084, 1084, 1084, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1090, 1090, 1090, 1090,
     1090, 1090, 1090, 1090, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1093, 1093,    0, 1093, 1093, 1093, 1093, 1093, 1094,    0,
        0, 1094, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1097, 1097,

     1097, 1097, 1097, 1097, 1097, 1097, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1103, 1103, 1103, 1103,
     1103, 1103, 1103, 1103, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1109, 1109, 1109, 1109, 1109, 1109,

     1109, 1109, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1117, 1117,
     1117, 1117, 1117, 1117, 1117, 1117, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1119, 1119,    0, 1119, 1119, 1119,
     1119, 1119, 1120,    0,    0, 1120, 1121, 1121, 1121, 1121,
     1121, 1121, 1121, 1121, 1122, 1122, 1122, 1122, 1122, 1122,

     1122, 1122, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1125, 1125,
     1125, 1125, 1125, 1125, 1125, 1125, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1129, 1129,    0, 1129, 1129, 1129, 1129, 1129, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,

      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "pandatool/src/vrml/vrmlLexer.lxx"
/**
 * PANDA 3D SOFTWARE
 * Copyright (c) Carnegie Mellon University.  All rights reserved.
 *
 * All use of this software is subject to the terms of the revised BSD
 * license.  You should have received a copy of this license along
 * with this source code in a file named "LICENSE."
 *
 * @file vrmlLexer.lxx
 * @author drose
 * @date 2004-10-01
 */
/**************************************************
 * VRML 2.0 Parser
 * Copyright (C) 1996 Silicon Graphics, Inc.
 *
 * Author(s)    : Gavin Bell
 *                Daniel Woods (first port)
 **************************************************
 */
#line 23 "pandatool/src/vrml/vrmlLexer.lxx"
#include "pandatoolbase.h"

#include "vrmlNode.h"
#include "vrmlParser.h"
#include "pnotify.h"
#include "pstrtod.h"

static int yyinput(void);        // declared by flex.
extern "C" int vrmlyywrap();

////////////////////////////////////////////////////////////////////
// Static variables
////////////////////////////////////////////////////////////////////

// We'll increment line_number as we parse the file, so
// that we can report the position of an error.
static int line_number = 0;

// current_line holds as much of the current line as will fit.  Its
// only purpose is for printing it out to report an error to the user.
static const int max_error_width = 1024;
static char current_line[max_error_width + 1];

static int error_count = 0;
static int warning_count = 0;

// This is the pointer to the current input stream.
static std::istream *input_p = nullptr;

// This is the name of the vrml file we're parsing.  We keep it so we
// can print it out for error messages.
static std::string vrml_filename;

extern void vrmlyyerror(const std::string &);

    /* The YACC parser sets this to a token to direct the lexer */
    /* in cases where just syntax isn't enough: */
int expectToken = 0;

    /* True when parsing a multiple-valued field: */
static int parsing_mf = 0;

    /* These are used when parsing SFImage fields: */
static int sfImageIntsParsed = 0;
static int sfImageIntsExpected = 0;

// This is used while scanning a quoted string.
static std::string quoted_string;

// And this keeps track of the currently-parsing array.
static MFArray *mfarray;

void
vrml_init_lexer(std::istream &in, const std::string &filename) {
  input_p = &in;
  vrml_filename = filename;
  line_number = 0;
  error_count = 0;
  warning_count = 0;
}

////////////////////////////////////////////////////////////////////
// Internal support functions.
////////////////////////////////////////////////////////////////////

int
vrmlyywrap(void) {
  return 1;
}

void
vrmlyyerror(const std::string &msg) {
  using std::cerr;

  cerr << "\nError";
  if (!vrml_filename.empty()) {
    cerr << " in " << vrml_filename;
  }
  cerr 
    << " at line " << line_number << ":\n"
    << current_line << "\n";
  
  error_count++;
}

void
vrmlyywarning(const std::string &msg) {
  using std::cerr;

  cerr << "\nWarning";
  if (!vrml_filename.empty()) {
    cerr << " in " << vrml_filename;
  }
  cerr 
    << " at line " << line_number << ":\n"
    << current_line << "\n";

  warning_count++;
}

// Now define a function to take input from an istream instead of a
// stdio FILE pointer.  This is flex-specific.
static void
input_chars(char *buffer, int &result, int max_size) {
  nassertv(input_p != nullptr);
  if (*input_p) {
    input_p->read(buffer, max_size);
    result = input_p->gcount();
    if (result >= 0 && result < max_size) {
      // Truncate at the end of the read.
      buffer[result] = '\0';
    }

    if (line_number == 0) {
      // This is a special case.  If we are reading the very first bit
      // from the stream, copy it into the current_line array.  This
      // is because the \n.* rule below, which fills current_line
      // normally, doesn't catch the first line.
      strncpy(current_line, vrmlyytext, max_error_width);
      current_line[max_error_width] = '\0';
      line_number++;

      // Truncate it at the newline.
      char *end = strchr(current_line, '\n');
      if (end != nullptr) {
        *end = '\0';
      }
    }

  } else {
    // End of file or I/O error.
    result = 0;
  }
}
#undef YY_INPUT

// Define this macro carefully, since different flex versions call it
// with a different type for result.
#define YY_INPUT(buffer, result, max_size) { \
  int int_result = 0; \
  input_chars((buffer), int_result, (max_size)); \
  (result) = int_result; \
}

int extract_int() {
  return strtol(yytext, nullptr, 0);
}

double extract_float() {
  return patof(yytext);
}

void extract_vec(double vec[], int num_elements) {
  char *p = yytext;
  for (int i = 0; i < num_elements; i++) {
    vec[i] = pstrtod(p, &p);
  }
}

#line 3195 "built/tmp/vrmlLexer.lxx.cxx"
#line 185 "pandatool/src/vrml/vrmlLexer.lxx"
    /* Normal state:  parsing nodes.  The initial start state is used */
    /* only to recognize the VRML header. */

    /* Start tokens for all of the field types, */
    /* except for MFNode and SFNode, which are almost completely handled */
    /* by the parser: */



    /* Big hairy expression for floating point numbers: */
    /* Ints are decimal or hex (0x##): */
    /* Whitespace.  Using this pattern can screw up currentLineNumber, */
    /* so it is only used wherever it is really convenient and it is */
    /* extremely unlikely that the user will put in a carriage return */
    /* (example: between the floats in an SFVec3f) */
    /* And the same pattern without the newline */
    /* Here's a pattern that matches a single newline character. */
    /* Legal characters to start an identifier */
    /* Legal other characters in an identifier */
  /*idRestChar  ([^\x00-\x20\x22\x23\x27\x2b-\x2e\x5b-\x5d\x7b\x7d])*/
  /* Allow hyphen (0x2d) in identifiers. */
#line 3218 "built/tmp/vrmlLexer.lxx.cxx"

#define INITIAL 0
#define NODE 1
#define SFB 2
#define SFC 3
#define SFF 4
#define SFIMG 5
#define SFI 6
#define SFR 7
#define SFS 8
#define SFT 9
#define SFV2 10
#define SFV3 11
#define MFC 12
#define MFF 13
#define MFI 14
#define MFR 15
#define MFS 16
#define MFV2 17
#define MFV3 18
#define IN_SFS 19
#define IN_MFS 20
#define IN_SFIMG 21

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 219 "pandatool/src/vrml/vrmlLexer.lxx"



    /* Switch into a new start state if the parser */
    /* just told us that we've read a field name */
    /* and should expect a field value (or IS) */
    if (expectToken != 0) {
      
      /*
       * Annoying.  This big switch is necessary because
       * LEX wants to assign particular numbers to start
       * tokens, and YACC wants to define all the tokens
       * used, too.  Sigh.
       */
      switch(expectToken) {
        case SFBOOL: BEGIN SFB; break;
        case SFCOLOR: BEGIN SFC; break;
        case SFFLOAT: BEGIN SFF; break;
        case SFIMAGE: BEGIN SFIMG; break;
        case SFINT32: BEGIN SFI; break;
        case SFROTATION: BEGIN SFR; break;
        case SFSTRING: BEGIN SFS; break;
        case SFTIME: BEGIN SFT; break;
        case SFVEC2F: BEGIN SFV2; break;
        case SFVEC3F: BEGIN SFV3; break;
        case MFCOLOR: BEGIN MFC; break;
        case MFFLOAT: BEGIN MFF; break;
        case MFINT32: BEGIN MFI; break;
        case MFROTATION: BEGIN MFR; break;
        case MFSTRING: BEGIN MFS; break;
        case MFVEC2F: BEGIN MFV2; break;
        case MFVEC3F: BEGIN MFV3; break;

        /* SFNode and MFNode are special.  Here the lexer just returns */
        /* "marker tokens" so the parser knows what type of field is */
        /* being parsed; unlike the other fields, parsing of SFNode/MFNode */
        /* field happens in the parser. */
        case MFNODE: expectToken = 0; return MFNODE;
        case SFNODE: expectToken = 0; return SFNODE;
        
        default: vrmlyyerror("ACK: Bad expectToken"); break;
      }
    }


    /* This is more complicated than they really need to be because */
    /* I was ambitious and made the whitespace-matching rule aggressive */
#line 3504 "built/tmp/vrmlLexer.lxx.cxx"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 980 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8867 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 266 "pandatool/src/vrml/vrmlLexer.lxx"
{
  BEGIN NODE; 
}
	YY_BREAK
/* The lexer is in the NODE state when parsing nodes, either */
/* top-level nodes in the .wrl file, in a prototype implementation, */
/* or when parsing the contents of SFNode or MFNode fields. */
case 2:
YY_RULE_SETUP
#line 273 "pandatool/src/vrml/vrmlLexer.lxx"
{ return PROTO; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 274 "pandatool/src/vrml/vrmlLexer.lxx"
{ return EXTERNPROTO; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 275 "pandatool/src/vrml/vrmlLexer.lxx"
{ return DEF; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 276 "pandatool/src/vrml/vrmlLexer.lxx"
{ return USE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 277 "pandatool/src/vrml/vrmlLexer.lxx"
{ return TO; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 278 "pandatool/src/vrml/vrmlLexer.lxx"
{ return IS; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 279 "pandatool/src/vrml/vrmlLexer.lxx"
{ return ROUTE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 280 "pandatool/src/vrml/vrmlLexer.lxx"
{ return SFN_NULL; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 281 "pandatool/src/vrml/vrmlLexer.lxx"
{ return EVENTIN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 282 "pandatool/src/vrml/vrmlLexer.lxx"
{ return EVENTOUT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 283 "pandatool/src/vrml/vrmlLexer.lxx"
{ return FIELD; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 284 "pandatool/src/vrml/vrmlLexer.lxx"
{ return EXPOSEDFIELD; }
	YY_BREAK
/* Legal identifiers: */
case 14:
YY_RULE_SETUP
#line 287 "pandatool/src/vrml/vrmlLexer.lxx"
{
  vrmlyylval.string = strdup(yytext);
  return IDENTIFIER; 
}
	YY_BREAK
/* This hopefully won't bitch things too much.  It's not legal for
      an identifier to begin with a digit, but Form-Z writes out VRML
      files that do.  So we'll allow it.  Hopefully the start states
      will keep them sorted out. */
case 15:
YY_RULE_SETUP
#line 295 "pandatool/src/vrml/vrmlLexer.lxx"
{
  vrmlyylval.string = strdup(yytext);
  return IDENTIFIER; 
}
	YY_BREAK
/* All fields may have an IS declaration: */
case 16:
YY_RULE_SETUP
#line 301 "pandatool/src/vrml/vrmlLexer.lxx"
{
  BEGIN NODE;
  expectToken = 0;
  yyless(0);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 307 "pandatool/src/vrml/vrmlLexer.lxx"
{
  BEGIN NODE;
  expectToken = 0;
  yyless(0); /* put back the IS */
}
	YY_BREAK
/* All MF field types other than MFNode are completely parsed here */
/* in the lexer, and one token is returned to the parser.  They all */
/* share the same rules for open and closing brackets: */
case 18:
YY_RULE_SETUP
#line 316 "pandatool/src/vrml/vrmlLexer.lxx"
{
  if (parsing_mf) vrmlyyerror("Double [");
  parsing_mf = 1;
  mfarray = new MFArray;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 322 "pandatool/src/vrml/vrmlLexer.lxx"
{
  if (!parsing_mf) vrmlyyerror("Unmatched ]");
  int fieldType = expectToken;
  BEGIN NODE;
  parsing_mf = 0;
  expectToken = 0;
  vrmlyylval.fv._mf = mfarray;
  return fieldType;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 332 "pandatool/src/vrml/vrmlLexer.lxx"
{
  BEGIN NODE;
  expectToken = 0;
  vrmlyylval.fv._sfbool = true;
  return SFBOOL; 
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 339 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  BEGIN NODE; 
  expectToken = 0; 
  vrmlyylval.fv._sfbool = false;
  return SFBOOL; 
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 346 "pandatool/src/vrml/vrmlLexer.lxx"
{
  BEGIN NODE; 
  expectToken = 0; 
  vrmlyylval.fv._sfint32 = extract_int();
  return SFINT32; 
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 353 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  VrmlFieldValue v;
  v._sfint32 = extract_int();
  if (parsing_mf) {
    mfarray->push_back(v);
  } else {
    BEGIN NODE; 
    expectToken = 0;
    vrmlyylval.fv._mf = new MFArray;
    vrmlyylval.fv._mf->push_back(v);
    return MFINT32;
  }
}
	YY_BREAK
/* All the floating-point types are pretty similar: */
case 24:
YY_RULE_SETUP
#line 368 "pandatool/src/vrml/vrmlLexer.lxx"
{
  BEGIN NODE; 
  expectToken = 0; 
  vrmlyylval.fv._sffloat = extract_float();
  return SFFLOAT; 
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 375 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  VrmlFieldValue v;
  v._sffloat = extract_float();
  if (parsing_mf) {
    /* Add to array... */
    mfarray->push_back(v);
  } else {
    /* No open bracket means a single value: */
    BEGIN NODE; 
    expectToken = 0;
    vrmlyylval.fv._mf = new MFArray;
    vrmlyylval.fv._mf->push_back(v);
    return MFFLOAT;
  }
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 391 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  BEGIN NODE;
  expectToken = 0;
  extract_vec(vrmlyylval.fv._sfvec, 2);
  return SFVEC2F; 
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 398 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  VrmlFieldValue v;
  extract_vec(v._sfvec, 2);
  if (parsing_mf) {
    mfarray->push_back(v);
  } else {
    BEGIN NODE;
    expectToken = 0;
    vrmlyylval.fv._mf = new MFArray;
    vrmlyylval.fv._mf->push_back(v);
    return MFVEC2F;
  }
}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 412 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  BEGIN NODE;
  expectToken = 0;
  extract_vec(vrmlyylval.fv._sfvec, 3);
  return SFVEC3F; 
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 419 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  VrmlFieldValue v;
  extract_vec(v._sfvec, 3);
  if (parsing_mf) {
    mfarray->push_back(v);
  } else {
    BEGIN NODE;
    expectToken = 0;
    vrmlyylval.fv._mf = new MFArray;
    vrmlyylval.fv._mf->push_back(v);
    return MFVEC3F;
  }
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 433 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  BEGIN NODE;
  expectToken = 0;
  extract_vec(vrmlyylval.fv._sfvec, 4);
  return SFROTATION; 
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 440 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  VrmlFieldValue v;
  extract_vec(v._sfvec, 4);
  if (parsing_mf) {
    mfarray->push_back(v);
  } else {
    BEGIN NODE;
    expectToken = 0;
    vrmlyylval.fv._mf = new MFArray;
    vrmlyylval.fv._mf->push_back(v);
    return MFROTATION;
  }
}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 454 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  BEGIN NODE;
  expectToken = 0;
  extract_vec(vrmlyylval.fv._sfvec, 3);
  return SFCOLOR; 
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 461 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  VrmlFieldValue v;
  extract_vec(v._sfvec, 3);
  if (parsing_mf) {
    mfarray->push_back(v);
  } else {
    BEGIN NODE;
    expectToken = 0;
    vrmlyylval.fv._mf = new MFArray;
    vrmlyylval.fv._mf->push_back(v);
    return MFCOLOR;
  }
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 475 "pandatool/src/vrml/vrmlLexer.lxx"
{
  BEGIN NODE; 
  expectToken = 0; 
  vrmlyylval.fv._sffloat = extract_float();
  return SFTIME; 
}
	YY_BREAK
/* SFString/MFString */
case 35:
YY_RULE_SETUP
#line 483 "pandatool/src/vrml/vrmlLexer.lxx"
{
  BEGIN IN_SFS;
  quoted_string = ""; 
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 488 "pandatool/src/vrml/vrmlLexer.lxx"
{
  BEGIN IN_MFS;
  quoted_string = ""; 
}
	YY_BREAK
/* Anything besides open-quote (or whitespace) is an error: */
case 37:
YY_RULE_SETUP
#line 494 "pandatool/src/vrml/vrmlLexer.lxx"
{
  vrmlyyerror("String missing open-quote");
  BEGIN NODE; 
  expectToken = 0; 
  vrmlyylval.fv._sfstring = strdup(""); 
  return SFSTRING;
}
	YY_BREAK
/* Expect open-quote, open-bracket, or whitespace: */
case 38:
YY_RULE_SETUP
#line 503 "pandatool/src/vrml/vrmlLexer.lxx"
{
  vrmlyyerror("String missing open-quote");
  BEGIN NODE;
  expectToken = 0;
  return MFSTRING;
}
	YY_BREAK
/* Backslashed-quotes are OK: */
case 39:
YY_RULE_SETUP
#line 511 "pandatool/src/vrml/vrmlLexer.lxx"
{
  quoted_string += '"'; 
}
	YY_BREAK
/* Gobble up anything besides quotes and newlines. */
/* Newlines are legal in strings, but we exclude them here so */
/* that line number are counted correctly by the catch-all newline */
/* rule that applies to everything. */
case 40:
YY_RULE_SETUP
#line 519 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  quoted_string += yytext; 
}
	YY_BREAK
/* Quote ends the string: */
case 41:
YY_RULE_SETUP
#line 524 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  BEGIN NODE;
  expectToken = 0;
  vrmlyylval.fv._sfstring = strdup(quoted_string.c_str());
  return SFSTRING; 
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 531 "pandatool/src/vrml/vrmlLexer.lxx"
{
  VrmlFieldValue v;
  v._sfstring = strdup(quoted_string.c_str());
  if (parsing_mf) { 
    BEGIN MFS;
    mfarray->push_back(v);
    quoted_string = "";
  } else {
    BEGIN NODE;
    expectToken = 0;
    vrmlyylval.fv._mf = new MFArray;
    vrmlyylval.fv._mf->push_back(v);
    return MFSTRING;
  }
}
	YY_BREAK
/* SFImage: width height numComponents then width*height integers: */
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 548 "pandatool/src/vrml/vrmlLexer.lxx"
{ int w, h;
                          sscanf(yytext, "%d %d", &w, &h);
                          sfImageIntsExpected = 1+w*h;
                          sfImageIntsParsed = 0;                          
                          BEGIN IN_SFIMG;
                        }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 554 "pandatool/src/vrml/vrmlLexer.lxx"
{ ++sfImageIntsParsed;
                          if (sfImageIntsParsed == sfImageIntsExpected) {
                            BEGIN NODE; expectToken = 0; return SFIMAGE;
                          }
                        }
	YY_BREAK
/* Whitespace and catch-all rules apply to all start states: */
case 45:
YY_RULE_SETUP
#line 561 "pandatool/src/vrml/vrmlLexer.lxx"
;
	YY_BREAK
/* A newline is also whitespace, but we'll keep track of line number */
/* to report in errors: */
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 565 "pandatool/src/vrml/vrmlLexer.lxx"
{
  // Save a copy of the line so we can print it out for the benefit of
  // the user in case we get an error.
  strncpy(current_line, yytext+1, max_error_width);
  current_line[max_error_width] = '\0';
  line_number++;

  // Return the whole line to the lexer, except the newline character,
  // which we eat.
  yyless(1);
}
	YY_BREAK
/* This catch-all rule catches anything not covered by any of */
/* the above: */
case 47:
YY_RULE_SETUP
#line 579 "pandatool/src/vrml/vrmlLexer.lxx"
{ 
  return yytext[0]; 
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 583 "pandatool/src/vrml/vrmlLexer.lxx"
ECHO;
	YY_BREAK
#line 4048 "built/tmp/vrmlLexer.lxx.cxx"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(NODE):
case YY_STATE_EOF(SFB):
case YY_STATE_EOF(SFC):
case YY_STATE_EOF(SFF):
case YY_STATE_EOF(SFIMG):
case YY_STATE_EOF(SFI):
case YY_STATE_EOF(SFR):
case YY_STATE_EOF(SFS):
case YY_STATE_EOF(SFT):
case YY_STATE_EOF(SFV2):
case YY_STATE_EOF(SFV3):
case YY_STATE_EOF(MFC):
case YY_STATE_EOF(MFF):
case YY_STATE_EOF(MFI):
case YY_STATE_EOF(MFR):
case YY_STATE_EOF(MFS):
case YY_STATE_EOF(MFV2):
case YY_STATE_EOF(MFV3):
case YY_STATE_EOF(IN_SFS):
case YY_STATE_EOF(IN_MFS):
case YY_STATE_EOF(IN_SFIMG):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 980 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 980 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 979);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 583 "pandatool/src/vrml/vrmlLexer.lxx"
