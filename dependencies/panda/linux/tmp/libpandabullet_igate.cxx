/*
 * This file was generated by:
 * built/bin/interrogate -srcdir panda/src/bullet -Ipanda/src/bullet -DCPPPARSER -D__STDC__=1 -D__cplusplus=201103L -D__attribute__(x)= -D_LP64 -oc built/tmp/libpandabullet_igate.cxx -od built/pandac/input/libpandabullet.in -fnames -string -refcount -assert -python-native -Sbuilt/include/parser-inc -Ipanda/src/bullet -Sbuilt/tmp -Sbuilt/include -S/usr/include/eigen3 -S/usr/include/bullet -module panda3d.bullet -library libpandabullet bulletAllHitsRayResult.h bulletBaseCharacterControllerNode.h bulletBodyNode.h bulletBoxShape.h bulletCapsuleShape.h bulletCharacterControllerNode.h bulletClosestHitRayResult.h bulletClosestHitSweepResult.h bulletConeShape.h bulletConeTwistConstraint.h bulletConstraint.h bulletContactCallbackData.h bulletContactCallbacks.h bulletContactResult.h bulletConvexHullShape.h bulletConvexPointCloudShape.h bulletCylinderShape.h bulletDebugNode.h bulletFilterCallbackData.h bulletGenericConstraint.h bulletGhostNode.h bulletHeightfieldShape.h bulletHelper.h bulletHingeConstraint.h bulletManifoldPoint.h bulletMinkowskiSumShape.h bulletMultiSphereShape.h bulletPersistentManifold.h bulletPlaneShape.h bulletRigidBodyNode.h bulletRotationalLimitMotor.h bulletShape.h bulletSliderConstraint.h bulletSoftBodyConfig.h bulletSoftBodyControl.h bulletSoftBodyMaterial.h bulletSoftBodyNode.h bulletSoftBodyShape.h bulletSoftBodyWorldInfo.h bulletSphereShape.h bulletSphericalConstraint.h bulletTickCallbackData.h bulletTranslationalLimitMotor.h bulletTriangleMesh.h bulletTriangleMeshShape.h bulletVehicle.h bulletWheel.h bulletWorld.h bullet_includes.h bullet_utils.h config_bullet.h p3bullet_composite.cxx
 *
 */

#include "dtoolbase.h"
#include "interrogate_request.h"
#include "dconfig.h"
#include "pnotify.h"
#include <sstream>
#include "py_panda.h"
#include "extension.h"
#include "dcast.h"

#include "boundingSphere.h"
#include "bulletAllHitsRayResult.h"
#include "bulletBaseCharacterControllerNode.h"
#include "bulletBodyNode.h"
#include "bulletBoxShape.h"
#include "bulletCapsuleShape.h"
#include "bulletCharacterControllerNode.h"
#include "bulletClosestHitRayResult.h"
#include "bulletClosestHitSweepResult.h"
#include "bulletConeShape.h"
#include "bulletConeTwistConstraint.h"
#include "bulletConstraint.h"
#include "bulletContactCallbackData.h"
#include "bulletContactCallbacks.h"
#include "bulletContactResult.h"
#include "bulletConvexHullShape.h"
#include "bulletConvexPointCloudShape.h"
#include "bulletCylinderShape.h"
#include "bulletDebugNode.h"
#include "bulletFilterCallbackData.h"
#include "bulletGenericConstraint.h"
#include "bulletGhostNode.h"
#include "bulletHeightfieldShape.h"
#include "bulletHelper.h"
#include "bulletHingeConstraint.h"
#include "bulletManifoldPoint.h"
#include "bulletMinkowskiSumShape.h"
#include "bulletMultiSphereShape.h"
#include "bulletPersistentManifold.h"
#include "bulletPlaneShape.h"
#include "bulletRigidBodyNode.h"
#include "bulletRotationalLimitMotor.h"
#include "bulletShape.h"
#include "bulletSliderConstraint.h"
#include "bulletSoftBodyConfig.h"
#include "bulletSoftBodyControl.h"
#include "bulletSoftBodyMaterial.h"
#include "bulletSoftBodyNode.h"
#include "bulletSoftBodyShape.h"
#include "bulletSoftBodyWorldInfo.h"
#include "bulletSphereShape.h"
#include "bulletSphericalConstraint.h"
#include "bulletTickCallbackData.h"
#include "bulletTranslationalLimitMotor.h"
#include "bulletTriangleMesh.h"
#include "bulletTriangleMeshShape.h"
#include "bulletVehicle.h"
#include "bulletWheel.h"
#include "bulletWorld.h"
#include "bullet_includes.h"
#include "bullet_utils.h"
#include "callbackData.h"
#include "callbackObject.h"
#include "collideMask.h"
#include "collisionBox.h"
#include "collisionCapsule.h"
#include "collisionNode.h"
#include "collisionPlane.h"
#include "collisionSphere.h"
#include "config_bullet.h"
#include "event.h"
#include "eventParameter.h"
#include "eventQueue.h"
#include "factoryParams.h"
#include "geom.h"
#include "luse.h"
#include "nodePath.h"
#include "nodePathCollection.h"
#include "numeric_types.h"
#include "pandaNode.h"
#include "pandabase.h"
#include "pnmImage.h"
#include "pta_LVecBase3.h"
#include "pta_int.h"
#include "pta_stdfloat.h"
#include "texture.h"
#include "texturePeeker.h"
#include "transformState.h"
#include "typedWritableReferenceCount.h"

#undef _POSIX_C_SOURCE
#undef _XOPEN_SOURCE
#define PY_SSIZE_T_CLEAN 1

#if PYTHON_FRAMEWORK
  #include <Python/Python.h>
#else
  #include "Python.h"
#endif

/**
 * Forward declarations for top-level class BulletRayHit
 */
typedef BulletRayHit BulletRayHit_localtype;
Define_Module_Class(panda3d.bullet, BulletRayHit, BulletRayHit_localtype, BulletRayHit);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletRayHit = &Dtool_BulletRayHit;
static void Dtool_PyModuleClassInit_BulletRayHit(PyObject *module);

/**
 * Forward declarations for top-level class BulletAllHitsRayResult
 */
typedef BulletAllHitsRayResult BulletAllHitsRayResult_localtype;
Define_Module_Class(panda3d.bullet, BulletAllHitsRayResult, BulletAllHitsRayResult_localtype, BulletAllHitsRayResult);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletAllHitsRayResult = &Dtool_BulletAllHitsRayResult;
static void Dtool_PyModuleClassInit_BulletAllHitsRayResult(PyObject *module);

/**
 * Forward declarations for top-level class BulletShape
 */
typedef BulletShape BulletShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletShape, BulletShape_localtype, BulletShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletShape = &Dtool_BulletShape;
static void Dtool_PyModuleClassInit_BulletShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletBaseCharacterControllerNode
 */
typedef BulletBaseCharacterControllerNode BulletBaseCharacterControllerNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletBaseCharacterControllerNode, BulletBaseCharacterControllerNode_localtype, BulletBaseCharacterControllerNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletBaseCharacterControllerNode = &Dtool_BulletBaseCharacterControllerNode;
static void Dtool_PyModuleClassInit_BulletBaseCharacterControllerNode(PyObject *module);

/**
 * Forward declarations for top-level class BulletBodyNode
 */
typedef BulletBodyNode BulletBodyNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletBodyNode, BulletBodyNode_localtype, BulletBodyNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletBodyNode = &Dtool_BulletBodyNode;
static void Dtool_PyModuleClassInit_BulletBodyNode(PyObject *module);

/**
 * Forward declarations for top-level class BulletBoxShape
 */
typedef BulletBoxShape BulletBoxShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletBoxShape, BulletBoxShape_localtype, BulletBoxShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletBoxShape = &Dtool_BulletBoxShape;
static void Dtool_PyModuleClassInit_BulletBoxShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletCapsuleShape
 */
typedef BulletCapsuleShape BulletCapsuleShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletCapsuleShape, BulletCapsuleShape_localtype, BulletCapsuleShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletCapsuleShape = &Dtool_BulletCapsuleShape;
static void Dtool_PyModuleClassInit_BulletCapsuleShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletCharacterControllerNode
 */
typedef BulletCharacterControllerNode BulletCharacterControllerNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletCharacterControllerNode, BulletCharacterControllerNode_localtype, BulletCharacterControllerNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletCharacterControllerNode = &Dtool_BulletCharacterControllerNode;
static void Dtool_PyModuleClassInit_BulletCharacterControllerNode(PyObject *module);

/**
 * Forward declarations for top-level class BulletClosestHitRayResult
 */
typedef BulletClosestHitRayResult BulletClosestHitRayResult_localtype;
Define_Module_Class(panda3d.bullet, BulletClosestHitRayResult, BulletClosestHitRayResult_localtype, BulletClosestHitRayResult);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletClosestHitRayResult = &Dtool_BulletClosestHitRayResult;
static void Dtool_PyModuleClassInit_BulletClosestHitRayResult(PyObject *module);

/**
 * Forward declarations for top-level class BulletClosestHitSweepResult
 */
typedef BulletClosestHitSweepResult BulletClosestHitSweepResult_localtype;
Define_Module_Class(panda3d.bullet, BulletClosestHitSweepResult, BulletClosestHitSweepResult_localtype, BulletClosestHitSweepResult);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletClosestHitSweepResult = &Dtool_BulletClosestHitSweepResult;
static void Dtool_PyModuleClassInit_BulletClosestHitSweepResult(PyObject *module);

/**
 * Forward declarations for top-level class BulletConeShape
 */
typedef BulletConeShape BulletConeShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletConeShape, BulletConeShape_localtype, BulletConeShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletConeShape = &Dtool_BulletConeShape;
static void Dtool_PyModuleClassInit_BulletConeShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletConstraint
 */
typedef BulletConstraint BulletConstraint_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletConstraint, BulletConstraint_localtype, BulletConstraint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletConstraint = &Dtool_BulletConstraint;
static void Dtool_PyModuleClassInit_BulletConstraint(PyObject *module);

/**
 * Forward declarations for top-level class BulletRigidBodyNode
 */
typedef BulletRigidBodyNode BulletRigidBodyNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletRigidBodyNode, BulletRigidBodyNode_localtype, BulletRigidBodyNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletRigidBodyNode = &Dtool_BulletRigidBodyNode;
static void Dtool_PyModuleClassInit_BulletRigidBodyNode(PyObject *module);

/**
 * Forward declarations for top-level class BulletConeTwistConstraint
 */
typedef BulletConeTwistConstraint BulletConeTwistConstraint_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletConeTwistConstraint, BulletConeTwistConstraint_localtype, BulletConeTwistConstraint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletConeTwistConstraint = &Dtool_BulletConeTwistConstraint;
static void Dtool_PyModuleClassInit_BulletConeTwistConstraint(PyObject *module);

/**
 * Forward declarations for top-level class BulletManifoldPoint
 */
typedef BulletManifoldPoint BulletManifoldPoint_localtype;
Define_Module_Class(panda3d.bullet, BulletManifoldPoint, BulletManifoldPoint_localtype, BulletManifoldPoint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletManifoldPoint = &Dtool_BulletManifoldPoint;
static void Dtool_PyModuleClassInit_BulletManifoldPoint(PyObject *module);

/**
 * Forward declarations for top-level class BulletContactCallbackData
 */
typedef BulletContactCallbackData BulletContactCallbackData_localtype;
Define_Module_Class_Private(panda3d.bullet, BulletContactCallbackData, BulletContactCallbackData_localtype, BulletContactCallbackData);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletContactCallbackData = &Dtool_BulletContactCallbackData;
static void Dtool_PyModuleClassInit_BulletContactCallbackData(PyObject *module);

/**
 * Forward declarations for top-level class BulletContact
 */
typedef BulletContact BulletContact_localtype;
Define_Module_Class(panda3d.bullet, BulletContact, BulletContact_localtype, BulletContact);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletContact = &Dtool_BulletContact;
static void Dtool_PyModuleClassInit_BulletContact(PyObject *module);

/**
 * Forward declarations for top-level class BulletContactResult
 */
typedef BulletContactResult BulletContactResult_localtype;
Define_Module_Class(panda3d.bullet, BulletContactResult, BulletContactResult_localtype, BulletContactResult);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletContactResult = &Dtool_BulletContactResult;
static void Dtool_PyModuleClassInit_BulletContactResult(PyObject *module);

/**
 * Forward declarations for top-level class BulletDebugNode
 */
typedef BulletDebugNode BulletDebugNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletDebugNode, BulletDebugNode_localtype, BulletDebugNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletDebugNode = &Dtool_BulletDebugNode;
static void Dtool_PyModuleClassInit_BulletDebugNode(PyObject *module);

/**
 * Forward declarations for top-level class BulletGhostNode
 */
typedef BulletGhostNode BulletGhostNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletGhostNode, BulletGhostNode_localtype, BulletGhostNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletGhostNode = &Dtool_BulletGhostNode;
static void Dtool_PyModuleClassInit_BulletGhostNode(PyObject *module);

/**
 * Forward declarations for top-level class BulletSoftBodyNodeElement
 */
typedef BulletSoftBodyNodeElement BulletSoftBodyNodeElement_localtype;
Define_Module_Class(panda3d.bullet, BulletSoftBodyNodeElement, BulletSoftBodyNodeElement_localtype, BulletSoftBodyNodeElement);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyNodeElement = &Dtool_BulletSoftBodyNodeElement;
static void Dtool_PyModuleClassInit_BulletSoftBodyNodeElement(PyObject *module);

/**
 * Forward declarations for top-level class BulletSoftBodyNode
 */
typedef BulletSoftBodyNode BulletSoftBodyNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletSoftBodyNode, BulletSoftBodyNode_localtype, BulletSoftBodyNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyNode = &Dtool_BulletSoftBodyNode;
static void Dtool_PyModuleClassInit_BulletSoftBodyNode(PyObject *module);

/**
 * Forward declarations for top-level class BulletSoftBodyConfig
 */
typedef BulletSoftBodyConfig BulletSoftBodyConfig_localtype;
Define_Module_Class(panda3d.bullet, BulletSoftBodyConfig, BulletSoftBodyConfig_localtype, BulletSoftBodyConfig);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyConfig = &Dtool_BulletSoftBodyConfig;
static void Dtool_PyModuleClassInit_BulletSoftBodyConfig(PyObject *module);

/**
 * Forward declarations for top-level class BulletSoftBodyWorldInfo
 */
typedef BulletSoftBodyWorldInfo BulletSoftBodyWorldInfo_localtype;
Define_Module_Class(panda3d.bullet, BulletSoftBodyWorldInfo, BulletSoftBodyWorldInfo_localtype, BulletSoftBodyWorldInfo);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyWorldInfo = &Dtool_BulletSoftBodyWorldInfo;
static void Dtool_PyModuleClassInit_BulletSoftBodyWorldInfo(PyObject *module);

/**
 * Forward declarations for top-level class BulletSoftBodyMaterial
 */
typedef BulletSoftBodyMaterial BulletSoftBodyMaterial_localtype;
Define_Module_Class(panda3d.bullet, BulletSoftBodyMaterial, BulletSoftBodyMaterial_localtype, BulletSoftBodyMaterial);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyMaterial = &Dtool_BulletSoftBodyMaterial;
static void Dtool_PyModuleClassInit_BulletSoftBodyMaterial(PyObject *module);

/**
 * Forward declarations for top-level class BulletVehicleTuning
 */
typedef BulletVehicleTuning BulletVehicleTuning_localtype;
Define_Module_Class_Private(panda3d.bullet, BulletVehicleTuning, BulletVehicleTuning_localtype, BulletVehicleTuning);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletVehicleTuning = &Dtool_BulletVehicleTuning;
static void Dtool_PyModuleClassInit_BulletVehicleTuning(PyObject *module);

/**
 * Forward declarations for top-level class BulletVehicle
 */
typedef BulletVehicle BulletVehicle_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletVehicle, BulletVehicle_localtype, BulletVehicle);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletVehicle = &Dtool_BulletVehicle;
static void Dtool_PyModuleClassInit_BulletVehicle(PyObject *module);
bool Dtool_ConstCoerce_BulletVehicle(PyObject *args, CPT(BulletVehicle) &coerced);
bool Dtool_Coerce_BulletVehicle(PyObject *args, PT(BulletVehicle) &coerced);

/**
 * Forward declarations for top-level class BulletWheel
 */
typedef BulletWheel BulletWheel_localtype;
Define_Module_Class(panda3d.bullet, BulletWheel, BulletWheel_localtype, BulletWheel);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletWheel = &Dtool_BulletWheel;
static void Dtool_PyModuleClassInit_BulletWheel(PyObject *module);

/**
 * Forward declarations for top-level class BulletWheelRaycastInfo
 */
typedef BulletWheelRaycastInfo BulletWheelRaycastInfo_localtype;
Define_Module_Class(panda3d.bullet, BulletWheelRaycastInfo, BulletWheelRaycastInfo_localtype, BulletWheelRaycastInfo);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletWheelRaycastInfo = &Dtool_BulletWheelRaycastInfo;
static void Dtool_PyModuleClassInit_BulletWheelRaycastInfo(PyObject *module);

/**
 * Forward declarations for top-level class BulletWorld
 */
typedef BulletWorld BulletWorld_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletWorld, BulletWorld_localtype, BulletWorld);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletWorld = &Dtool_BulletWorld;
static void Dtool_PyModuleClassInit_BulletWorld(PyObject *module);

/**
 * Forward declarations for top-level class BulletPersistentManifold
 */
typedef BulletPersistentManifold BulletPersistentManifold_localtype;
Define_Module_Class(panda3d.bullet, BulletPersistentManifold, BulletPersistentManifold_localtype, BulletPersistentManifold);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletPersistentManifold = &Dtool_BulletPersistentManifold;
static void Dtool_PyModuleClassInit_BulletPersistentManifold(PyObject *module);

/**
 * Forward declarations for top-level class BulletConvexHullShape
 */
typedef BulletConvexHullShape BulletConvexHullShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletConvexHullShape, BulletConvexHullShape_localtype, BulletConvexHullShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletConvexHullShape = &Dtool_BulletConvexHullShape;
static void Dtool_PyModuleClassInit_BulletConvexHullShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletConvexPointCloudShape
 */
typedef BulletConvexPointCloudShape BulletConvexPointCloudShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletConvexPointCloudShape, BulletConvexPointCloudShape_localtype, BulletConvexPointCloudShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletConvexPointCloudShape = &Dtool_BulletConvexPointCloudShape;
static void Dtool_PyModuleClassInit_BulletConvexPointCloudShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletCylinderShape
 */
typedef BulletCylinderShape BulletCylinderShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletCylinderShape, BulletCylinderShape_localtype, BulletCylinderShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletCylinderShape = &Dtool_BulletCylinderShape;
static void Dtool_PyModuleClassInit_BulletCylinderShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletFilterCallbackData
 */
typedef BulletFilterCallbackData BulletFilterCallbackData_localtype;
Define_Module_Class(panda3d.bullet, BulletFilterCallbackData, BulletFilterCallbackData_localtype, BulletFilterCallbackData);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletFilterCallbackData = &Dtool_BulletFilterCallbackData;
static void Dtool_PyModuleClassInit_BulletFilterCallbackData(PyObject *module);

/**
 * Forward declarations for top-level class BulletRotationalLimitMotor
 */
typedef BulletRotationalLimitMotor BulletRotationalLimitMotor_localtype;
Define_Module_Class(panda3d.bullet, BulletRotationalLimitMotor, BulletRotationalLimitMotor_localtype, BulletRotationalLimitMotor);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletRotationalLimitMotor = &Dtool_BulletRotationalLimitMotor;
static void Dtool_PyModuleClassInit_BulletRotationalLimitMotor(PyObject *module);

/**
 * Forward declarations for top-level class BulletTranslationalLimitMotor
 */
typedef BulletTranslationalLimitMotor BulletTranslationalLimitMotor_localtype;
Define_Module_Class(panda3d.bullet, BulletTranslationalLimitMotor, BulletTranslationalLimitMotor_localtype, BulletTranslationalLimitMotor);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletTranslationalLimitMotor = &Dtool_BulletTranslationalLimitMotor;
static void Dtool_PyModuleClassInit_BulletTranslationalLimitMotor(PyObject *module);

/**
 * Forward declarations for top-level class BulletGenericConstraint
 */
typedef BulletGenericConstraint BulletGenericConstraint_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletGenericConstraint, BulletGenericConstraint_localtype, BulletGenericConstraint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletGenericConstraint = &Dtool_BulletGenericConstraint;
static void Dtool_PyModuleClassInit_BulletGenericConstraint(PyObject *module);

/**
 * Forward declarations for top-level class BulletHeightfieldShape
 */
typedef BulletHeightfieldShape BulletHeightfieldShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletHeightfieldShape, BulletHeightfieldShape_localtype, BulletHeightfieldShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletHeightfieldShape = &Dtool_BulletHeightfieldShape;
static void Dtool_PyModuleClassInit_BulletHeightfieldShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletHelper
 */
typedef BulletHelper BulletHelper_localtype;
Define_Module_Class(panda3d.bullet, BulletHelper, BulletHelper_localtype, BulletHelper);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletHelper = &Dtool_BulletHelper;
static void Dtool_PyModuleClassInit_BulletHelper(PyObject *module);

/**
 * Forward declarations for top-level class BulletHingeConstraint
 */
typedef BulletHingeConstraint BulletHingeConstraint_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletHingeConstraint, BulletHingeConstraint_localtype, BulletHingeConstraint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletHingeConstraint = &Dtool_BulletHingeConstraint;
static void Dtool_PyModuleClassInit_BulletHingeConstraint(PyObject *module);

/**
 * Forward declarations for top-level class BulletMinkowskiSumShape
 */
typedef BulletMinkowskiSumShape BulletMinkowskiSumShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletMinkowskiSumShape, BulletMinkowskiSumShape_localtype, BulletMinkowskiSumShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletMinkowskiSumShape = &Dtool_BulletMinkowskiSumShape;
static void Dtool_PyModuleClassInit_BulletMinkowskiSumShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletMultiSphereShape
 */
typedef BulletMultiSphereShape BulletMultiSphereShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletMultiSphereShape, BulletMultiSphereShape_localtype, BulletMultiSphereShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletMultiSphereShape = &Dtool_BulletMultiSphereShape;
static void Dtool_PyModuleClassInit_BulletMultiSphereShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletPlaneShape
 */
typedef BulletPlaneShape BulletPlaneShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletPlaneShape, BulletPlaneShape_localtype, BulletPlaneShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletPlaneShape = &Dtool_BulletPlaneShape;
static void Dtool_PyModuleClassInit_BulletPlaneShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletSliderConstraint
 */
typedef BulletSliderConstraint BulletSliderConstraint_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletSliderConstraint, BulletSliderConstraint_localtype, BulletSliderConstraint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSliderConstraint = &Dtool_BulletSliderConstraint;
static void Dtool_PyModuleClassInit_BulletSliderConstraint(PyObject *module);

/**
 * Forward declarations for top-level class BulletSoftBodyControl
 */
typedef BulletSoftBodyControl BulletSoftBodyControl_localtype;
Define_Module_Class(panda3d.bullet, BulletSoftBodyControl, BulletSoftBodyControl_localtype, BulletSoftBodyControl);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyControl = &Dtool_BulletSoftBodyControl;
static void Dtool_PyModuleClassInit_BulletSoftBodyControl(PyObject *module);

/**
 * Forward declarations for top-level class BulletSoftBodyShape
 */
typedef BulletSoftBodyShape BulletSoftBodyShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletSoftBodyShape, BulletSoftBodyShape_localtype, BulletSoftBodyShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyShape = &Dtool_BulletSoftBodyShape;
static void Dtool_PyModuleClassInit_BulletSoftBodyShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletSphereShape
 */
typedef BulletSphereShape BulletSphereShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletSphereShape, BulletSphereShape_localtype, BulletSphereShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSphereShape = &Dtool_BulletSphereShape;
static void Dtool_PyModuleClassInit_BulletSphereShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletSphericalConstraint
 */
typedef BulletSphericalConstraint BulletSphericalConstraint_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletSphericalConstraint, BulletSphericalConstraint_localtype, BulletSphericalConstraint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSphericalConstraint = &Dtool_BulletSphericalConstraint;
static void Dtool_PyModuleClassInit_BulletSphericalConstraint(PyObject *module);

/**
 * Forward declarations for top-level class BulletTickCallbackData
 */
typedef BulletTickCallbackData BulletTickCallbackData_localtype;
Define_Module_Class(panda3d.bullet, BulletTickCallbackData, BulletTickCallbackData_localtype, BulletTickCallbackData);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletTickCallbackData = &Dtool_BulletTickCallbackData;
static void Dtool_PyModuleClassInit_BulletTickCallbackData(PyObject *module);

/**
 * Forward declarations for top-level class BulletTriangleMesh
 */
typedef BulletTriangleMesh BulletTriangleMesh_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletTriangleMesh, BulletTriangleMesh_localtype, BulletTriangleMesh);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletTriangleMesh = &Dtool_BulletTriangleMesh;
static void Dtool_PyModuleClassInit_BulletTriangleMesh(PyObject *module);

/**
 * Forward declarations for top-level class BulletTriangleMeshShape
 */
typedef BulletTriangleMeshShape BulletTriangleMeshShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletTriangleMeshShape, BulletTriangleMeshShape_localtype, BulletTriangleMeshShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletTriangleMeshShape = &Dtool_BulletTriangleMeshShape;
static void Dtool_PyModuleClassInit_BulletTriangleMeshShape(PyObject *module);

/**
 * Declarations for exported classes
 */
static const Dtool_TypeDef exports[] = {
  {"BulletRayHit", &Dtool_BulletRayHit},
  {"BulletAllHitsRayResult", &Dtool_BulletAllHitsRayResult},
  {"BulletShape", &Dtool_BulletShape},
  {"BulletBaseCharacterControllerNode", &Dtool_BulletBaseCharacterControllerNode},
  {"BulletBodyNode", &Dtool_BulletBodyNode},
  {"BulletBoxShape", &Dtool_BulletBoxShape},
  {"BulletCapsuleShape", &Dtool_BulletCapsuleShape},
  {"BulletCharacterControllerNode", &Dtool_BulletCharacterControllerNode},
  {"BulletClosestHitRayResult", &Dtool_BulletClosestHitRayResult},
  {"BulletClosestHitSweepResult", &Dtool_BulletClosestHitSweepResult},
  {"BulletConeShape", &Dtool_BulletConeShape},
  {"BulletConstraint", &Dtool_BulletConstraint},
  {"BulletRigidBodyNode", &Dtool_BulletRigidBodyNode},
  {"BulletConeTwistConstraint", &Dtool_BulletConeTwistConstraint},
  {"BulletManifoldPoint", &Dtool_BulletManifoldPoint},
  {"BulletContactCallbackData", &Dtool_BulletContactCallbackData},
  {"BulletContact", &Dtool_BulletContact},
  {"BulletContactResult", &Dtool_BulletContactResult},
  {"BulletDebugNode", &Dtool_BulletDebugNode},
  {"BulletGhostNode", &Dtool_BulletGhostNode},
  {"BulletSoftBodyNodeElement", &Dtool_BulletSoftBodyNodeElement},
  {"BulletSoftBodyNode", &Dtool_BulletSoftBodyNode},
  {"BulletSoftBodyConfig", &Dtool_BulletSoftBodyConfig},
  {"BulletSoftBodyWorldInfo", &Dtool_BulletSoftBodyWorldInfo},
  {"BulletSoftBodyMaterial", &Dtool_BulletSoftBodyMaterial},
  {"BulletVehicleTuning", &Dtool_BulletVehicleTuning},
  {"BulletVehicle", &Dtool_BulletVehicle},
  {"BulletWheel", &Dtool_BulletWheel},
  {"BulletWheelRaycastInfo", &Dtool_BulletWheelRaycastInfo},
  {"BulletWorld", &Dtool_BulletWorld},
  {"BulletPersistentManifold", &Dtool_BulletPersistentManifold},
  {"BulletConvexHullShape", &Dtool_BulletConvexHullShape},
  {"BulletConvexPointCloudShape", &Dtool_BulletConvexPointCloudShape},
  {"BulletCylinderShape", &Dtool_BulletCylinderShape},
  {"BulletFilterCallbackData", &Dtool_BulletFilterCallbackData},
  {"BulletRotationalLimitMotor", &Dtool_BulletRotationalLimitMotor},
  {"BulletTranslationalLimitMotor", &Dtool_BulletTranslationalLimitMotor},
  {"BulletGenericConstraint", &Dtool_BulletGenericConstraint},
  {"BulletHeightfieldShape", &Dtool_BulletHeightfieldShape},
  {"BulletHelper", &Dtool_BulletHelper},
  {"BulletHingeConstraint", &Dtool_BulletHingeConstraint},
  {"BulletMinkowskiSumShape", &Dtool_BulletMinkowskiSumShape},
  {"BulletMultiSphereShape", &Dtool_BulletMultiSphereShape},
  {"BulletPlaneShape", &Dtool_BulletPlaneShape},
  {"BulletSliderConstraint", &Dtool_BulletSliderConstraint},
  {"BulletSoftBodyControl", &Dtool_BulletSoftBodyControl},
  {"BulletSoftBodyShape", &Dtool_BulletSoftBodyShape},
  {"BulletSphereShape", &Dtool_BulletSphereShape},
  {"BulletSphericalConstraint", &Dtool_BulletSphericalConstraint},
  {"BulletTickCallbackData", &Dtool_BulletTickCallbackData},
  {"BulletTriangleMesh", &Dtool_BulletTriangleMesh},
  {"BulletTriangleMeshShape", &Dtool_BulletTriangleMeshShape},
  {nullptr, nullptr},
};

/**
 * Extern declarations for imported classes
 */
#ifndef LINK_ALL_STATIC
static Dtool_TypeDef imports[] = {
  {"std::ostream", nullptr},
#define Dtool_Ptr_std_ostream (imports[0].type)
  {"TypeHandle", nullptr},
#define Dtool_Ptr_TypeHandle (imports[1].type)
  {"TypedObject", nullptr},
#define Dtool_Ptr_TypedObject (imports[2].type)
  {"ReferenceCount", nullptr},
#define Dtool_Ptr_ReferenceCount (imports[3].type)
  {"LVecBase3f", nullptr},
#define Dtool_Ptr_LVecBase3f (imports[4].type)
  {"LVecBase3i", nullptr},
#define Dtool_Ptr_LVecBase3i (imports[5].type)
  {"LVector3f", nullptr},
#define Dtool_Ptr_LVector3f (imports[6].type)
  {"LPoint3f", nullptr},
#define Dtool_Ptr_LPoint3f (imports[7].type)
  {"LMatrix3f", nullptr},
#define Dtool_Ptr_LMatrix3f (imports[8].type)
  {"LMatrix4f", nullptr},
#define Dtool_Ptr_LMatrix4f (imports[9].type)
  {"LQuaternionf", nullptr},
#define Dtool_Ptr_LQuaternionf (imports[10].type)
  {"Namable", nullptr},
#define Dtool_Ptr_Namable (imports[11].type)
  {"TypedReferenceCount", nullptr},
#define Dtool_Ptr_TypedReferenceCount (imports[12].type)
  {"TypedWritable", nullptr},
#define Dtool_Ptr_TypedWritable (imports[13].type)
  {"TypedWritableReferenceCount", nullptr},
#define Dtool_Ptr_TypedWritableReferenceCount (imports[14].type)
  {"BitMask< uint32_t, 32 >", nullptr},
#define Dtool_Ptr_BitMask_uint32_t_32 (imports[15].type)
  {"InternalName", nullptr},
#define Dtool_Ptr_InternalName (imports[16].type)
  {"GeomVertexFormat", nullptr},
#define Dtool_Ptr_GeomVertexFormat (imports[17].type)
  {"PointerToArray< int >", nullptr},
#define Dtool_Ptr_PointerToArray_int (imports[18].type)
  {"Geom", nullptr},
#define Dtool_Ptr_Geom (imports[19].type)
  {"TransformState", nullptr},
#define Dtool_Ptr_TransformState (imports[20].type)
  {"PandaNode", nullptr},
#define Dtool_Ptr_PandaNode (imports[21].type)
  {"PointerToArray< float >", nullptr},
#define Dtool_Ptr_PointerToArray_float (imports[22].type)
  {"PointerToArray< LVecBase3f >", nullptr},
#define Dtool_Ptr_PointerToArray_LVecBase3f (imports[23].type)
  {"PNMImage", nullptr},
#define Dtool_Ptr_PNMImage (imports[24].type)
  {"LPlanef", nullptr},
#define Dtool_Ptr_LPlanef (imports[25].type)
  {"Texture", nullptr},
#define Dtool_Ptr_Texture (imports[26].type)
  {"NodePath", nullptr},
#define Dtool_Ptr_NodePath (imports[27].type)
  {"NodePathCollection", nullptr},
#define Dtool_Ptr_NodePathCollection (imports[28].type)
  {"BoundingSphere", nullptr},
#define Dtool_Ptr_BoundingSphere (imports[29].type)
  {"CollisionNode", nullptr},
#define Dtool_Ptr_CollisionNode (imports[30].type)
  {"CollisionBox", nullptr},
#define Dtool_Ptr_CollisionBox (imports[31].type)
  {"CollisionCapsule", nullptr},
#define Dtool_Ptr_CollisionCapsule (imports[32].type)
  {"CallbackData", nullptr},
#define Dtool_Ptr_CallbackData (imports[33].type)
  {"CallbackObject", nullptr},
#define Dtool_Ptr_CallbackObject (imports[34].type)
  {"BoundingBox", nullptr},
#define Dtool_Ptr_BoundingBox (imports[35].type)
  {"NurbsCurveEvaluator", nullptr},
#define Dtool_Ptr_NurbsCurveEvaluator (imports[36].type)
  {"NurbsSurfaceEvaluator", nullptr},
#define Dtool_Ptr_NurbsSurfaceEvaluator (imports[37].type)
  {"CollisionPlane", nullptr},
#define Dtool_Ptr_CollisionPlane (imports[38].type)
  {"CollisionSphere", nullptr},
#define Dtool_Ptr_CollisionSphere (imports[39].type)
  {nullptr, nullptr},
};
#endif

// std::ostream
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_std_ostream;
static struct Dtool_PyTypedObject *const Dtool_Ptr_std_ostream = &Dtool_std_ostream;
#endif
// TypeHandle
#ifndef LINK_ALL_STATIC
inline static TypeHandle *Dtool_Coerce_TypeHandle(PyObject *args, TypeHandle &coerced) {
  nassertr(Dtool_Ptr_TypeHandle != nullptr, nullptr);
  nassertr(Dtool_Ptr_TypeHandle->_Dtool_Coerce != nullptr, nullptr);
  return ((TypeHandle *(*)(PyObject *, TypeHandle &))Dtool_Ptr_TypeHandle->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_TypeHandle;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypeHandle = &Dtool_TypeHandle;
extern TypeHandle *Dtool_Coerce_TypeHandle(PyObject *args, TypeHandle &coerced);
#endif
// TypedObject
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_TypedObject;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedObject = &Dtool_TypedObject;
#endif
// ReferenceCount
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_ReferenceCount;
static struct Dtool_PyTypedObject *const Dtool_Ptr_ReferenceCount = &Dtool_ReferenceCount;
#endif
// LVecBase3f
#ifndef LINK_ALL_STATIC
inline static LVecBase3f *Dtool_Coerce_LVecBase3f(PyObject *args, LVecBase3f &coerced) {
  nassertr(Dtool_Ptr_LVecBase3f != nullptr, nullptr);
  nassertr(Dtool_Ptr_LVecBase3f->_Dtool_Coerce != nullptr, nullptr);
  return ((LVecBase3f *(*)(PyObject *, LVecBase3f &))Dtool_Ptr_LVecBase3f->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LVecBase3f;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LVecBase3f = &Dtool_LVecBase3f;
extern LVecBase3f *Dtool_Coerce_LVecBase3f(PyObject *args, LVecBase3f &coerced);
#endif
// LVecBase3i
#ifndef LINK_ALL_STATIC
inline static LVecBase3i *Dtool_Coerce_LVecBase3i(PyObject *args, LVecBase3i &coerced) {
  nassertr(Dtool_Ptr_LVecBase3i != nullptr, nullptr);
  nassertr(Dtool_Ptr_LVecBase3i->_Dtool_Coerce != nullptr, nullptr);
  return ((LVecBase3i *(*)(PyObject *, LVecBase3i &))Dtool_Ptr_LVecBase3i->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LVecBase3i;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LVecBase3i = &Dtool_LVecBase3i;
extern LVecBase3i *Dtool_Coerce_LVecBase3i(PyObject *args, LVecBase3i &coerced);
#endif
// LVector3f
#ifndef LINK_ALL_STATIC
inline static LVector3f *Dtool_Coerce_LVector3f(PyObject *args, LVector3f &coerced) {
  nassertr(Dtool_Ptr_LVector3f != nullptr, nullptr);
  nassertr(Dtool_Ptr_LVector3f->_Dtool_Coerce != nullptr, nullptr);
  return ((LVector3f *(*)(PyObject *, LVector3f &))Dtool_Ptr_LVector3f->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LVector3f;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LVector3f = &Dtool_LVector3f;
extern LVector3f *Dtool_Coerce_LVector3f(PyObject *args, LVector3f &coerced);
#endif
// LPoint3f
#ifndef LINK_ALL_STATIC
inline static LPoint3f *Dtool_Coerce_LPoint3f(PyObject *args, LPoint3f &coerced) {
  nassertr(Dtool_Ptr_LPoint3f != nullptr, nullptr);
  nassertr(Dtool_Ptr_LPoint3f->_Dtool_Coerce != nullptr, nullptr);
  return ((LPoint3f *(*)(PyObject *, LPoint3f &))Dtool_Ptr_LPoint3f->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LPoint3f;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LPoint3f = &Dtool_LPoint3f;
extern LPoint3f *Dtool_Coerce_LPoint3f(PyObject *args, LPoint3f &coerced);
#endif
// LMatrix3f
#ifndef LINK_ALL_STATIC
inline static LMatrix3f *Dtool_Coerce_LMatrix3f(PyObject *args, LMatrix3f &coerced) {
  nassertr(Dtool_Ptr_LMatrix3f != nullptr, nullptr);
  nassertr(Dtool_Ptr_LMatrix3f->_Dtool_Coerce != nullptr, nullptr);
  return ((LMatrix3f *(*)(PyObject *, LMatrix3f &))Dtool_Ptr_LMatrix3f->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LMatrix3f;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LMatrix3f = &Dtool_LMatrix3f;
extern LMatrix3f *Dtool_Coerce_LMatrix3f(PyObject *args, LMatrix3f &coerced);
#endif
// LMatrix4f
#ifndef LINK_ALL_STATIC
inline static LMatrix4f *Dtool_Coerce_LMatrix4f(PyObject *args, LMatrix4f &coerced) {
  nassertr(Dtool_Ptr_LMatrix4f != nullptr, nullptr);
  nassertr(Dtool_Ptr_LMatrix4f->_Dtool_Coerce != nullptr, nullptr);
  return ((LMatrix4f *(*)(PyObject *, LMatrix4f &))Dtool_Ptr_LMatrix4f->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LMatrix4f;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LMatrix4f = &Dtool_LMatrix4f;
extern LMatrix4f *Dtool_Coerce_LMatrix4f(PyObject *args, LMatrix4f &coerced);
#endif
// LQuaternionf
#ifndef LINK_ALL_STATIC
inline static LQuaternionf *Dtool_Coerce_LQuaternionf(PyObject *args, LQuaternionf &coerced) {
  nassertr(Dtool_Ptr_LQuaternionf != nullptr, nullptr);
  nassertr(Dtool_Ptr_LQuaternionf->_Dtool_Coerce != nullptr, nullptr);
  return ((LQuaternionf *(*)(PyObject *, LQuaternionf &))Dtool_Ptr_LQuaternionf->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LQuaternionf;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LQuaternionf = &Dtool_LQuaternionf;
extern LQuaternionf *Dtool_Coerce_LQuaternionf(PyObject *args, LQuaternionf &coerced);
#endif
// Namable
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_Namable;
static struct Dtool_PyTypedObject *const Dtool_Ptr_Namable = &Dtool_Namable;
#endif
// TypedReferenceCount
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_TypedReferenceCount;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedReferenceCount = &Dtool_TypedReferenceCount;
#endif
// TypedWritable
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_TypedWritable;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedWritable = &Dtool_TypedWritable;
#endif
// TypedWritableReferenceCount
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_TypedWritableReferenceCount;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedWritableReferenceCount = &Dtool_TypedWritableReferenceCount;
#endif
// BitMask< uint32_t, 32 >
#ifndef LINK_ALL_STATIC
inline static BitMask< uint32_t, 32 > *Dtool_Coerce_BitMask_uint32_t_32(PyObject *args, BitMask< uint32_t, 32 > &coerced) {
  nassertr(Dtool_Ptr_BitMask_uint32_t_32 != nullptr, nullptr);
  nassertr(Dtool_Ptr_BitMask_uint32_t_32->_Dtool_Coerce != nullptr, nullptr);
  return ((BitMask< uint32_t, 32 > *(*)(PyObject *, BitMask< uint32_t, 32 > &))Dtool_Ptr_BitMask_uint32_t_32->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_BitMask_uint32_t_32;
static struct Dtool_PyTypedObject *const Dtool_Ptr_BitMask_uint32_t_32 = &Dtool_BitMask_uint32_t_32;
extern BitMask< uint32_t, 32 > *Dtool_Coerce_BitMask_uint32_t_32(PyObject *args, BitMask< uint32_t, 32 > &coerced);
#endif
// InternalName
#ifndef LINK_ALL_STATIC
inline static bool Dtool_ConstCoerce_InternalName(PyObject *args, CPT(InternalName) &coerced) {
  nassertr(Dtool_Ptr_InternalName != nullptr, false);
  nassertr(Dtool_Ptr_InternalName->_Dtool_ConstCoerce != nullptr, false);
  return ((bool (*)(PyObject *, CPT(InternalName) &))Dtool_Ptr_InternalName->_Dtool_ConstCoerce)(args, coerced);
}
inline static bool Dtool_Coerce_InternalName(PyObject *args, PT(InternalName) &coerced) {
  nassertr(Dtool_Ptr_InternalName != nullptr, false);
  nassertr(Dtool_Ptr_InternalName->_Dtool_Coerce != nullptr, false);
  return ((bool (*)(PyObject *, PT(InternalName) &))Dtool_Ptr_InternalName->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_InternalName;
static struct Dtool_PyTypedObject *const Dtool_Ptr_InternalName = &Dtool_InternalName;
extern bool Dtool_ConstCoerce_InternalName(PyObject *args, CPT(InternalName) &coerced);
extern bool Dtool_Coerce_InternalName(PyObject *args, PT(InternalName) &coerced);
#endif
// GeomVertexFormat
#ifndef LINK_ALL_STATIC
inline static bool Dtool_ConstCoerce_GeomVertexFormat(PyObject *args, CPT(GeomVertexFormat) &coerced) {
  nassertr(Dtool_Ptr_GeomVertexFormat != nullptr, false);
  nassertr(Dtool_Ptr_GeomVertexFormat->_Dtool_ConstCoerce != nullptr, false);
  return ((bool (*)(PyObject *, CPT(GeomVertexFormat) &))Dtool_Ptr_GeomVertexFormat->_Dtool_ConstCoerce)(args, coerced);
}
inline static bool Dtool_Coerce_GeomVertexFormat(PyObject *args, PT(GeomVertexFormat) &coerced) {
  nassertr(Dtool_Ptr_GeomVertexFormat != nullptr, false);
  nassertr(Dtool_Ptr_GeomVertexFormat->_Dtool_Coerce != nullptr, false);
  return ((bool (*)(PyObject *, PT(GeomVertexFormat) &))Dtool_Ptr_GeomVertexFormat->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_GeomVertexFormat;
static struct Dtool_PyTypedObject *const Dtool_Ptr_GeomVertexFormat = &Dtool_GeomVertexFormat;
extern bool Dtool_ConstCoerce_GeomVertexFormat(PyObject *args, CPT(GeomVertexFormat) &coerced);
extern bool Dtool_Coerce_GeomVertexFormat(PyObject *args, PT(GeomVertexFormat) &coerced);
#endif
// PointerToArray< int >
#ifndef LINK_ALL_STATIC
inline static PointerToArray< int > *Dtool_Coerce_PointerToArray_int(PyObject *args, PointerToArray< int > &coerced) {
  nassertr(Dtool_Ptr_PointerToArray_int != nullptr, nullptr);
  nassertr(Dtool_Ptr_PointerToArray_int->_Dtool_Coerce != nullptr, nullptr);
  return ((PointerToArray< int > *(*)(PyObject *, PointerToArray< int > &))Dtool_Ptr_PointerToArray_int->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_PointerToArray_int;
static struct Dtool_PyTypedObject *const Dtool_Ptr_PointerToArray_int = &Dtool_PointerToArray_int;
extern PointerToArray< int > *Dtool_Coerce_PointerToArray_int(PyObject *args, PointerToArray< int > &coerced);
#endif
// Geom
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_Geom;
static struct Dtool_PyTypedObject *const Dtool_Ptr_Geom = &Dtool_Geom;
#endif
// TransformState
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_TransformState;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TransformState = &Dtool_TransformState;
#endif
// PandaNode
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_PandaNode;
static struct Dtool_PyTypedObject *const Dtool_Ptr_PandaNode = &Dtool_PandaNode;
#endif
// PointerToArray< float >
#ifndef LINK_ALL_STATIC
inline static PointerToArray< float > *Dtool_Coerce_PointerToArray_float(PyObject *args, PointerToArray< float > &coerced) {
  nassertr(Dtool_Ptr_PointerToArray_float != nullptr, nullptr);
  nassertr(Dtool_Ptr_PointerToArray_float->_Dtool_Coerce != nullptr, nullptr);
  return ((PointerToArray< float > *(*)(PyObject *, PointerToArray< float > &))Dtool_Ptr_PointerToArray_float->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_PointerToArray_float;
static struct Dtool_PyTypedObject *const Dtool_Ptr_PointerToArray_float = &Dtool_PointerToArray_float;
extern PointerToArray< float > *Dtool_Coerce_PointerToArray_float(PyObject *args, PointerToArray< float > &coerced);
#endif
// PointerToArray< LVecBase3f >
#ifndef LINK_ALL_STATIC
inline static PointerToArray< LVecBase3f > *Dtool_Coerce_PointerToArray_LVecBase3f(PyObject *args, PointerToArray< LVecBase3f > &coerced) {
  nassertr(Dtool_Ptr_PointerToArray_LVecBase3f != nullptr, nullptr);
  nassertr(Dtool_Ptr_PointerToArray_LVecBase3f->_Dtool_Coerce != nullptr, nullptr);
  return ((PointerToArray< LVecBase3f > *(*)(PyObject *, PointerToArray< LVecBase3f > &))Dtool_Ptr_PointerToArray_LVecBase3f->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_PointerToArray_LVecBase3f;
static struct Dtool_PyTypedObject *const Dtool_Ptr_PointerToArray_LVecBase3f = &Dtool_PointerToArray_LVecBase3f;
extern PointerToArray< LVecBase3f > *Dtool_Coerce_PointerToArray_LVecBase3f(PyObject *args, PointerToArray< LVecBase3f > &coerced);
#endif
// PNMImage
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_PNMImage;
static struct Dtool_PyTypedObject *const Dtool_Ptr_PNMImage = &Dtool_PNMImage;
#endif
// LPlanef
#ifndef LINK_ALL_STATIC
inline static LPlanef *Dtool_Coerce_LPlanef(PyObject *args, LPlanef &coerced) {
  nassertr(Dtool_Ptr_LPlanef != nullptr, nullptr);
  nassertr(Dtool_Ptr_LPlanef->_Dtool_Coerce != nullptr, nullptr);
  return ((LPlanef *(*)(PyObject *, LPlanef &))Dtool_Ptr_LPlanef->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LPlanef;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LPlanef = &Dtool_LPlanef;
extern LPlanef *Dtool_Coerce_LPlanef(PyObject *args, LPlanef &coerced);
#endif
// Texture
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_Texture;
static struct Dtool_PyTypedObject *const Dtool_Ptr_Texture = &Dtool_Texture;
#endif
// NodePath
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_NodePath;
static struct Dtool_PyTypedObject *const Dtool_Ptr_NodePath = &Dtool_NodePath;
#endif
// NodePathCollection
#ifndef LINK_ALL_STATIC
inline static NodePathCollection *Dtool_Coerce_NodePathCollection(PyObject *args, NodePathCollection &coerced) {
  nassertr(Dtool_Ptr_NodePathCollection != nullptr, nullptr);
  nassertr(Dtool_Ptr_NodePathCollection->_Dtool_Coerce != nullptr, nullptr);
  return ((NodePathCollection *(*)(PyObject *, NodePathCollection &))Dtool_Ptr_NodePathCollection->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_NodePathCollection;
static struct Dtool_PyTypedObject *const Dtool_Ptr_NodePathCollection = &Dtool_NodePathCollection;
extern NodePathCollection *Dtool_Coerce_NodePathCollection(PyObject *args, NodePathCollection &coerced);
#endif
// BoundingSphere
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_BoundingSphere;
static struct Dtool_PyTypedObject *const Dtool_Ptr_BoundingSphere = &Dtool_BoundingSphere;
#endif
// CollisionNode
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_CollisionNode;
static struct Dtool_PyTypedObject *const Dtool_Ptr_CollisionNode = &Dtool_CollisionNode;
#endif
// CollisionBox
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_CollisionBox;
static struct Dtool_PyTypedObject *const Dtool_Ptr_CollisionBox = &Dtool_CollisionBox;
#endif
// CollisionCapsule
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_CollisionCapsule;
static struct Dtool_PyTypedObject *const Dtool_Ptr_CollisionCapsule = &Dtool_CollisionCapsule;
#endif
// CallbackData
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_CallbackData;
static struct Dtool_PyTypedObject *const Dtool_Ptr_CallbackData = &Dtool_CallbackData;
#endif
// CallbackObject
#ifndef LINK_ALL_STATIC
inline static bool Dtool_ConstCoerce_CallbackObject(PyObject *args, CPT(CallbackObject) &coerced) {
  nassertr(Dtool_Ptr_CallbackObject != nullptr, false);
  nassertr(Dtool_Ptr_CallbackObject->_Dtool_ConstCoerce != nullptr, false);
  return ((bool (*)(PyObject *, CPT(CallbackObject) &))Dtool_Ptr_CallbackObject->_Dtool_ConstCoerce)(args, coerced);
}
inline static bool Dtool_Coerce_CallbackObject(PyObject *args, PT(CallbackObject) &coerced) {
  nassertr(Dtool_Ptr_CallbackObject != nullptr, false);
  nassertr(Dtool_Ptr_CallbackObject->_Dtool_Coerce != nullptr, false);
  return ((bool (*)(PyObject *, PT(CallbackObject) &))Dtool_Ptr_CallbackObject->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_CallbackObject;
static struct Dtool_PyTypedObject *const Dtool_Ptr_CallbackObject = &Dtool_CallbackObject;
extern bool Dtool_ConstCoerce_CallbackObject(PyObject *args, CPT(CallbackObject) &coerced);
extern bool Dtool_Coerce_CallbackObject(PyObject *args, PT(CallbackObject) &coerced);
#endif
// BoundingBox
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_BoundingBox;
static struct Dtool_PyTypedObject *const Dtool_Ptr_BoundingBox = &Dtool_BoundingBox;
#endif
// NurbsCurveEvaluator
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_NurbsCurveEvaluator;
static struct Dtool_PyTypedObject *const Dtool_Ptr_NurbsCurveEvaluator = &Dtool_NurbsCurveEvaluator;
#endif
// NurbsSurfaceEvaluator
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_NurbsSurfaceEvaluator;
static struct Dtool_PyTypedObject *const Dtool_Ptr_NurbsSurfaceEvaluator = &Dtool_NurbsSurfaceEvaluator;
#endif
// CollisionPlane
#ifndef LINK_ALL_STATIC
inline static bool Dtool_ConstCoerce_CollisionPlane(PyObject *args, CPT(CollisionPlane) &coerced) {
  nassertr(Dtool_Ptr_CollisionPlane != nullptr, false);
  nassertr(Dtool_Ptr_CollisionPlane->_Dtool_ConstCoerce != nullptr, false);
  return ((bool (*)(PyObject *, CPT(CollisionPlane) &))Dtool_Ptr_CollisionPlane->_Dtool_ConstCoerce)(args, coerced);
}
inline static bool Dtool_Coerce_CollisionPlane(PyObject *args, PT(CollisionPlane) &coerced) {
  nassertr(Dtool_Ptr_CollisionPlane != nullptr, false);
  nassertr(Dtool_Ptr_CollisionPlane->_Dtool_Coerce != nullptr, false);
  return ((bool (*)(PyObject *, PT(CollisionPlane) &))Dtool_Ptr_CollisionPlane->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_CollisionPlane;
static struct Dtool_PyTypedObject *const Dtool_Ptr_CollisionPlane = &Dtool_CollisionPlane;
extern bool Dtool_ConstCoerce_CollisionPlane(PyObject *args, CPT(CollisionPlane) &coerced);
extern bool Dtool_Coerce_CollisionPlane(PyObject *args, PT(CollisionPlane) &coerced);
#endif
// CollisionSphere
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_CollisionSphere;
static struct Dtool_PyTypedObject *const Dtool_Ptr_CollisionSphere = &Dtool_CollisionSphere;
#endif

/**
 * Python wrappers for global functions
 */
/**
 * Python function wrapper for:
 * BulletUpAxis get_default_up_axis(void)
 */
static PyObject *Dtool_get_default_up_axis_2(PyObject *, PyObject *) {
  // 1-BulletUpAxis get_default_up_axis(void)
  BulletUpAxis return_value = (::get_default_up_axis)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_get_default_up_axis_2_comment =
  "C++ Interface:\n"
  "get_default_up_axis()\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_get_default_up_axis_2_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int get_bullet_version(void)
 */
static PyObject *Dtool_get_bullet_version_3(PyObject *, PyObject *) {
  // 1-int get_bullet_version(void)
  int return_value = (::get_bullet_version)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_get_bullet_version_3_comment =
  "C++ Interface:\n"
  "get_bullet_version()\n"
  "\n"
  "/**\n"
  " * Returns the version of the linked Bullet library.\n"
  " */";
#else
static const char *Dtool_get_bullet_version_3_comment = nullptr;
#endif

/**
 * Python wrappers for functions of class BulletRayHit
 */
/**
 * Python function wrapper for:
 * static inline BulletRayHit BulletRayHit::empty(void)
 */
static PyObject *Dtool_BulletRayHit_empty_5(PyObject *, PyObject *) {
  // 1-static inline BulletRayHit BulletRayHit::empty(void)
  BulletRayHit *return_value = new BulletRayHit((BulletRayHit::empty)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletRayHit, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_empty_5_comment =
  "C++ Interface:\n"
  "empty()\n"
  "\n"
  "/**\n"
  " * Named constructor intended to be used for asserts with have to return a\n"
  " * concrete value.\n"
  " */";
#else
static const char *Dtool_BulletRayHit_empty_5_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PandaNode *BulletRayHit::get_node(void) const
 */
static PyObject *Dtool_BulletRayHit_get_node_6(PyObject *self, PyObject *) {
  BulletRayHit *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRayHit)) {
    return nullptr;
  }
  // 1-PandaNode *BulletRayHit::get_node(void) const
  PandaNode *return_value = ((*(const BulletRayHit*)local_this).get_node)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_get_node_6_comment =
  "C++ Interface:\n"
  "get_node(BulletRayHit self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRayHit_get_node_6_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletRayHit::get_hit_pos(void) const
 */
static PyObject *Dtool_BulletRayHit_get_hit_pos_7(PyObject *self, PyObject *) {
  BulletRayHit *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRayHit)) {
    return nullptr;
  }
  // 1-LPoint3 BulletRayHit::get_hit_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletRayHit*)local_this).get_hit_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_get_hit_pos_7_comment =
  "C++ Interface:\n"
  "get_hit_pos(BulletRayHit self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRayHit_get_hit_pos_7_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRayHit::get_hit_normal(void) const
 */
static PyObject *Dtool_BulletRayHit_get_hit_normal_8(PyObject *self, PyObject *) {
  BulletRayHit *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRayHit)) {
    return nullptr;
  }
  // 1-LVector3 BulletRayHit::get_hit_normal(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRayHit*)local_this).get_hit_normal)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_get_hit_normal_8_comment =
  "C++ Interface:\n"
  "get_hit_normal(BulletRayHit self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRayHit_get_hit_normal_8_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRayHit::get_hit_fraction(void) const
 */
static PyObject *Dtool_BulletRayHit_get_hit_fraction_9(PyObject *self, PyObject *) {
  BulletRayHit *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRayHit)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletRayHit::get_hit_fraction(void) const
  PN_stdfloat return_value = ((*(const BulletRayHit*)local_this).get_hit_fraction)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_get_hit_fraction_9_comment =
  "C++ Interface:\n"
  "get_hit_fraction(BulletRayHit self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRayHit_get_hit_fraction_9_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletRayHit::get_shape_part(void) const
 */
static PyObject *Dtool_BulletRayHit_get_shape_part_10(PyObject *self, PyObject *) {
  BulletRayHit *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRayHit)) {
    return nullptr;
  }
  // 1-int BulletRayHit::get_shape_part(void) const
  int return_value = ((*(const BulletRayHit*)local_this).get_shape_part)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_get_shape_part_10_comment =
  "C++ Interface:\n"
  "get_shape_part(BulletRayHit self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRayHit_get_shape_part_10_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletRayHit::get_triangle_index(void) const
 */
static PyObject *Dtool_BulletRayHit_get_triangle_index_11(PyObject *self, PyObject *) {
  BulletRayHit *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRayHit)) {
    return nullptr;
  }
  // 1-int BulletRayHit::get_triangle_index(void) const
  int return_value = ((*(const BulletRayHit*)local_this).get_triangle_index)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_get_triangle_index_11_comment =
  "C++ Interface:\n"
  "get_triangle_index(BulletRayHit self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRayHit_get_triangle_index_11_comment = nullptr;
#endif

static PyObject *Dtool_BulletRayHit_node_Getter(PyObject *self, void *) {
  const BulletRayHit *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRayHit, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PandaNode *BulletRayHit::get_node(void) const
  PandaNode *return_value = ((*(const BulletRayHit*)local_this).get_node)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletRayHit_hit_pos_Getter(PyObject *self, void *) {
  const BulletRayHit *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRayHit, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletRayHit::get_hit_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletRayHit*)local_this).get_hit_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletRayHit_hit_normal_Getter(PyObject *self, void *) {
  const BulletRayHit *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRayHit, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletRayHit::get_hit_normal(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRayHit*)local_this).get_hit_normal)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletRayHit_hit_fraction_Getter(PyObject *self, void *) {
  const BulletRayHit *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRayHit, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletRayHit::get_hit_fraction(void) const
  PN_stdfloat return_value = ((*(const BulletRayHit*)local_this).get_hit_fraction)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletRayHit_shape_part_Getter(PyObject *self, void *) {
  const BulletRayHit *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRayHit, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletRayHit::get_shape_part(void) const
  int return_value = ((*(const BulletRayHit*)local_this).get_shape_part)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletRayHit_triangle_index_Getter(PyObject *self, void *) {
  const BulletRayHit *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRayHit, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletRayHit::get_triangle_index(void) const
  int return_value = ((*(const BulletRayHit*)local_this).get_triangle_index)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * inline BulletRayHit::BulletRayHit(void) = default
 * inline BulletRayHit::BulletRayHit(BulletRayHit const &) = default
 */
static int Dtool_Init_BulletRayHit(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletRayHit() takes no keyword arguments");
    return -1;
#endif
  }
  int parameter_count = (int)PyTuple_Size(args);
  switch (parameter_count) {
  case 0:
    {
      // 1-inline BulletRayHit::BulletRayHit(void) = default
      BulletRayHit *return_value = new BulletRayHit();
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletRayHit, true, false);
    }
    break;
  case 1:
    {
      PyObject *arg = PyTuple_GET_ITEM(args, 0);
      // 1-inline BulletRayHit::BulletRayHit(BulletRayHit const &) = default
      BulletRayHit const *arg_this = (BulletRayHit *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletRayHit, 0, "BulletRayHit.BulletRayHit", true, true);
      if (arg_this != nullptr) {
        BulletRayHit *return_value = new BulletRayHit(*arg_this);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        if (Dtool_CheckErrorOccurred()) {
          delete return_value;
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletRayHit, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletRayHit() takes 0 or 1 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletRayHit()\n"
      "BulletRayHit(const BulletRayHit param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletRayHit(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletRayHit) {
    printf("BulletRayHit ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletRayHit *local_this = (BulletRayHit *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletRayHit) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletRayHit(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletRayHit) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletAllHitsRayResult
 */
/**
 * Python function wrapper for:
 * static inline BulletAllHitsRayResult BulletAllHitsRayResult::empty(void)
 */
static PyObject *Dtool_BulletAllHitsRayResult_empty_34(PyObject *, PyObject *) {
  // 1-static inline BulletAllHitsRayResult BulletAllHitsRayResult::empty(void)
  BulletAllHitsRayResult *return_value = new BulletAllHitsRayResult((BulletAllHitsRayResult::empty)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletAllHitsRayResult, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_empty_34_comment =
  "C++ Interface:\n"
  "empty()\n"
  "\n"
  "/**\n"
  " * Named constructor intended to be used for asserts with have to return a\n"
  " * concrete value.\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_empty_34_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletAllHitsRayResult::get_from_pos(void) const
 */
static PyObject *Dtool_BulletAllHitsRayResult_get_from_pos_35(PyObject *self, PyObject *) {
  BulletAllHitsRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletAllHitsRayResult)) {
    return nullptr;
  }
  // 1-LPoint3 BulletAllHitsRayResult::get_from_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletAllHitsRayResult*)local_this).get_from_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_get_from_pos_35_comment =
  "C++ Interface:\n"
  "get_from_pos(BulletAllHitsRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_get_from_pos_35_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletAllHitsRayResult::get_to_pos(void) const
 */
static PyObject *Dtool_BulletAllHitsRayResult_get_to_pos_36(PyObject *self, PyObject *) {
  BulletAllHitsRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletAllHitsRayResult)) {
    return nullptr;
  }
  // 1-LPoint3 BulletAllHitsRayResult::get_to_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletAllHitsRayResult*)local_this).get_to_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_get_to_pos_36_comment =
  "C++ Interface:\n"
  "get_to_pos(BulletAllHitsRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_get_to_pos_36_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletAllHitsRayResult::has_hits(void) const
 */
static PyObject *Dtool_BulletAllHitsRayResult_has_hits_37(PyObject *self, PyObject *) {
  BulletAllHitsRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletAllHitsRayResult)) {
    return nullptr;
  }
  // 1-bool BulletAllHitsRayResult::has_hits(void) const
  bool return_value = ((*(const BulletAllHitsRayResult*)local_this).has_hits)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_has_hits_37_comment =
  "C++ Interface:\n"
  "has_hits(BulletAllHitsRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_has_hits_37_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletAllHitsRayResult::get_closest_hit_fraction(void) const
 */
static PyObject *Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_38(PyObject *self, PyObject *) {
  BulletAllHitsRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletAllHitsRayResult)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletAllHitsRayResult::get_closest_hit_fraction(void) const
  PN_stdfloat return_value = ((*(const BulletAllHitsRayResult*)local_this).get_closest_hit_fraction)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_38_comment =
  "C++ Interface:\n"
  "get_closest_hit_fraction(BulletAllHitsRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_38_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletAllHitsRayResult::get_num_hits(void) const
 */
static PyObject *Dtool_BulletAllHitsRayResult_get_num_hits_39(PyObject *self, PyObject *) {
  BulletAllHitsRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletAllHitsRayResult)) {
    return nullptr;
  }
  // 1-int BulletAllHitsRayResult::get_num_hits(void) const
  int return_value = ((*(const BulletAllHitsRayResult*)local_this).get_num_hits)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_get_num_hits_39_comment =
  "C++ Interface:\n"
  "get_num_hits(BulletAllHitsRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_get_num_hits_39_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletRayHit const BulletAllHitsRayResult::get_hit(int idx) const
 */
static PyObject *Dtool_BulletAllHitsRayResult_get_hit_40(PyObject *self, PyObject *arg) {
  BulletAllHitsRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletAllHitsRayResult)) {
    return nullptr;
  }
  // 1-BulletRayHit const BulletAllHitsRayResult::get_hit(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletRayHit const *return_value = new BulletRayHit const(((*(const BulletAllHitsRayResult*)local_this).get_hit)((int)arg_val));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletRayHit, true, true);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_hit(BulletAllHitsRayResult self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_get_hit_40_comment =
  "C++ Interface:\n"
  "get_hit(BulletAllHitsRayResult self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_get_hit_40_comment = nullptr;
#endif

static PyObject *Dtool_BulletAllHitsRayResult_from_pos_Getter(PyObject *self, void *) {
  const BulletAllHitsRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletAllHitsRayResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletAllHitsRayResult::get_from_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletAllHitsRayResult*)local_this).get_from_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletAllHitsRayResult_to_pos_Getter(PyObject *self, void *) {
  const BulletAllHitsRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletAllHitsRayResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletAllHitsRayResult::get_to_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletAllHitsRayResult*)local_this).get_to_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletAllHitsRayResult_closest_hit_fraction_Getter(PyObject *self, void *) {
  const BulletAllHitsRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletAllHitsRayResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletAllHitsRayResult::get_closest_hit_fraction(void) const
  PN_stdfloat return_value = ((*(const BulletAllHitsRayResult*)local_this).get_closest_hit_fraction)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * sequence length function for property BulletAllHitsRayResult::hits
 */
static Py_ssize_t Dtool_BulletAllHitsRayResult_hits_Len(PyObject *self) {
  BulletAllHitsRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletAllHitsRayResult, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_hits)();
}

/**
 * sequence getter for property BulletAllHitsRayResult::hits
 */
static PyObject *Dtool_BulletAllHitsRayResult_hits_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletAllHitsRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletAllHitsRayResult, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_hits)()) {
    PyErr_SetString(PyExc_IndexError, "BulletAllHitsRayResult.hits[] index out of range");
    return nullptr;
  }
  // 1-BulletRayHit const BulletAllHitsRayResult::get_hit(int idx) const
  BulletRayHit const *return_value = new BulletRayHit const(((*(const BulletAllHitsRayResult*)local_this).get_hit)(index));
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletRayHit, true, true);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_hit(BulletAllHitsRayResult self, index)\n");
  }
}

static PyObject *Dtool_BulletAllHitsRayResult_hits_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletAllHitsRayResult.hits");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletAllHitsRayResult_hits_Len;
    wrap->_getitem_func = &Dtool_BulletAllHitsRayResult_hits_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

static int Dtool_Init_BulletAllHitsRayResult(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletAllHitsRayResult_get_hits(PyObject *self, PyObject *) {
  BulletAllHitsRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletAllHitsRayResult, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_hits)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletAllHitsRayResult_get_hit_40(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletAllHitsRayResult(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletAllHitsRayResult) {
    printf("BulletAllHitsRayResult ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletAllHitsRayResult *local_this = (BulletAllHitsRayResult *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletAllHitsRayResult) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletAllHitsRayResult(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletAllHitsRayResult) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletShape
 */
/**
 * Python function wrapper for:
 * bool BulletShape::is_polyhedral(void) const
 */
static PyObject *Dtool_BulletShape_is_polyhedral_49(PyObject *self, PyObject *) {
  BulletShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletShape)) {
    return nullptr;
  }
  // 1-bool BulletShape::is_polyhedral(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_polyhedral)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_polyhedral_49_comment =
  "C++ Interface:\n"
  "is_polyhedral(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_polyhedral_49_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletShape::is_convex(void) const
 */
static PyObject *Dtool_BulletShape_is_convex_50(PyObject *self, PyObject *) {
  BulletShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletShape)) {
    return nullptr;
  }
  // 1-bool BulletShape::is_convex(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_convex)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_convex_50_comment =
  "C++ Interface:\n"
  "is_convex(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_convex_50_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletShape::is_convex_2d(void) const
 */
static PyObject *Dtool_BulletShape_is_convex_2d_51(PyObject *self, PyObject *) {
  BulletShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletShape)) {
    return nullptr;
  }
  // 1-bool BulletShape::is_convex_2d(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_convex_2d)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_convex_2d_51_comment =
  "C++ Interface:\n"
  "is_convex_2d(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_convex_2d_51_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletShape::is_concave(void) const
 */
static PyObject *Dtool_BulletShape_is_concave_52(PyObject *self, PyObject *) {
  BulletShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletShape)) {
    return nullptr;
  }
  // 1-bool BulletShape::is_concave(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_concave)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_concave_52_comment =
  "C++ Interface:\n"
  "is_concave(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_concave_52_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletShape::is_infinite(void) const
 */
static PyObject *Dtool_BulletShape_is_infinite_53(PyObject *self, PyObject *) {
  BulletShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletShape)) {
    return nullptr;
  }
  // 1-bool BulletShape::is_infinite(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_infinite)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_infinite_53_comment =
  "C++ Interface:\n"
  "is_infinite(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_infinite_53_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletShape::is_non_moving(void) const
 */
static PyObject *Dtool_BulletShape_is_non_moving_54(PyObject *self, PyObject *) {
  BulletShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletShape)) {
    return nullptr;
  }
  // 1-bool BulletShape::is_non_moving(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_non_moving)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_non_moving_54_comment =
  "C++ Interface:\n"
  "is_non_moving(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_non_moving_54_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletShape::is_soft_body(void) const
 */
static PyObject *Dtool_BulletShape_is_soft_body_55(PyObject *self, PyObject *) {
  BulletShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletShape)) {
    return nullptr;
  }
  // 1-bool BulletShape::is_soft_body(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_soft_body)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_soft_body_55_comment =
  "C++ Interface:\n"
  "is_soft_body(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_soft_body_55_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletShape::set_margin(PN_stdfloat margin)
 */
static PyObject *Dtool_BulletShape_set_margin_56(PyObject *self, PyObject *arg) {
  BulletShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletShape, (void **)&local_this, "BulletShape.set_margin")) {
    return nullptr;
  }
  // 1-void BulletShape::set_margin(PN_stdfloat margin)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_margin)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_margin(const BulletShape self, float margin)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_set_margin_56_comment =
  "C++ Interface:\n"
  "set_margin(const BulletShape self, float margin)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_set_margin_56_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * char const *BulletShape::get_name(void) const
 */
static PyObject *Dtool_BulletShape_get_name_57(PyObject *self, PyObject *) {
  BulletShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletShape)) {
    return nullptr;
  }
  // 1-char const *BulletShape::get_name(void) const
  char const *return_value = ((*(const BulletShape*)local_this).get_name)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_get_name_57_comment =
  "C++ Interface:\n"
  "get_name(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_get_name_57_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletShape::get_margin(void) const
 */
static PyObject *Dtool_BulletShape_get_margin_58(PyObject *self, PyObject *) {
  BulletShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletShape)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletShape::get_margin(void) const
  PN_stdfloat return_value = ((*(const BulletShape*)local_this).get_margin)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_get_margin_58_comment =
  "C++ Interface:\n"
  "get_margin(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_get_margin_58_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BoundingSphere BulletShape::get_shape_bounds(void) const
 */
static PyObject *Dtool_BulletShape_get_shape_bounds_59(PyObject *self, PyObject *) {
  BulletShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletShape)) {
    return nullptr;
  }
  // 1-BoundingSphere BulletShape::get_shape_bounds(void) const
  BoundingSphere *return_value = new BoundingSphere(((*(const BulletShape*)local_this).get_shape_bounds)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BoundingSphere, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_get_shape_bounds_59_comment =
  "C++ Interface:\n"
  "get_shape_bounds(BulletShape self)\n"
  "\n"
  "/**\n"
  " * Returns the current bounds of this collision shape.\n"
  " */";
#else
static const char *Dtool_BulletShape_get_shape_bounds_59_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletShape::get_class_type(void)
 */
static PyObject *Dtool_BulletShape_get_class_type_75(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_get_class_type_75_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletShape_get_class_type_75_comment = nullptr;
#endif

static PyObject *Dtool_BulletShape_polyhedral_Getter(PyObject *self, void *) {
  const BulletShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletShape::is_polyhedral(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_polyhedral)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletShape_convex_Getter(PyObject *self, void *) {
  const BulletShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletShape::is_convex(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_convex)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletShape_convex_2d_Getter(PyObject *self, void *) {
  const BulletShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletShape::is_convex_2d(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_convex_2d)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletShape_concave_Getter(PyObject *self, void *) {
  const BulletShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletShape::is_concave(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_concave)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletShape_infinite_Getter(PyObject *self, void *) {
  const BulletShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletShape::is_infinite(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_infinite)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletShape_non_moving_Getter(PyObject *self, void *) {
  const BulletShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletShape::is_non_moving(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_non_moving)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletShape_soft_body_Getter(PyObject *self, void *) {
  const BulletShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletShape::is_soft_body(void) const
  bool return_value = ((*(const BulletShape*)local_this).is_soft_body)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletShape_margin_Getter(PyObject *self, void *) {
  const BulletShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletShape::get_margin(void) const
  PN_stdfloat return_value = ((*(const BulletShape*)local_this).get_margin)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletShape_margin_Setter(PyObject *self, PyObject *arg, void *) {
  BulletShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletShape, (void **)&local_this, "BulletShape.margin")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete margin attribute");
    return -1;
  }
  // 1-void BulletShape::set_margin(PN_stdfloat margin)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_margin)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_margin(const BulletShape self, float margin)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletShape_name_Getter(PyObject *self, void *) {
  const BulletShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-char const *BulletShape::get_name(void) const
  char const *return_value = ((*(const BulletShape*)local_this).get_name)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletShape_shape_bounds_Getter(PyObject *self, void *) {
  const BulletShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-BoundingSphere BulletShape::get_shape_bounds(void) const
  BoundingSphere *return_value = new BoundingSphere(((*(const BulletShape*)local_this).get_shape_bounds)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BoundingSphere, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static int Dtool_Init_BulletShape(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletShape) {
    printf("BulletShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletShape *local_this = (BulletShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletShape*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletBaseCharacterControllerNode
 */
/**
 * Python function wrapper for:
 * static TypeHandle BulletBaseCharacterControllerNode::get_class_type(void)
 */
static PyObject *Dtool_BulletBaseCharacterControllerNode_get_class_type_77(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletBaseCharacterControllerNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletBaseCharacterControllerNode::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletBaseCharacterControllerNode_get_class_type_77_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletBaseCharacterControllerNode_get_class_type_77_comment = nullptr;
#endif

static int Dtool_Init_BulletBaseCharacterControllerNode(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletBaseCharacterControllerNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletBaseCharacterControllerNode) {
    printf("BulletBaseCharacterControllerNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletBaseCharacterControllerNode *local_this = (BulletBaseCharacterControllerNode *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletBaseCharacterControllerNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletBaseCharacterControllerNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletBaseCharacterControllerNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletBaseCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletBaseCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletBaseCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletBaseCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletBaseCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletBaseCharacterControllerNode*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletBodyNode
 */
/**
 * Python function wrapper for:
 * void BulletBodyNode::add_shape(BulletShape *shape, TransformState const *xform = TransformState::make_identity())
 */
static PyObject *Dtool_BulletBodyNode_add_shape_80(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.add_shape")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::add_shape(BulletShape *shape, TransformState const *xform = TransformState::make_identity())
  PyObject *param1;
  PyObject *param2 = nullptr;
  static const char *keyword_list[] = {"shape", "xform", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:add_shape", (char **)keyword_list, &param1, &param2)) {
    BulletShape *param1_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletShape, 1, "BulletBodyNode.add_shape", false, true);
    TransformState const *param2_this;
    if (param2 == nullptr) {
      param2_this = TransformState::make_identity();
    } else {
      param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletBodyNode.add_shape", true, true);
    }
    if (param1_this != nullptr && (param2 == nullptr || param2_this != nullptr)) {
      ((*local_this).add_shape)(param1_this, param2_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_shape(const BulletBodyNode self, BulletShape shape, const TransformState xform)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_add_shape_80_comment =
  "C++ Interface:\n"
  "add_shape(const BulletBodyNode self, BulletShape shape, const TransformState xform)\n"
  "\n"
  "// Shapes\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_add_shape_80_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::remove_shape(BulletShape *shape)
 */
static PyObject *Dtool_BulletBodyNode_remove_shape_81(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.remove_shape")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::remove_shape(BulletShape *shape)
  BulletShape *arg_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletShape, 1, "BulletBodyNode.remove_shape", false, true);
  if (arg_this != nullptr) {
    ((*local_this).remove_shape)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_shape(const BulletBodyNode self, BulletShape shape)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_remove_shape_81_comment =
  "C++ Interface:\n"
  "remove_shape(const BulletBodyNode self, BulletShape shape)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_remove_shape_81_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletBodyNode::get_num_shapes(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_num_shapes_82(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-int BulletBodyNode::get_num_shapes(void) const
  int return_value = ((*(const BulletBodyNode*)local_this).get_num_shapes)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_num_shapes_82_comment =
  "C++ Interface:\n"
  "get_num_shapes(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_num_shapes_82_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletShape *BulletBodyNode::get_shape(int idx) const
 */
static PyObject *Dtool_BulletBodyNode_get_shape_83(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-BulletShape *BulletBodyNode::get_shape(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletShape *return_value = ((*(const BulletBodyNode*)local_this).get_shape)((int)arg_val);
    if (return_value != nullptr) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != nullptr) {
        unref_delete(return_value);
      }
      return nullptr;
    }
    if (return_value == nullptr) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletShape, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_shape(BulletBodyNode self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_shape_83_comment =
  "C++ Interface:\n"
  "get_shape(BulletBodyNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_shape_83_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletBodyNode::get_shape_pos(int idx) const
 */
static PyObject *Dtool_BulletBodyNode_get_shape_pos_85(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-LPoint3 BulletBodyNode::get_shape_pos(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    LPoint3 *return_value = new LPoint3(((*(const BulletBodyNode*)local_this).get_shape_pos)((int)arg_val));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_shape_pos(BulletBodyNode self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_shape_pos_85_comment =
  "C++ Interface:\n"
  "get_shape_pos(BulletBodyNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_shape_pos_85_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LMatrix4 BulletBodyNode::get_shape_mat(int idx) const
 */
static PyObject *Dtool_BulletBodyNode_get_shape_mat_86(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-LMatrix4 BulletBodyNode::get_shape_mat(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    LMatrix4 *return_value = new LMatrix4(((*(const BulletBodyNode*)local_this).get_shape_mat)((int)arg_val));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LMatrix4f, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_shape_mat(BulletBodyNode self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_shape_mat_86_comment =
  "C++ Interface:\n"
  "get_shape_mat(BulletBodyNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_shape_mat_86_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * ConstPointerTo< TransformState > BulletBodyNode::get_shape_transform(int idx) const
 */
static PyObject *Dtool_BulletBodyNode_get_shape_transform_87(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-ConstPointerTo< TransformState > BulletBodyNode::get_shape_transform(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    ConstPointerTo< TransformState > return_value = ((*(const BulletBodyNode*)local_this).get_shape_transform)((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return nullptr;
    }
    // Transfer ownership of return_value.
    TransformState const *return_ptr = return_value.p();
    return_value.cheat() = nullptr;
    return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_shape_transform(BulletBodyNode self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_shape_transform_87_comment =
  "C++ Interface:\n"
  "get_shape_transform(BulletBodyNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_shape_transform_87_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BoundingSphere BulletBodyNode::get_shape_bounds(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_shape_bounds_88(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-BoundingSphere BulletBodyNode::get_shape_bounds(void) const
  BoundingSphere *return_value = new BoundingSphere(((*(const BulletBodyNode*)local_this).get_shape_bounds)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BoundingSphere, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_shape_bounds_88_comment =
  "C++ Interface:\n"
  "get_shape_bounds(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " * Returns the current bounds of all collision shapes owned by this body.\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_shape_bounds_88_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::add_shapes_from_collision_solids(CollisionNode *cnode)
 */
static PyObject *Dtool_BulletBodyNode_add_shapes_from_collision_solids_89(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.add_shapes_from_collision_solids")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::add_shapes_from_collision_solids(CollisionNode *cnode)
  CollisionNode *arg_this = (CollisionNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_CollisionNode, 1, "BulletBodyNode.add_shapes_from_collision_solids", false, true);
  if (arg_this != nullptr) {
    ((*local_this).add_shapes_from_collision_solids)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_shapes_from_collision_solids(const BulletBodyNode self, CollisionNode cnode)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_add_shapes_from_collision_solids_89_comment =
  "C++ Interface:\n"
  "add_shapes_from_collision_solids(const BulletBodyNode self, CollisionNode cnode)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_add_shapes_from_collision_solids_89_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletBodyNode::is_static(void) const
 */
static PyObject *Dtool_BulletBodyNode_is_static_90(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-bool BulletBodyNode::is_static(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).is_static)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_is_static_90_comment =
  "C++ Interface:\n"
  "is_static(BulletBodyNode self)\n"
  "\n"
  "// Static and kinematic\n"
  "\n"
  "// Static and kinematic\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_is_static_90_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletBodyNode::is_kinematic(void) const
 */
static PyObject *Dtool_BulletBodyNode_is_kinematic_91(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-bool BulletBodyNode::is_kinematic(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).is_kinematic)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_is_kinematic_91_comment =
  "C++ Interface:\n"
  "is_kinematic(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_is_kinematic_91_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::set_static(bool value)
 */
static PyObject *Dtool_BulletBodyNode_set_static_92(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_static")) {
    return nullptr;
  }
  // 1-inline void BulletBodyNode::set_static(bool value)
  ((*local_this).set_static)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_static(const BulletBodyNode self, bool value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_static_92_comment =
  "C++ Interface:\n"
  "set_static(const BulletBodyNode self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_static_92_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::set_kinematic(bool value)
 */
static PyObject *Dtool_BulletBodyNode_set_kinematic_93(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_kinematic")) {
    return nullptr;
  }
  // 1-inline void BulletBodyNode::set_kinematic(bool value)
  ((*local_this).set_kinematic)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_kinematic(const BulletBodyNode self, bool value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_kinematic_93_comment =
  "C++ Interface:\n"
  "set_kinematic(const BulletBodyNode self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_kinematic_93_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::set_into_collide_mask(CollideMask mask)
 */
static PyObject *Dtool_BulletBodyNode_set_into_collide_mask_94(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_into_collide_mask")) {
    return nullptr;
  }
  // 1-inline void BulletBodyNode::set_into_collide_mask(CollideMask mask)
  BitMask< uint32_t, 32 > arg_local;
  CollideMask *arg_this = Dtool_Coerce_BitMask_uint32_t_32(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletBodyNode.set_into_collide_mask", "BitMask");
  }
  ((*local_this).set_into_collide_mask)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_into_collide_mask(const BulletBodyNode self, BitMask mask)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_into_collide_mask_94_comment =
  "C++ Interface:\n"
  "set_into_collide_mask(const BulletBodyNode self, BitMask mask)\n"
  "\n"
  "// Contacts\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_into_collide_mask_94_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::notify_collisions(bool value)
 */
static PyObject *Dtool_BulletBodyNode_notify_collisions_95(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.notify_collisions")) {
    return nullptr;
  }
  // 1-inline void BulletBodyNode::notify_collisions(bool value)
  ((*local_this).notify_collisions)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "notify_collisions(const BulletBodyNode self, bool value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_notify_collisions_95_comment =
  "C++ Interface:\n"
  "notify_collisions(const BulletBodyNode self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_notify_collisions_95_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletBodyNode::notifies_collisions(void) const
 */
static PyObject *Dtool_BulletBodyNode_notifies_collisions_96(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-inline bool BulletBodyNode::notifies_collisions(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).notifies_collisions)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_notifies_collisions_96_comment =
  "C++ Interface:\n"
  "notifies_collisions(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_notifies_collisions_96_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::set_collision_response(bool value)
 */
static PyObject *Dtool_BulletBodyNode_set_collision_response_97(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_collision_response")) {
    return nullptr;
  }
  // 1-inline void BulletBodyNode::set_collision_response(bool value)
  ((*local_this).set_collision_response)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_collision_response(const BulletBodyNode self, bool value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_collision_response_97_comment =
  "C++ Interface:\n"
  "set_collision_response(const BulletBodyNode self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_collision_response_97_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletBodyNode::get_collision_response(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_collision_response_98(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-inline bool BulletBodyNode::get_collision_response(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).get_collision_response)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_collision_response_98_comment =
  "C++ Interface:\n"
  "get_collision_response(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_collision_response_98_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletBodyNode::check_collision_with(PandaNode *node)
 */
static PyObject *Dtool_BulletBodyNode_check_collision_with_99(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.check_collision_with")) {
    return nullptr;
  }
  // 1-bool BulletBodyNode::check_collision_with(PandaNode *node)
  PandaNode *arg_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_PandaNode, 1, "BulletBodyNode.check_collision_with", false, true);
  if (arg_this != nullptr) {
    bool return_value = ((*local_this).check_collision_with)(arg_this);
    return Dtool_Return_Bool(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "check_collision_with(const BulletBodyNode self, PandaNode node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_check_collision_with_99_comment =
  "C++ Interface:\n"
  "check_collision_with(const BulletBodyNode self, PandaNode node)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_check_collision_with_99_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletBodyNode::has_contact_response(void) const
 */
static PyObject *Dtool_BulletBodyNode_has_contact_response_100(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-bool BulletBodyNode::has_contact_response(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).has_contact_response)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_has_contact_response_100_comment =
  "C++ Interface:\n"
  "has_contact_response(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_has_contact_response_100_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletBodyNode::get_contact_processing_threshold(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_contact_processing_threshold_101(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletBodyNode::get_contact_processing_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletBodyNode*)local_this).get_contact_processing_threshold)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_contact_processing_threshold_101_comment =
  "C++ Interface:\n"
  "get_contact_processing_threshold(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_contact_processing_threshold_101_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_contact_processing_threshold(PN_stdfloat threshold)
 */
static PyObject *Dtool_BulletBodyNode_set_contact_processing_threshold_102(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_contact_processing_threshold")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::set_contact_processing_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_contact_processing_threshold)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_contact_processing_threshold(const BulletBodyNode self, float threshold)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_contact_processing_threshold_102_comment =
  "C++ Interface:\n"
  "set_contact_processing_threshold(const BulletBodyNode self, float threshold)\n"
  "\n"
  "/**\n"
  " * The constraint solver can discard solving contacts, if the distance is\n"
  " * above this threshold.\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_contact_processing_threshold_102_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletBodyNode::is_active(void) const
 */
static PyObject *Dtool_BulletBodyNode_is_active_103(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-bool BulletBodyNode::is_active(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).is_active)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_is_active_103_comment =
  "C++ Interface:\n"
  "is_active(BulletBodyNode self)\n"
  "\n"
  "// Deactivation\n"
  "\n"
  "// Deactivation\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_is_active_103_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_active(bool active, bool force = false)
 */
static PyObject *Dtool_BulletBodyNode_set_active_104(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_active")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::set_active(bool active, bool force = false)
  PyObject *param1;
  PyObject *param2 = Py_False;
  static const char *keyword_list[] = {"active", "force", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:set_active", (char **)keyword_list, &param1, &param2)) {
    ((*local_this).set_active)((PyObject_IsTrue(param1) != 0), (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_active(const BulletBodyNode self, bool active, bool force)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_active_104_comment =
  "C++ Interface:\n"
  "set_active(const BulletBodyNode self, bool active, bool force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_active_104_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::force_active(bool active)
 */
static PyObject *Dtool_BulletBodyNode_force_active_105(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.force_active")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::force_active(bool active)
  ((*local_this).force_active)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "force_active(const BulletBodyNode self, bool active)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_force_active_105_comment =
  "C++ Interface:\n"
  "force_active(const BulletBodyNode self, bool active)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_force_active_105_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_deactivation_time(PN_stdfloat dt)
 */
static PyObject *Dtool_BulletBodyNode_set_deactivation_time_106(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_deactivation_time")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::set_deactivation_time(PN_stdfloat dt)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_deactivation_time)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_deactivation_time(const BulletBodyNode self, float dt)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_deactivation_time_106_comment =
  "C++ Interface:\n"
  "set_deactivation_time(const BulletBodyNode self, float dt)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_deactivation_time_106_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletBodyNode::get_deactivation_time(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_deactivation_time_107(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletBodyNode::get_deactivation_time(void) const
  PN_stdfloat return_value = ((*(const BulletBodyNode*)local_this).get_deactivation_time)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_deactivation_time_107_comment =
  "C++ Interface:\n"
  "get_deactivation_time(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_deactivation_time_107_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_deactivation_enabled(bool enabled)
 */
static PyObject *Dtool_BulletBodyNode_set_deactivation_enabled_108(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_deactivation_enabled")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::set_deactivation_enabled(bool enabled)
  ((*local_this).set_deactivation_enabled)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_deactivation_enabled(const BulletBodyNode self, bool enabled)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_deactivation_enabled_108_comment =
  "C++ Interface:\n"
  "set_deactivation_enabled(const BulletBodyNode self, bool enabled)\n"
  "\n"
  "/**\n"
  " * If true, this object will be deactivated after a certain amount of time has\n"
  " * passed without movement.  If false, the object will always remain active.\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_deactivation_enabled_108_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletBodyNode::is_deactivation_enabled(void) const
 */
static PyObject *Dtool_BulletBodyNode_is_deactivation_enabled_109(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-bool BulletBodyNode::is_deactivation_enabled(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).is_deactivation_enabled)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_is_deactivation_enabled_109_comment =
  "C++ Interface:\n"
  "is_deactivation_enabled(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_is_deactivation_enabled_109_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::set_debug_enabled(bool const enabled)
 */
static PyObject *Dtool_BulletBodyNode_set_debug_enabled_110(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_debug_enabled")) {
    return nullptr;
  }
  // 1-inline void BulletBodyNode::set_debug_enabled(bool const enabled)
  ((*local_this).set_debug_enabled)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_debug_enabled(const BulletBodyNode self, bool enabled)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_debug_enabled_110_comment =
  "C++ Interface:\n"
  "set_debug_enabled(const BulletBodyNode self, bool enabled)\n"
  "\n"
  "// Debug Visualisation\n"
  "\n"
  "// Debug Visualisation\n"
  "\n"
  "/**\n"
  " * Enables or disables the debug visualisation for this collision object.  By\n"
  " * default the debug visualisation is enabled.\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_debug_enabled_110_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletBodyNode::is_debug_enabled(void) const
 */
static PyObject *Dtool_BulletBodyNode_is_debug_enabled_111(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-inline bool BulletBodyNode::is_debug_enabled(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).is_debug_enabled)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_is_debug_enabled_111_comment =
  "C++ Interface:\n"
  "is_debug_enabled(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " * Returns TRUE if the debug visualisation is enabled for this collision\n"
  " * object, and FALSE if the debug visualisation is disabled.\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_is_debug_enabled_111_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletBodyNode::get_restitution(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_restitution_112(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletBodyNode::get_restitution(void) const
  PN_stdfloat return_value = ((*(const BulletBodyNode*)local_this).get_restitution)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_restitution_112_comment =
  "C++ Interface:\n"
  "get_restitution(BulletBodyNode self)\n"
  "\n"
  "// Friction and Restitution\n"
  "\n"
  "// Friction and Restitution\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_restitution_112_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_restitution(PN_stdfloat restitution)
 */
static PyObject *Dtool_BulletBodyNode_set_restitution_113(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_restitution")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::set_restitution(PN_stdfloat restitution)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_restitution)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_restitution(const BulletBodyNode self, float restitution)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_restitution_113_comment =
  "C++ Interface:\n"
  "set_restitution(const BulletBodyNode self, float restitution)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_restitution_113_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletBodyNode::get_friction(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_friction_114(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletBodyNode::get_friction(void) const
  PN_stdfloat return_value = ((*(const BulletBodyNode*)local_this).get_friction)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_friction_114_comment =
  "C++ Interface:\n"
  "get_friction(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_friction_114_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_friction(PN_stdfloat friction)
 */
static PyObject *Dtool_BulletBodyNode_set_friction_115(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_friction")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::set_friction(PN_stdfloat friction)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_friction)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_friction(const BulletBodyNode self, float friction)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_friction_115_comment =
  "C++ Interface:\n"
  "set_friction(const BulletBodyNode self, float friction)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_friction_115_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletBodyNode::has_anisotropic_friction(void) const
 */
static PyObject *Dtool_BulletBodyNode_has_anisotropic_friction_116(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-bool BulletBodyNode::has_anisotropic_friction(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).has_anisotropic_friction)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_has_anisotropic_friction_116_comment =
  "C++ Interface:\n"
  "has_anisotropic_friction(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_has_anisotropic_friction_116_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_anisotropic_friction(LVecBase3 const &friction)
 */
static PyObject *Dtool_BulletBodyNode_set_anisotropic_friction_117(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_anisotropic_friction")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::set_anisotropic_friction(LVecBase3 const &friction)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletBodyNode.set_anisotropic_friction", "LVecBase3f");
  }
  ((*local_this).set_anisotropic_friction)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_anisotropic_friction(const BulletBodyNode self, const LVecBase3f friction)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_anisotropic_friction_117_comment =
  "C++ Interface:\n"
  "set_anisotropic_friction(const BulletBodyNode self, const LVecBase3f friction)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_anisotropic_friction_117_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVecBase3 BulletBodyNode::get_anisotropic_friction(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_anisotropic_friction_118(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-LVecBase3 BulletBodyNode::get_anisotropic_friction(void) const
  LVecBase3 *return_value = new LVecBase3(((*(const BulletBodyNode*)local_this).get_anisotropic_friction)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_anisotropic_friction_118_comment =
  "C++ Interface:\n"
  "get_anisotropic_friction(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_anisotropic_friction_118_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletBodyNode::get_ccd_swept_sphere_radius(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_119(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletBodyNode::get_ccd_swept_sphere_radius(void) const
  PN_stdfloat return_value = ((*(const BulletBodyNode*)local_this).get_ccd_swept_sphere_radius)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_119_comment =
  "C++ Interface:\n"
  "get_ccd_swept_sphere_radius(BulletBodyNode self)\n"
  "\n"
  "// CCD\n"
  "\n"
  "// CCD\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_119_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletBodyNode::get_ccd_motion_threshold(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_ccd_motion_threshold_120(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletBodyNode::get_ccd_motion_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletBodyNode*)local_this).get_ccd_motion_threshold)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_ccd_motion_threshold_120_comment =
  "C++ Interface:\n"
  "get_ccd_motion_threshold(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_ccd_motion_threshold_120_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_ccd_swept_sphere_radius(PN_stdfloat radius)
 */
static PyObject *Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_121(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_ccd_swept_sphere_radius")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::set_ccd_swept_sphere_radius(PN_stdfloat radius)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_ccd_swept_sphere_radius)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_ccd_swept_sphere_radius(const BulletBodyNode self, float radius)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_121_comment =
  "C++ Interface:\n"
  "set_ccd_swept_sphere_radius(const BulletBodyNode self, float radius)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_121_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_ccd_motion_threshold(PN_stdfloat threshold)
 */
static PyObject *Dtool_BulletBodyNode_set_ccd_motion_threshold_122(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_ccd_motion_threshold")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::set_ccd_motion_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_ccd_motion_threshold)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_ccd_motion_threshold(const BulletBodyNode self, float threshold)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_ccd_motion_threshold_122_comment =
  "C++ Interface:\n"
  "set_ccd_motion_threshold(const BulletBodyNode self, float threshold)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_ccd_motion_threshold_122_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_transform_dirty(void)
 */
static PyObject *Dtool_BulletBodyNode_set_transform_dirty_123(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_transform_dirty")) {
    return nullptr;
  }
  // 1-void BulletBodyNode::set_transform_dirty(void)
  ((*local_this).set_transform_dirty)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_transform_dirty_123_comment =
  "C++ Interface:\n"
  "set_transform_dirty(const BulletBodyNode self)\n"
  "\n"
  "// Special\n"
  "\n"
  "/**\n"
  " * This method enforces an update of the Bullet transform, that is copies the\n"
  " * scene graph transform to the Bullet transform.  This is achieved by alling\n"
  " * the protected PandaNode hook 'transform_changed'.\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_transform_dirty_123_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletBodyNode::get_class_type(void)
 */
static PyObject *Dtool_BulletBodyNode_get_class_type_150(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletBodyNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletBodyNode::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_class_type_150_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletBodyNode_get_class_type_150_comment = nullptr;
#endif

/**
 * sequence length function for property BulletBodyNode::shapes
 */
static Py_ssize_t Dtool_BulletBodyNode_shapes_Len(PyObject *self) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_shapes)();
}

/**
 * sequence getter for property BulletBodyNode::shapes
 */
static PyObject *Dtool_BulletBodyNode_shapes_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_shapes)()) {
    PyErr_SetString(PyExc_IndexError, "BulletBodyNode.shapes[] index out of range");
    return nullptr;
  }
  // 1-BulletShape *BulletBodyNode::get_shape(int idx) const
  BulletShape *return_value = ((*(const BulletBodyNode*)local_this).get_shape)(index);
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_shape(BulletBodyNode self, index)\n");
  }
}

static PyObject *Dtool_BulletBodyNode_shapes_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletBodyNode.shapes");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletBodyNode_shapes_Len;
    wrap->_getitem_func = &Dtool_BulletBodyNode_shapes_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * sequence length function for property BulletBodyNode::shape_pos
 */
static Py_ssize_t Dtool_BulletBodyNode_shape_pos_Len(PyObject *self) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_shapes)();
}

/**
 * sequence getter for property BulletBodyNode::shape_pos
 */
static PyObject *Dtool_BulletBodyNode_shape_pos_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_shapes)()) {
    PyErr_SetString(PyExc_IndexError, "BulletBodyNode.shape_pos[] index out of range");
    return nullptr;
  }
  // 1-LPoint3 BulletBodyNode::get_shape_pos(int idx) const
  LPoint3 *return_value = new LPoint3(((*(const BulletBodyNode*)local_this).get_shape_pos)(index));
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_shape_pos(BulletBodyNode self, index)\n");
  }
}

static PyObject *Dtool_BulletBodyNode_shape_pos_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletBodyNode.shape_pos");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletBodyNode_shape_pos_Len;
    wrap->_getitem_func = &Dtool_BulletBodyNode_shape_pos_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * sequence length function for property BulletBodyNode::shape_mat
 */
static Py_ssize_t Dtool_BulletBodyNode_shape_mat_Len(PyObject *self) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_shapes)();
}

/**
 * sequence getter for property BulletBodyNode::shape_mat
 */
static PyObject *Dtool_BulletBodyNode_shape_mat_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_shapes)()) {
    PyErr_SetString(PyExc_IndexError, "BulletBodyNode.shape_mat[] index out of range");
    return nullptr;
  }
  // 1-LMatrix4 BulletBodyNode::get_shape_mat(int idx) const
  LMatrix4 *return_value = new LMatrix4(((*(const BulletBodyNode*)local_this).get_shape_mat)(index));
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LMatrix4f, true, false);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_shape_mat(BulletBodyNode self, index)\n");
  }
}

static PyObject *Dtool_BulletBodyNode_shape_mat_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletBodyNode.shape_mat");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletBodyNode_shape_mat_Len;
    wrap->_getitem_func = &Dtool_BulletBodyNode_shape_mat_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * sequence length function for property BulletBodyNode::shape_transform
 */
static Py_ssize_t Dtool_BulletBodyNode_shape_transform_Len(PyObject *self) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_shapes)();
}

/**
 * sequence getter for property BulletBodyNode::shape_transform
 */
static PyObject *Dtool_BulletBodyNode_shape_transform_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_shapes)()) {
    PyErr_SetString(PyExc_IndexError, "BulletBodyNode.shape_transform[] index out of range");
    return nullptr;
  }
  // 1-ConstPointerTo< TransformState > BulletBodyNode::get_shape_transform(int idx) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletBodyNode*)local_this).get_shape_transform)(index);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_shape_transform(BulletBodyNode self, index)\n");
  }
}

static PyObject *Dtool_BulletBodyNode_shape_transform_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletBodyNode.shape_transform");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletBodyNode_shape_transform_Len;
    wrap->_getitem_func = &Dtool_BulletBodyNode_shape_transform_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

static PyObject *Dtool_BulletBodyNode_shape_bounds_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-BoundingSphere BulletBodyNode::get_shape_bounds(void) const
  BoundingSphere *return_value = new BoundingSphere(((*(const BulletBodyNode*)local_this).get_shape_bounds)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BoundingSphere, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletBodyNode_static_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletBodyNode::is_static(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).is_static)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletBodyNode_static_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.static")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete static attribute");
    return -1;
  }
  // 1-inline void BulletBodyNode::set_static(bool value)
  ((*local_this).set_static)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_static(const BulletBodyNode self, bool value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletBodyNode_kinematic_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletBodyNode::is_kinematic(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).is_kinematic)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletBodyNode_kinematic_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.kinematic")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete kinematic attribute");
    return -1;
  }
  // 1-inline void BulletBodyNode::set_kinematic(bool value)
  ((*local_this).set_kinematic)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_kinematic(const BulletBodyNode self, bool value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletBodyNode_collision_notification_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline bool BulletBodyNode::notifies_collisions(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).notifies_collisions)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletBodyNode_collision_notification_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.collision_notification")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete collision_notification attribute");
    return -1;
  }
  // 1-inline void BulletBodyNode::notify_collisions(bool value)
  ((*local_this).notify_collisions)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "notify_collisions(const BulletBodyNode self, bool value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletBodyNode_collision_response_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline bool BulletBodyNode::get_collision_response(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).get_collision_response)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletBodyNode_collision_response_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.collision_response")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete collision_response attribute");
    return -1;
  }
  // 1-inline void BulletBodyNode::set_collision_response(bool value)
  ((*local_this).set_collision_response)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_collision_response(const BulletBodyNode self, bool value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletBodyNode_contact_response_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletBodyNode::has_contact_response(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).has_contact_response)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletBodyNode_contact_processing_threshold_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletBodyNode::get_contact_processing_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletBodyNode*)local_this).get_contact_processing_threshold)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletBodyNode_contact_processing_threshold_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.contact_processing_threshold")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete contact_processing_threshold attribute");
    return -1;
  }
  // 1-void BulletBodyNode::set_contact_processing_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_contact_processing_threshold)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_contact_processing_threshold(const BulletBodyNode self, float threshold)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletBodyNode_active_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletBodyNode::is_active(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).is_active)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletBodyNode_active_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.active")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete active attribute");
    return -1;
  }
  // 1-void BulletBodyNode::force_active(bool active)
  ((*local_this).force_active)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "force_active(const BulletBodyNode self, bool active)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletBodyNode_deactivation_time_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletBodyNode::get_deactivation_time(void) const
  PN_stdfloat return_value = ((*(const BulletBodyNode*)local_this).get_deactivation_time)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletBodyNode_deactivation_time_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.deactivation_time")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete deactivation_time attribute");
    return -1;
  }
  // 1-void BulletBodyNode::set_deactivation_time(PN_stdfloat dt)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_deactivation_time)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_deactivation_time(const BulletBodyNode self, float dt)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletBodyNode_deactivation_enabled_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletBodyNode::is_deactivation_enabled(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).is_deactivation_enabled)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletBodyNode_deactivation_enabled_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.deactivation_enabled")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete deactivation_enabled attribute");
    return -1;
  }
  // 1-void BulletBodyNode::set_deactivation_enabled(bool enabled)
  ((*local_this).set_deactivation_enabled)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_deactivation_enabled(const BulletBodyNode self, bool enabled)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletBodyNode_debug_enabled_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline bool BulletBodyNode::is_debug_enabled(void) const
  bool return_value = ((*(const BulletBodyNode*)local_this).is_debug_enabled)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletBodyNode_debug_enabled_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.debug_enabled")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete debug_enabled attribute");
    return -1;
  }
  // 1-inline void BulletBodyNode::set_debug_enabled(bool const enabled)
  ((*local_this).set_debug_enabled)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_debug_enabled(const BulletBodyNode self, bool enabled)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletBodyNode_restitution_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletBodyNode::get_restitution(void) const
  PN_stdfloat return_value = ((*(const BulletBodyNode*)local_this).get_restitution)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletBodyNode_restitution_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.restitution")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete restitution attribute");
    return -1;
  }
  // 1-void BulletBodyNode::set_restitution(PN_stdfloat restitution)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_restitution)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_restitution(const BulletBodyNode self, float restitution)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletBodyNode_friction_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletBodyNode::get_friction(void) const
  PN_stdfloat return_value = ((*(const BulletBodyNode*)local_this).get_friction)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletBodyNode_friction_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.friction")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete friction attribute");
    return -1;
  }
  // 1-void BulletBodyNode::set_friction(PN_stdfloat friction)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_friction)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_friction(const BulletBodyNode self, float friction)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletBodyNode_anisotropic_friction_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVecBase3 BulletBodyNode::get_anisotropic_friction(void) const
  LVecBase3 *return_value = new LVecBase3(((*(const BulletBodyNode*)local_this).get_anisotropic_friction)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

static int Dtool_BulletBodyNode_anisotropic_friction_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.anisotropic_friction")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete anisotropic_friction attribute");
    return -1;
  }
  // 1-void BulletBodyNode::set_anisotropic_friction(LVecBase3 const &friction)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletBodyNode.set_anisotropic_friction", "LVecBase3f");
    return -1;
  }
  ((*local_this).set_anisotropic_friction)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_anisotropic_friction(const BulletBodyNode self, const LVecBase3f friction)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletBodyNode_ccd_swept_sphere_radius_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletBodyNode::get_ccd_swept_sphere_radius(void) const
  PN_stdfloat return_value = ((*(const BulletBodyNode*)local_this).get_ccd_swept_sphere_radius)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletBodyNode_ccd_swept_sphere_radius_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.ccd_swept_sphere_radius")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete ccd_swept_sphere_radius attribute");
    return -1;
  }
  // 1-void BulletBodyNode::set_ccd_swept_sphere_radius(PN_stdfloat radius)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_ccd_swept_sphere_radius)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_ccd_swept_sphere_radius(const BulletBodyNode self, float radius)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletBodyNode_ccd_motion_threshold_Getter(PyObject *self, void *) {
  const BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletBodyNode::get_ccd_motion_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletBodyNode*)local_this).get_ccd_motion_threshold)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletBodyNode_ccd_motion_threshold_Setter(PyObject *self, PyObject *arg, void *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.ccd_motion_threshold")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete ccd_motion_threshold attribute");
    return -1;
  }
  // 1-void BulletBodyNode::set_ccd_motion_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_ccd_motion_threshold)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_ccd_motion_threshold(const BulletBodyNode self, float threshold)\n");
  }
  return -1;
}

static int Dtool_Init_BulletBodyNode(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletBodyNode_get_shapes(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_shapes)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletBodyNode_get_shape_83(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletBodyNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletBodyNode) {
    printf("BulletBodyNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletBodyNode *local_this = (BulletBodyNode *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletBodyNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletBodyNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletBodyNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletBodyNode*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletBoxShape
 */
/**
 * Python function wrapper for:
 * LVecBase3 BulletBoxShape::get_half_extents_without_margin(void) const
 */
static PyObject *Dtool_BulletBoxShape_get_half_extents_without_margin_153(PyObject *self, PyObject *) {
  BulletBoxShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBoxShape)) {
    return nullptr;
  }
  // 1-LVecBase3 BulletBoxShape::get_half_extents_without_margin(void) const
  LVecBase3 *return_value = new LVecBase3(((*(const BulletBoxShape*)local_this).get_half_extents_without_margin)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletBoxShape_get_half_extents_without_margin_153_comment =
  "C++ Interface:\n"
  "get_half_extents_without_margin(BulletBoxShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBoxShape_get_half_extents_without_margin_153_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVecBase3 BulletBoxShape::get_half_extents_with_margin(void) const
 */
static PyObject *Dtool_BulletBoxShape_get_half_extents_with_margin_154(PyObject *self, PyObject *) {
  BulletBoxShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletBoxShape)) {
    return nullptr;
  }
  // 1-LVecBase3 BulletBoxShape::get_half_extents_with_margin(void) const
  LVecBase3 *return_value = new LVecBase3(((*(const BulletBoxShape*)local_this).get_half_extents_with_margin)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletBoxShape_get_half_extents_with_margin_154_comment =
  "C++ Interface:\n"
  "get_half_extents_with_margin(BulletBoxShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBoxShape_get_half_extents_with_margin_154_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static BulletBoxShape *BulletBoxShape::make_from_solid(CollisionBox const *solid)
 */
static PyObject *Dtool_BulletBoxShape_make_from_solid_155(PyObject *, PyObject *arg) {
  // 1-static BulletBoxShape *BulletBoxShape::make_from_solid(CollisionBox const *solid)
  CollisionBox const *arg_this = (CollisionBox *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_CollisionBox, 0, "BulletBoxShape.make_from_solid", true, true);
  if (arg_this != nullptr) {
    BulletBoxShape *return_value = (BulletBoxShape::make_from_solid)(arg_this);
    if (return_value != nullptr) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != nullptr) {
        unref_delete(return_value);
      }
      return nullptr;
    }
    if (return_value == nullptr) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletBoxShape, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_from_solid(const CollisionBox solid)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletBoxShape_make_from_solid_155_comment =
  "C++ Interface:\n"
  "make_from_solid(const CollisionBox solid)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBoxShape_make_from_solid_155_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletBoxShape::get_class_type(void)
 */
static PyObject *Dtool_BulletBoxShape_get_class_type_158(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletBoxShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletBoxShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletBoxShape_get_class_type_158_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletBoxShape_get_class_type_158_comment = nullptr;
#endif

static PyObject *Dtool_BulletBoxShape_half_extents_with_margin_Getter(PyObject *self, void *) {
  const BulletBoxShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBoxShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVecBase3 BulletBoxShape::get_half_extents_with_margin(void) const
  LVecBase3 *return_value = new LVecBase3(((*(const BulletBoxShape*)local_this).get_half_extents_with_margin)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

static PyObject *Dtool_BulletBoxShape_half_extents_without_margin_Getter(PyObject *self, void *) {
  const BulletBoxShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBoxShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVecBase3 BulletBoxShape::get_half_extents_without_margin(void) const
  LVecBase3 *return_value = new LVecBase3(((*(const BulletBoxShape*)local_this).get_half_extents_without_margin)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

/**
 * Python function wrapper for:
 * BulletBoxShape::BulletBoxShape(BulletBoxShape const &copy)
 * explicit BulletBoxShape::BulletBoxShape(LVecBase3 const &halfExtents)
 */
static int Dtool_Init_BulletBoxShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletBoxShape() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  {
    // -2 BulletBoxShape::BulletBoxShape(BulletBoxShape const &copy)
    PyObject *param0;
    if (Dtool_ExtractArg(&param0, args, kwds, "copy")) {
      BulletBoxShape const *param0_this = nullptr;
      DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_BulletBoxShape);
      if (param0_this != nullptr) {
        BulletBoxShape *return_value = new BulletBoxShape(*param0_this);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletBoxShape, true, false);
      }
    }
  }

  // No coercion possible: BulletBoxShape::BulletBoxShape(BulletBoxShape const &copy)
  {
    // -2 explicit BulletBoxShape::BulletBoxShape(LVecBase3 const &halfExtents)
    PyObject *param0;
    if (Dtool_ExtractArg(&param0, args, kwds, "halfExtents")) {
      LVecBase3f param0_local;
      LVecBase3 const *param0_this = Dtool_Coerce_LVecBase3f(param0, param0_local);
      if ((param0_this != nullptr)) {
        BulletBoxShape *return_value = new BulletBoxShape(*param0_this);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletBoxShape, true, false);
      }
    }
  }

  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletBoxShape(const BulletBoxShape copy)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletBoxShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletBoxShape) {
    printf("BulletBoxShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletBoxShape *local_this = (BulletBoxShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletBoxShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletBoxShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletBoxShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletBoxShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletBoxShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletBoxShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletBoxShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletBoxShape*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletCapsuleShape
 */
/**
 * Python function wrapper for:
 * static BulletCapsuleShape *BulletCapsuleShape::make_from_solid(CollisionCapsule const *solid)
 */
static PyObject *Dtool_BulletCapsuleShape_make_from_solid_161(PyObject *, PyObject *arg) {
  // 1-static BulletCapsuleShape *BulletCapsuleShape::make_from_solid(CollisionCapsule const *solid)
  CollisionCapsule const *arg_this = (CollisionCapsule *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_CollisionCapsule, 0, "BulletCapsuleShape.make_from_solid", true, true);
  if (arg_this != nullptr) {
    BulletCapsuleShape *return_value = (BulletCapsuleShape::make_from_solid)(arg_this);
    if (return_value != nullptr) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != nullptr) {
        unref_delete(return_value);
      }
      return nullptr;
    }
    if (return_value == nullptr) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletCapsuleShape, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_from_solid(const CollisionCapsule solid)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletCapsuleShape_make_from_solid_161_comment =
  "C++ Interface:\n"
  "make_from_solid(const CollisionCapsule solid)\n"
  "\n"
  "/**\n"
  " * Constructs a new BulletCapsuleShape using the information from a\n"
  " * CollisionCapsule from the builtin collision system.\n"
  " */";
#else
static const char *Dtool_BulletCapsuleShape_make_from_solid_161_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletCapsuleShape::get_radius(void) const
 */
static PyObject *Dtool_BulletCapsuleShape_get_radius_162(PyObject *self, PyObject *) {
  BulletCapsuleShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletCapsuleShape)) {
    return nullptr;
  }
  // 1-inline PN_stdfloat BulletCapsuleShape::get_radius(void) const
  PN_stdfloat return_value = ((*(const BulletCapsuleShape*)local_this).get_radius)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCapsuleShape_get_radius_162_comment =
  "C++ Interface:\n"
  "get_radius(BulletCapsuleShape self)\n"
  "\n"
  "/**\n"
  " * Returns the radius that was used to construct this capsule.\n"
  " */";
#else
static const char *Dtool_BulletCapsuleShape_get_radius_162_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletCapsuleShape::get_half_height(void) const
 */
static PyObject *Dtool_BulletCapsuleShape_get_half_height_163(PyObject *self, PyObject *) {
  BulletCapsuleShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletCapsuleShape)) {
    return nullptr;
  }
  // 1-inline PN_stdfloat BulletCapsuleShape::get_half_height(void) const
  PN_stdfloat return_value = ((*(const BulletCapsuleShape*)local_this).get_half_height)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCapsuleShape_get_half_height_163_comment =
  "C++ Interface:\n"
  "get_half_height(BulletCapsuleShape self)\n"
  "\n"
  "/**\n"
  " * Returns half of get_height().\n"
  " * @deprecated see get_height() instead.\n"
  " */";
#else
static const char *Dtool_BulletCapsuleShape_get_half_height_163_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletCapsuleShape::get_class_type(void)
 */
static PyObject *Dtool_BulletCapsuleShape_get_class_type_167(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletCapsuleShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletCapsuleShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletCapsuleShape_get_class_type_167_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletCapsuleShape_get_class_type_167_comment = nullptr;
#endif

static PyObject *Dtool_BulletCapsuleShape_radius_Getter(PyObject *self, void *) {
  const BulletCapsuleShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCapsuleShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline PN_stdfloat BulletCapsuleShape::get_radius(void) const
  PN_stdfloat return_value = ((*(const BulletCapsuleShape*)local_this).get_radius)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletCapsuleShape_height_Getter(PyObject *self, void *) {
  const BulletCapsuleShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCapsuleShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline PN_stdfloat BulletCapsuleShape::get_height(void) const
  PN_stdfloat return_value = ((*(const BulletCapsuleShape*)local_this).get_height)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * BulletCapsuleShape::BulletCapsuleShape(BulletCapsuleShape const &copy)
 * explicit BulletCapsuleShape::BulletCapsuleShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
 */
static int Dtool_Init_BulletCapsuleShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg;
      if (Dtool_ExtractArg(&arg, args, kwds, "copy")) {
        // 1-BulletCapsuleShape::BulletCapsuleShape(BulletCapsuleShape const &copy)
        BulletCapsuleShape const *arg_this = (BulletCapsuleShape *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletCapsuleShape, 0, "BulletCapsuleShape.BulletCapsuleShape", true, true);
        if (arg_this != nullptr) {
          BulletCapsuleShape *return_value = new BulletCapsuleShape(*arg_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCapsuleShape, true, false);
        }
      }
    }
    break;
  case 2:
  case 3:
    {
      // 1-explicit BulletCapsuleShape::BulletCapsuleShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
      float param0;
      float param1;
      int param2 = ::Z_up;
      static const char *keyword_list[] = {"radius", "height", "up", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "ff|i:BulletCapsuleShape", (char **)keyword_list, &param0, &param1, &param2)) {
        BulletCapsuleShape *return_value = new BulletCapsuleShape((PN_stdfloat)param0, (PN_stdfloat)param1, (BulletUpAxis)param2);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCapsuleShape, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletCapsuleShape() takes 1, 2 or 3 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletCapsuleShape(const BulletCapsuleShape copy)\n"
      "BulletCapsuleShape(float radius, float height, int up)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletCapsuleShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletCapsuleShape) {
    printf("BulletCapsuleShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletCapsuleShape *local_this = (BulletCapsuleShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletCapsuleShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletCapsuleShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletCapsuleShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletCapsuleShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletCapsuleShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletCapsuleShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletCapsuleShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletCapsuleShape*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletCharacterControllerNode
 */
/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_linear_movement(LVector3 const &velocity, bool is_local)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_linear_movement_170(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_linear_movement")) {
    return nullptr;
  }
  // 1-void BulletCharacterControllerNode::set_linear_movement(LVector3 const &velocity, bool is_local)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"velocity", "is_local", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:set_linear_movement", (char **)keyword_list, &param1, &param2)) {
    LVector3f param1_local;
    LVector3 const *param1_this = Dtool_Coerce_LVector3f(param1, param1_local);
    if (!(param1_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletCharacterControllerNode.set_linear_movement", "LVector3f");
    }
    ((*local_this).set_linear_movement)(*param1_this, (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_movement(const BulletCharacterControllerNode self, const LVector3f velocity, bool is_local)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_linear_movement_170_comment =
  "C++ Interface:\n"
  "set_linear_movement(const BulletCharacterControllerNode self, const LVector3f velocity, bool is_local)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_linear_movement_170_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_angular_movement(PN_stdfloat omega)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_angular_movement_171(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_angular_movement")) {
    return nullptr;
  }
  // 1-void BulletCharacterControllerNode::set_angular_movement(PN_stdfloat omega)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_angular_movement)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_movement(const BulletCharacterControllerNode self, float omega)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_angular_movement_171_comment =
  "C++ Interface:\n"
  "set_angular_movement(const BulletCharacterControllerNode self, float omega)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_angular_movement_171_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletShape *BulletCharacterControllerNode::get_shape(void) const
 */
static PyObject *Dtool_BulletCharacterControllerNode_get_shape_172(PyObject *self, PyObject *) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletCharacterControllerNode)) {
    return nullptr;
  }
  // 1-BulletShape *BulletCharacterControllerNode::get_shape(void) const
  BulletShape *return_value = ((*(const BulletCharacterControllerNode*)local_this).get_shape)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletShape, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_get_shape_172_comment =
  "C++ Interface:\n"
  "get_shape(BulletCharacterControllerNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_get_shape_172_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_gravity(PN_stdfloat gravity)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_gravity_173(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_gravity")) {
    return nullptr;
  }
  // 1-void BulletCharacterControllerNode::set_gravity(PN_stdfloat gravity)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_gravity)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_gravity(const BulletCharacterControllerNode self, float gravity)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_gravity_173_comment =
  "C++ Interface:\n"
  "set_gravity(const BulletCharacterControllerNode self, float gravity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_gravity_173_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletCharacterControllerNode::get_gravity(void) const
 */
static PyObject *Dtool_BulletCharacterControllerNode_get_gravity_174(PyObject *self, PyObject *) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletCharacterControllerNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletCharacterControllerNode::get_gravity(void) const
  PN_stdfloat return_value = ((*(const BulletCharacterControllerNode*)local_this).get_gravity)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_get_gravity_174_comment =
  "C++ Interface:\n"
  "get_gravity(BulletCharacterControllerNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_get_gravity_174_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_fall_speed(PN_stdfloat fall_speed)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_fall_speed_175(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_fall_speed")) {
    return nullptr;
  }
  // 1-void BulletCharacterControllerNode::set_fall_speed(PN_stdfloat fall_speed)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_fall_speed)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_fall_speed(const BulletCharacterControllerNode self, float fall_speed)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_fall_speed_175_comment =
  "C++ Interface:\n"
  "set_fall_speed(const BulletCharacterControllerNode self, float fall_speed)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_fall_speed_175_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_jump_speed(PN_stdfloat jump_speed)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_jump_speed_176(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_jump_speed")) {
    return nullptr;
  }
  // 1-void BulletCharacterControllerNode::set_jump_speed(PN_stdfloat jump_speed)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_jump_speed)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_jump_speed(const BulletCharacterControllerNode self, float jump_speed)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_jump_speed_176_comment =
  "C++ Interface:\n"
  "set_jump_speed(const BulletCharacterControllerNode self, float jump_speed)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_jump_speed_176_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_max_jump_height(PN_stdfloat max_jump_height)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_max_jump_height_177(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_max_jump_height")) {
    return nullptr;
  }
  // 1-void BulletCharacterControllerNode::set_max_jump_height(PN_stdfloat max_jump_height)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_jump_height)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_jump_height(const BulletCharacterControllerNode self, float max_jump_height)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_max_jump_height_177_comment =
  "C++ Interface:\n"
  "set_max_jump_height(const BulletCharacterControllerNode self, float max_jump_height)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_max_jump_height_177_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_max_slope(PN_stdfloat max_slope)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_max_slope_178(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_max_slope")) {
    return nullptr;
  }
  // 1-void BulletCharacterControllerNode::set_max_slope(PN_stdfloat max_slope)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_slope)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_slope(const BulletCharacterControllerNode self, float max_slope)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_max_slope_178_comment =
  "C++ Interface:\n"
  "set_max_slope(const BulletCharacterControllerNode self, float max_slope)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_max_slope_178_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletCharacterControllerNode::get_max_slope(void) const
 */
static PyObject *Dtool_BulletCharacterControllerNode_get_max_slope_179(PyObject *self, PyObject *) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletCharacterControllerNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletCharacterControllerNode::get_max_slope(void) const
  PN_stdfloat return_value = ((*(const BulletCharacterControllerNode*)local_this).get_max_slope)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_get_max_slope_179_comment =
  "C++ Interface:\n"
  "get_max_slope(BulletCharacterControllerNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_get_max_slope_179_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_use_ghost_sweep_test(bool value)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_180(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_use_ghost_sweep_test")) {
    return nullptr;
  }
  // 1-void BulletCharacterControllerNode::set_use_ghost_sweep_test(bool value)
  ((*local_this).set_use_ghost_sweep_test)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_use_ghost_sweep_test(const BulletCharacterControllerNode self, bool value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_180_comment =
  "C++ Interface:\n"
  "set_use_ghost_sweep_test(const BulletCharacterControllerNode self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_180_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletCharacterControllerNode::is_on_ground(void) const
 */
static PyObject *Dtool_BulletCharacterControllerNode_is_on_ground_181(PyObject *self, PyObject *) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletCharacterControllerNode)) {
    return nullptr;
  }
  // 1-bool BulletCharacterControllerNode::is_on_ground(void) const
  bool return_value = ((*(const BulletCharacterControllerNode*)local_this).is_on_ground)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_is_on_ground_181_comment =
  "C++ Interface:\n"
  "is_on_ground(BulletCharacterControllerNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_is_on_ground_181_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletCharacterControllerNode::can_jump(void) const
 */
static PyObject *Dtool_BulletCharacterControllerNode_can_jump_182(PyObject *self, PyObject *) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletCharacterControllerNode)) {
    return nullptr;
  }
  // 1-bool BulletCharacterControllerNode::can_jump(void) const
  bool return_value = ((*(const BulletCharacterControllerNode*)local_this).can_jump)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_can_jump_182_comment =
  "C++ Interface:\n"
  "can_jump(BulletCharacterControllerNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_can_jump_182_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::do_jump(void)
 */
static PyObject *Dtool_BulletCharacterControllerNode_do_jump_183(PyObject *self, PyObject *) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.do_jump")) {
    return nullptr;
  }
  // 1-void BulletCharacterControllerNode::do_jump(void)
  ((*local_this).do_jump)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_do_jump_183_comment =
  "C++ Interface:\n"
  "do_jump(const BulletCharacterControllerNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_do_jump_183_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletCharacterControllerNode::get_class_type(void)
 */
static PyObject *Dtool_BulletCharacterControllerNode_get_class_type_188(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletCharacterControllerNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletCharacterControllerNode::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_get_class_type_188_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletCharacterControllerNode_get_class_type_188_comment = nullptr;
#endif

static PyObject *Dtool_BulletCharacterControllerNode_shape_Getter(PyObject *self, void *) {
  const BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCharacterControllerNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-BulletShape *BulletCharacterControllerNode::get_shape(void) const
  BulletShape *return_value = ((*(const BulletCharacterControllerNode*)local_this).get_shape)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletShape, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletCharacterControllerNode_gravity_Getter(PyObject *self, void *) {
  const BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCharacterControllerNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletCharacterControllerNode::get_gravity(void) const
  PN_stdfloat return_value = ((*(const BulletCharacterControllerNode*)local_this).get_gravity)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletCharacterControllerNode_gravity_Setter(PyObject *self, PyObject *arg, void *) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.gravity")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete gravity attribute");
    return -1;
  }
  // 1-void BulletCharacterControllerNode::set_gravity(PN_stdfloat gravity)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_gravity)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_gravity(const BulletCharacterControllerNode self, float gravity)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletCharacterControllerNode_max_slope_Getter(PyObject *self, void *) {
  const BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCharacterControllerNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletCharacterControllerNode::get_max_slope(void) const
  PN_stdfloat return_value = ((*(const BulletCharacterControllerNode*)local_this).get_max_slope)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletCharacterControllerNode_max_slope_Setter(PyObject *self, PyObject *arg, void *) {
  BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.max_slope")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete max_slope attribute");
    return -1;
  }
  // 1-void BulletCharacterControllerNode::set_max_slope(PN_stdfloat max_slope)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_slope)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_max_slope(const BulletCharacterControllerNode self, float max_slope)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletCharacterControllerNode_on_ground_Getter(PyObject *self, void *) {
  const BulletCharacterControllerNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCharacterControllerNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletCharacterControllerNode::is_on_ground(void) const
  bool return_value = ((*(const BulletCharacterControllerNode*)local_this).is_on_ground)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * explicit BulletCharacterControllerNode::BulletCharacterControllerNode(BulletShape *shape, PN_stdfloat step_height, char const *name = "character")
 */
static int Dtool_Init_BulletCharacterControllerNode(PyObject *self, PyObject *args, PyObject *kwds) {
  // 1-explicit BulletCharacterControllerNode::BulletCharacterControllerNode(BulletShape *shape, PN_stdfloat step_height, char const *name = "character")
  PyObject *param0;
  float param1;
  char const *param2 = "character";
  static const char *keyword_list[] = {"shape", "step_height", "name", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "Of|z:BulletCharacterControllerNode", (char **)keyword_list, &param0, &param1, &param2)) {
    BulletShape *param0_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletShape, 0, "BulletCharacterControllerNode.BulletCharacterControllerNode", false, true);
    if (param0_this != nullptr) {
      BulletCharacterControllerNode *return_value = new BulletCharacterControllerNode(param0_this, (PN_stdfloat)param1, (char const *)param2);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCharacterControllerNode, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletCharacterControllerNode(BulletShape shape, float step_height, str name)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletCharacterControllerNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletCharacterControllerNode) {
    printf("BulletCharacterControllerNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletCharacterControllerNode *local_this = (BulletCharacterControllerNode *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletCharacterControllerNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletBaseCharacterControllerNode) {
    return (BulletBaseCharacterControllerNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *)(BulletBaseCharacterControllerNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *)(BulletBaseCharacterControllerNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBaseCharacterControllerNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBaseCharacterControllerNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBaseCharacterControllerNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *)(BulletBaseCharacterControllerNode *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletCharacterControllerNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletCharacterControllerNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletBaseCharacterControllerNode) {
    BulletBaseCharacterControllerNode* other_this = (BulletBaseCharacterControllerNode*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletClosestHitRayResult
 */
/**
 * Python function wrapper for:
 * static inline BulletClosestHitRayResult BulletClosestHitRayResult::empty(void)
 */
static PyObject *Dtool_BulletClosestHitRayResult_empty_193(PyObject *, PyObject *) {
  // 1-static inline BulletClosestHitRayResult BulletClosestHitRayResult::empty(void)
  BulletClosestHitRayResult *return_value = new BulletClosestHitRayResult((BulletClosestHitRayResult::empty)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletClosestHitRayResult, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_empty_193_comment =
  "C++ Interface:\n"
  "empty()\n"
  "\n"
  "/**\n"
  " * Named constructor intended to be used for asserts with have to return a\n"
  " * concrete value.\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_empty_193_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletClosestHitRayResult::get_from_pos(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_from_pos_194(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitRayResult)) {
    return nullptr;
  }
  // 1-LPoint3 BulletClosestHitRayResult::get_from_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletClosestHitRayResult*)local_this).get_from_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_from_pos_194_comment =
  "C++ Interface:\n"
  "get_from_pos(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_from_pos_194_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletClosestHitRayResult::get_to_pos(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_to_pos_195(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitRayResult)) {
    return nullptr;
  }
  // 1-LPoint3 BulletClosestHitRayResult::get_to_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletClosestHitRayResult*)local_this).get_to_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_to_pos_195_comment =
  "C++ Interface:\n"
  "get_to_pos(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_to_pos_195_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletClosestHitRayResult::has_hit(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_has_hit_196(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitRayResult)) {
    return nullptr;
  }
  // 1-bool BulletClosestHitRayResult::has_hit(void) const
  bool return_value = ((*(const BulletClosestHitRayResult*)local_this).has_hit)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_has_hit_196_comment =
  "C++ Interface:\n"
  "has_hit(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_has_hit_196_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PandaNode *BulletClosestHitRayResult::get_node(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_node_197(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitRayResult)) {
    return nullptr;
  }
  // 1-PandaNode *BulletClosestHitRayResult::get_node(void) const
  PandaNode *return_value = ((*(const BulletClosestHitRayResult*)local_this).get_node)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_node_197_comment =
  "C++ Interface:\n"
  "get_node(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_node_197_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletClosestHitRayResult::get_hit_pos(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_hit_pos_198(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitRayResult)) {
    return nullptr;
  }
  // 1-LPoint3 BulletClosestHitRayResult::get_hit_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletClosestHitRayResult*)local_this).get_hit_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_hit_pos_198_comment =
  "C++ Interface:\n"
  "get_hit_pos(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_hit_pos_198_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletClosestHitRayResult::get_hit_normal(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_hit_normal_199(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitRayResult)) {
    return nullptr;
  }
  // 1-LVector3 BulletClosestHitRayResult::get_hit_normal(void) const
  LVector3 *return_value = new LVector3(((*(const BulletClosestHitRayResult*)local_this).get_hit_normal)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_hit_normal_199_comment =
  "C++ Interface:\n"
  "get_hit_normal(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_hit_normal_199_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletClosestHitRayResult::get_hit_fraction(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_hit_fraction_200(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitRayResult)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletClosestHitRayResult::get_hit_fraction(void) const
  PN_stdfloat return_value = ((*(const BulletClosestHitRayResult*)local_this).get_hit_fraction)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_hit_fraction_200_comment =
  "C++ Interface:\n"
  "get_hit_fraction(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_hit_fraction_200_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletClosestHitRayResult::get_shape_part(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_shape_part_201(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitRayResult)) {
    return nullptr;
  }
  // 1-int BulletClosestHitRayResult::get_shape_part(void) const
  int return_value = ((*(const BulletClosestHitRayResult*)local_this).get_shape_part)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_shape_part_201_comment =
  "C++ Interface:\n"
  "get_shape_part(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_shape_part_201_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletClosestHitRayResult::get_triangle_index(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_triangle_index_202(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitRayResult)) {
    return nullptr;
  }
  // 1-int BulletClosestHitRayResult::get_triangle_index(void) const
  int return_value = ((*(const BulletClosestHitRayResult*)local_this).get_triangle_index)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_triangle_index_202_comment =
  "C++ Interface:\n"
  "get_triangle_index(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_triangle_index_202_comment = nullptr;
#endif

static PyObject *Dtool_BulletClosestHitRayResult_from_pos_Getter(PyObject *self, void *) {
  const BulletClosestHitRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletClosestHitRayResult::get_from_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletClosestHitRayResult*)local_this).get_from_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletClosestHitRayResult_to_pos_Getter(PyObject *self, void *) {
  const BulletClosestHitRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletClosestHitRayResult::get_to_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletClosestHitRayResult*)local_this).get_to_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletClosestHitRayResult_node_Getter(PyObject *self, void *) {
  const BulletClosestHitRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PandaNode *BulletClosestHitRayResult::get_node(void) const
  PandaNode *return_value = ((*(const BulletClosestHitRayResult*)local_this).get_node)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletClosestHitRayResult_hit_pos_Getter(PyObject *self, void *) {
  const BulletClosestHitRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletClosestHitRayResult::get_hit_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletClosestHitRayResult*)local_this).get_hit_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletClosestHitRayResult_hit_normal_Getter(PyObject *self, void *) {
  const BulletClosestHitRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletClosestHitRayResult::get_hit_normal(void) const
  LVector3 *return_value = new LVector3(((*(const BulletClosestHitRayResult*)local_this).get_hit_normal)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletClosestHitRayResult_hit_fraction_Getter(PyObject *self, void *) {
  const BulletClosestHitRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletClosestHitRayResult::get_hit_fraction(void) const
  PN_stdfloat return_value = ((*(const BulletClosestHitRayResult*)local_this).get_hit_fraction)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletClosestHitRayResult_shape_part_Getter(PyObject *self, void *) {
  const BulletClosestHitRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletClosestHitRayResult::get_shape_part(void) const
  int return_value = ((*(const BulletClosestHitRayResult*)local_this).get_shape_part)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletClosestHitRayResult_triangle_index_Getter(PyObject *self, void *) {
  const BulletClosestHitRayResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletClosestHitRayResult::get_triangle_index(void) const
  int return_value = ((*(const BulletClosestHitRayResult*)local_this).get_triangle_index)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * inline BulletClosestHitRayResult::BulletClosestHitRayResult(BulletClosestHitRayResult const &) = default
 */
static int Dtool_Init_BulletClosestHitRayResult(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletClosestHitRayResult() takes no keyword arguments");
    return -1;
#endif
  }
  // 1-inline BulletClosestHitRayResult::BulletClosestHitRayResult(BulletClosestHitRayResult const &) = default
  PyObject *param0;
  if (PyTuple_GET_SIZE(args) == 1) {
    param0 = PyTuple_GET_ITEM(args, 0);
    BulletClosestHitRayResult const *param0_this = (BulletClosestHitRayResult *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletClosestHitRayResult, 0, "BulletClosestHitRayResult.BulletClosestHitRayResult", true, true);
    if (param0_this != nullptr) {
      BulletClosestHitRayResult *return_value = new BulletClosestHitRayResult(*param0_this);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletClosestHitRayResult, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletClosestHitRayResult(const BulletClosestHitRayResult param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletClosestHitRayResult(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletClosestHitRayResult) {
    printf("BulletClosestHitRayResult ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletClosestHitRayResult *local_this = (BulletClosestHitRayResult *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletClosestHitRayResult) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletClosestHitRayResult(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletClosestHitRayResult) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletClosestHitSweepResult
 */
/**
 * Python function wrapper for:
 * static inline BulletClosestHitSweepResult BulletClosestHitSweepResult::empty(void)
 */
static PyObject *Dtool_BulletClosestHitSweepResult_empty_217(PyObject *, PyObject *) {
  // 1-static inline BulletClosestHitSweepResult BulletClosestHitSweepResult::empty(void)
  BulletClosestHitSweepResult *return_value = new BulletClosestHitSweepResult((BulletClosestHitSweepResult::empty)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletClosestHitSweepResult, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_empty_217_comment =
  "C++ Interface:\n"
  "empty()\n"
  "\n"
  "/**\n"
  " * Named constructor intended to be used for asserts with have to return a\n"
  " * concrete value.\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_empty_217_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletClosestHitSweepResult::get_from_pos(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_get_from_pos_218(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitSweepResult)) {
    return nullptr;
  }
  // 1-LPoint3 BulletClosestHitSweepResult::get_from_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletClosestHitSweepResult*)local_this).get_from_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_get_from_pos_218_comment =
  "C++ Interface:\n"
  "get_from_pos(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_get_from_pos_218_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletClosestHitSweepResult::get_to_pos(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_get_to_pos_219(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitSweepResult)) {
    return nullptr;
  }
  // 1-LPoint3 BulletClosestHitSweepResult::get_to_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletClosestHitSweepResult*)local_this).get_to_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_get_to_pos_219_comment =
  "C++ Interface:\n"
  "get_to_pos(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_get_to_pos_219_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletClosestHitSweepResult::has_hit(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_has_hit_220(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitSweepResult)) {
    return nullptr;
  }
  // 1-bool BulletClosestHitSweepResult::has_hit(void) const
  bool return_value = ((*(const BulletClosestHitSweepResult*)local_this).has_hit)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_has_hit_220_comment =
  "C++ Interface:\n"
  "has_hit(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_has_hit_220_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PandaNode *BulletClosestHitSweepResult::get_node(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_get_node_221(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitSweepResult)) {
    return nullptr;
  }
  // 1-PandaNode *BulletClosestHitSweepResult::get_node(void) const
  PandaNode *return_value = ((*(const BulletClosestHitSweepResult*)local_this).get_node)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_get_node_221_comment =
  "C++ Interface:\n"
  "get_node(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_get_node_221_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletClosestHitSweepResult::get_hit_pos(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_get_hit_pos_222(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitSweepResult)) {
    return nullptr;
  }
  // 1-LPoint3 BulletClosestHitSweepResult::get_hit_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletClosestHitSweepResult*)local_this).get_hit_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_get_hit_pos_222_comment =
  "C++ Interface:\n"
  "get_hit_pos(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_get_hit_pos_222_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletClosestHitSweepResult::get_hit_normal(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_get_hit_normal_223(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitSweepResult)) {
    return nullptr;
  }
  // 1-LVector3 BulletClosestHitSweepResult::get_hit_normal(void) const
  LVector3 *return_value = new LVector3(((*(const BulletClosestHitSweepResult*)local_this).get_hit_normal)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_get_hit_normal_223_comment =
  "C++ Interface:\n"
  "get_hit_normal(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_get_hit_normal_223_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletClosestHitSweepResult::get_hit_fraction(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_get_hit_fraction_224(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletClosestHitSweepResult)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletClosestHitSweepResult::get_hit_fraction(void) const
  PN_stdfloat return_value = ((*(const BulletClosestHitSweepResult*)local_this).get_hit_fraction)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_get_hit_fraction_224_comment =
  "C++ Interface:\n"
  "get_hit_fraction(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_get_hit_fraction_224_comment = nullptr;
#endif

static PyObject *Dtool_BulletClosestHitSweepResult_from_pos_Getter(PyObject *self, void *) {
  const BulletClosestHitSweepResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitSweepResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletClosestHitSweepResult::get_from_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletClosestHitSweepResult*)local_this).get_from_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletClosestHitSweepResult_to_pos_Getter(PyObject *self, void *) {
  const BulletClosestHitSweepResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitSweepResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletClosestHitSweepResult::get_to_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletClosestHitSweepResult*)local_this).get_to_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletClosestHitSweepResult_node_Getter(PyObject *self, void *) {
  const BulletClosestHitSweepResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitSweepResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PandaNode *BulletClosestHitSweepResult::get_node(void) const
  PandaNode *return_value = ((*(const BulletClosestHitSweepResult*)local_this).get_node)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletClosestHitSweepResult_hit_pos_Getter(PyObject *self, void *) {
  const BulletClosestHitSweepResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitSweepResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletClosestHitSweepResult::get_hit_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletClosestHitSweepResult*)local_this).get_hit_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletClosestHitSweepResult_hit_normal_Getter(PyObject *self, void *) {
  const BulletClosestHitSweepResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitSweepResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletClosestHitSweepResult::get_hit_normal(void) const
  LVector3 *return_value = new LVector3(((*(const BulletClosestHitSweepResult*)local_this).get_hit_normal)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletClosestHitSweepResult_hit_fraction_Getter(PyObject *self, void *) {
  const BulletClosestHitSweepResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitSweepResult, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletClosestHitSweepResult::get_hit_fraction(void) const
  PN_stdfloat return_value = ((*(const BulletClosestHitSweepResult*)local_this).get_hit_fraction)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * inline BulletClosestHitSweepResult::BulletClosestHitSweepResult(BulletClosestHitSweepResult const &) = default
 */
static int Dtool_Init_BulletClosestHitSweepResult(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletClosestHitSweepResult() takes no keyword arguments");
    return -1;
#endif
  }
  // 1-inline BulletClosestHitSweepResult::BulletClosestHitSweepResult(BulletClosestHitSweepResult const &) = default
  PyObject *param0;
  if (PyTuple_GET_SIZE(args) == 1) {
    param0 = PyTuple_GET_ITEM(args, 0);
    BulletClosestHitSweepResult const *param0_this = (BulletClosestHitSweepResult *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletClosestHitSweepResult, 0, "BulletClosestHitSweepResult.BulletClosestHitSweepResult", true, true);
    if (param0_this != nullptr) {
      BulletClosestHitSweepResult *return_value = new BulletClosestHitSweepResult(*param0_this);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletClosestHitSweepResult, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletClosestHitSweepResult(const BulletClosestHitSweepResult param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletClosestHitSweepResult(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletClosestHitSweepResult) {
    printf("BulletClosestHitSweepResult ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletClosestHitSweepResult *local_this = (BulletClosestHitSweepResult *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletClosestHitSweepResult) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletClosestHitSweepResult(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletClosestHitSweepResult) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletConeShape
 */
/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletConeShape::get_radius(void) const
 */
static PyObject *Dtool_BulletConeShape_get_radius_235(PyObject *self, PyObject *) {
  BulletConeShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletConeShape)) {
    return nullptr;
  }
  // 1-inline PN_stdfloat BulletConeShape::get_radius(void) const
  PN_stdfloat return_value = ((*(const BulletConeShape*)local_this).get_radius)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConeShape_get_radius_235_comment =
  "C++ Interface:\n"
  "get_radius(BulletConeShape self)\n"
  "\n"
  "/**\n"
  " * Returns the radius that was passed into the constructor.\n"
  " */";
#else
static const char *Dtool_BulletConeShape_get_radius_235_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletConeShape::get_height(void) const
 */
static PyObject *Dtool_BulletConeShape_get_height_236(PyObject *self, PyObject *) {
  BulletConeShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletConeShape)) {
    return nullptr;
  }
  // 1-inline PN_stdfloat BulletConeShape::get_height(void) const
  PN_stdfloat return_value = ((*(const BulletConeShape*)local_this).get_height)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConeShape_get_height_236_comment =
  "C++ Interface:\n"
  "get_height(BulletConeShape self)\n"
  "\n"
  "/**\n"
  " * Returns the height that was passed into the constructor.\n"
  " */";
#else
static const char *Dtool_BulletConeShape_get_height_236_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletConeShape::get_class_type(void)
 */
static PyObject *Dtool_BulletConeShape_get_class_type_239(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletConeShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletConeShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletConeShape_get_class_type_239_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletConeShape_get_class_type_239_comment = nullptr;
#endif

static PyObject *Dtool_BulletConeShape_radius_Getter(PyObject *self, void *) {
  const BulletConeShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConeShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline PN_stdfloat BulletConeShape::get_radius(void) const
  PN_stdfloat return_value = ((*(const BulletConeShape*)local_this).get_radius)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletConeShape_height_Getter(PyObject *self, void *) {
  const BulletConeShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConeShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline PN_stdfloat BulletConeShape::get_height(void) const
  PN_stdfloat return_value = ((*(const BulletConeShape*)local_this).get_height)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * BulletConeShape::BulletConeShape(BulletConeShape const &copy)
 * explicit BulletConeShape::BulletConeShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
 */
static int Dtool_Init_BulletConeShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg;
      if (Dtool_ExtractArg(&arg, args, kwds, "copy")) {
        // 1-BulletConeShape::BulletConeShape(BulletConeShape const &copy)
        BulletConeShape const *arg_this = (BulletConeShape *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletConeShape, 0, "BulletConeShape.BulletConeShape", true, true);
        if (arg_this != nullptr) {
          BulletConeShape *return_value = new BulletConeShape(*arg_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConeShape, true, false);
        }
      }
    }
    break;
  case 2:
  case 3:
    {
      // 1-explicit BulletConeShape::BulletConeShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
      float param0;
      float param1;
      int param2 = ::Z_up;
      static const char *keyword_list[] = {"radius", "height", "up", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "ff|i:BulletConeShape", (char **)keyword_list, &param0, &param1, &param2)) {
        BulletConeShape *return_value = new BulletConeShape((PN_stdfloat)param0, (PN_stdfloat)param1, (BulletUpAxis)param2);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConeShape, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletConeShape() takes 1, 2 or 3 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletConeShape(const BulletConeShape copy)\n"
      "BulletConeShape(float radius, float height, int up)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletConeShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletConeShape) {
    printf("BulletConeShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletConeShape *local_this = (BulletConeShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletConeShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletConeShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletConeShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletConeShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletConeShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletConeShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletConeShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletConeShape*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletConstraint
 */
/**
 * Python function wrapper for:
 * BulletRigidBodyNode *BulletConstraint::get_rigid_body_a(void)
 */
static PyObject *Dtool_BulletConstraint_get_rigid_body_a_242(PyObject *self, PyObject *) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.get_rigid_body_a")) {
    return nullptr;
  }
  // 1-BulletRigidBodyNode *BulletConstraint::get_rigid_body_a(void)
  BulletRigidBodyNode *return_value = ((*local_this).get_rigid_body_a)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletRigidBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_get_rigid_body_a_242_comment =
  "C++ Interface:\n"
  "get_rigid_body_a(const BulletConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_get_rigid_body_a_242_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletRigidBodyNode *BulletConstraint::get_rigid_body_b(void)
 */
static PyObject *Dtool_BulletConstraint_get_rigid_body_b_243(PyObject *self, PyObject *) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.get_rigid_body_b")) {
    return nullptr;
  }
  // 1-BulletRigidBodyNode *BulletConstraint::get_rigid_body_b(void)
  BulletRigidBodyNode *return_value = ((*local_this).get_rigid_body_b)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletRigidBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_get_rigid_body_b_243_comment =
  "C++ Interface:\n"
  "get_rigid_body_b(const BulletConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_get_rigid_body_b_243_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletConstraint::enable_feedback(bool value)
 */
static PyObject *Dtool_BulletConstraint_enable_feedback_244(PyObject *self, PyObject *arg) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.enable_feedback")) {
    return nullptr;
  }
  // 1-void BulletConstraint::enable_feedback(bool value)
  ((*local_this).enable_feedback)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "enable_feedback(const BulletConstraint self, bool value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_enable_feedback_244_comment =
  "C++ Interface:\n"
  "enable_feedback(const BulletConstraint self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_enable_feedback_244_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletConstraint::set_debug_draw_size(PN_stdfloat size)
 */
static PyObject *Dtool_BulletConstraint_set_debug_draw_size_245(PyObject *self, PyObject *arg) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.set_debug_draw_size")) {
    return nullptr;
  }
  // 1-void BulletConstraint::set_debug_draw_size(PN_stdfloat size)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_debug_draw_size)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_debug_draw_size(const BulletConstraint self, float size)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_set_debug_draw_size_245_comment =
  "C++ Interface:\n"
  "set_debug_draw_size(const BulletConstraint self, float size)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_set_debug_draw_size_245_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletConstraint::get_debug_draw_size(void)
 */
static PyObject *Dtool_BulletConstraint_get_debug_draw_size_246(PyObject *self, PyObject *) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.get_debug_draw_size")) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletConstraint::get_debug_draw_size(void)
  PN_stdfloat return_value = ((*local_this).get_debug_draw_size)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_get_debug_draw_size_246_comment =
  "C++ Interface:\n"
  "get_debug_draw_size(const BulletConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_get_debug_draw_size_246_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletConstraint::get_applied_impulse(void) const
 */
static PyObject *Dtool_BulletConstraint_get_applied_impulse_247(PyObject *self, PyObject *) {
  BulletConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletConstraint::get_applied_impulse(void) const
  PN_stdfloat return_value = ((*(const BulletConstraint*)local_this).get_applied_impulse)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_get_applied_impulse_247_comment =
  "C++ Interface:\n"
  "get_applied_impulse(BulletConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_get_applied_impulse_247_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletConstraint::set_breaking_threshold(PN_stdfloat threshold)
 */
static PyObject *Dtool_BulletConstraint_set_breaking_threshold_248(PyObject *self, PyObject *arg) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.set_breaking_threshold")) {
    return nullptr;
  }
  // 1-inline void BulletConstraint::set_breaking_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_breaking_threshold)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_breaking_threshold(const BulletConstraint self, float threshold)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_set_breaking_threshold_248_comment =
  "C++ Interface:\n"
  "set_breaking_threshold(const BulletConstraint self, float threshold)\n"
  "\n"
  "/**\n"
  " * Sets the applied impulse limit for breaking the constraint.  If the limit\n"
  " * is exceeded the constraint will be disabled.  Disabled constraints are not\n"
  " * removed from the world, and can be re-enabled.\n"
  " */";
#else
static const char *Dtool_BulletConstraint_set_breaking_threshold_248_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletConstraint::get_breaking_threshold(void) const
 */
static PyObject *Dtool_BulletConstraint_get_breaking_threshold_249(PyObject *self, PyObject *) {
  BulletConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletConstraint)) {
    return nullptr;
  }
  // 1-inline PN_stdfloat BulletConstraint::get_breaking_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletConstraint*)local_this).get_breaking_threshold)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_get_breaking_threshold_249_comment =
  "C++ Interface:\n"
  "get_breaking_threshold(BulletConstraint self)\n"
  "\n"
  "/**\n"
  " * Returns the applied impluse limit for breaking the constraint.\n"
  " */";
#else
static const char *Dtool_BulletConstraint_get_breaking_threshold_249_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletConstraint::set_enabled(bool enabled)
 */
static PyObject *Dtool_BulletConstraint_set_enabled_250(PyObject *self, PyObject *arg) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.set_enabled")) {
    return nullptr;
  }
  // 1-inline void BulletConstraint::set_enabled(bool enabled)
  ((*local_this).set_enabled)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_enabled(const BulletConstraint self, bool enabled)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_set_enabled_250_comment =
  "C++ Interface:\n"
  "set_enabled(const BulletConstraint self, bool enabled)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_set_enabled_250_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletConstraint::is_enabled(void) const
 */
static PyObject *Dtool_BulletConstraint_is_enabled_251(PyObject *self, PyObject *) {
  BulletConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletConstraint)) {
    return nullptr;
  }
  // 1-inline bool BulletConstraint::is_enabled(void) const
  bool return_value = ((*(const BulletConstraint*)local_this).is_enabled)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_is_enabled_251_comment =
  "C++ Interface:\n"
  "is_enabled(BulletConstraint self)\n"
  "\n"
  "/**\n"
  " * Returns TRUE if the constraint is enabled.\n"
  " */";
#else
static const char *Dtool_BulletConstraint_is_enabled_251_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletConstraint::set_param(BulletConstraint::ConstraintParam num, PN_stdfloat value, int axis = -1)
 */
static PyObject *Dtool_BulletConstraint_set_param_253(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.set_param")) {
    return nullptr;
  }
  // 1-void BulletConstraint::set_param(BulletConstraint::ConstraintParam num, PN_stdfloat value, int axis = -1)
  int param1;
  float param2;
  int param3 = -1;
  static const char *keyword_list[] = {"num", "value", "axis", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "if|i:set_param", (char **)keyword_list, &param1, &param2, &param3)) {
    ((*local_this).set_param)((BulletConstraint::ConstraintParam)param1, (PN_stdfloat)param2, (int)param3);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_param(const BulletConstraint self, int num, float value, int axis)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_set_param_253_comment =
  "C++ Interface:\n"
  "set_param(const BulletConstraint self, int num, float value, int axis)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_set_param_253_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletConstraint::get_param(BulletConstraint::ConstraintParam num, int axis = -1)
 */
static PyObject *Dtool_BulletConstraint_get_param_254(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.get_param")) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletConstraint::get_param(BulletConstraint::ConstraintParam num, int axis = -1)
  int param1;
  int param2 = -1;
  static const char *keyword_list[] = {"num", "axis", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "i|i:get_param", (char **)keyword_list, &param1, &param2)) {
    PN_stdfloat return_value = ((*local_this).get_param)((BulletConstraint::ConstraintParam)param1, (int)param2);
    if (Dtool_CheckErrorOccurred()) {
      return nullptr;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_param(const BulletConstraint self, int num, int axis)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_get_param_254_comment =
  "C++ Interface:\n"
  "get_param(const BulletConstraint self, int num, int axis)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_get_param_254_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletConstraint::get_class_type(void)
 */
static PyObject *Dtool_BulletConstraint_get_class_type_318(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletConstraint::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletConstraint::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_get_class_type_318_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletConstraint_get_class_type_318_comment = nullptr;
#endif

static PyObject *Dtool_BulletConstraint_rigid_body_a_Getter(PyObject *self, void *) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.rigid_body_a")) {
    return nullptr;
  }

  // 1-BulletRigidBodyNode *BulletConstraint::get_rigid_body_a(void)
  BulletRigidBodyNode *return_value = ((*local_this).get_rigid_body_a)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletRigidBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletConstraint_rigid_body_b_Getter(PyObject *self, void *) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.rigid_body_b")) {
    return nullptr;
  }

  // 1-BulletRigidBodyNode *BulletConstraint::get_rigid_body_b(void)
  BulletRigidBodyNode *return_value = ((*local_this).get_rigid_body_b)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletRigidBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletConstraint_debug_draw_size_Getter(PyObject *self, void *) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.debug_draw_size")) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletConstraint::get_debug_draw_size(void)
  PN_stdfloat return_value = ((*local_this).get_debug_draw_size)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletConstraint_debug_draw_size_Setter(PyObject *self, PyObject *arg, void *) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.debug_draw_size")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete debug_draw_size attribute");
    return -1;
  }
  // 1-void BulletConstraint::set_debug_draw_size(PN_stdfloat size)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_debug_draw_size)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_debug_draw_size(const BulletConstraint self, float size)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletConstraint_applied_impulse_Getter(PyObject *self, void *) {
  const BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletConstraint::get_applied_impulse(void) const
  PN_stdfloat return_value = ((*(const BulletConstraint*)local_this).get_applied_impulse)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletConstraint_breaking_threshold_Getter(PyObject *self, void *) {
  const BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline PN_stdfloat BulletConstraint::get_breaking_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletConstraint*)local_this).get_breaking_threshold)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletConstraint_breaking_threshold_Setter(PyObject *self, PyObject *arg, void *) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.breaking_threshold")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete breaking_threshold attribute");
    return -1;
  }
  // 1-inline void BulletConstraint::set_breaking_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_breaking_threshold)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_breaking_threshold(const BulletConstraint self, float threshold)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletConstraint_enabled_Getter(PyObject *self, void *) {
  const BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline bool BulletConstraint::is_enabled(void) const
  bool return_value = ((*(const BulletConstraint*)local_this).is_enabled)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletConstraint_enabled_Setter(PyObject *self, PyObject *arg, void *) {
  BulletConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.enabled")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete enabled attribute");
    return -1;
  }
  // 1-inline void BulletConstraint::set_enabled(bool enabled)
  ((*local_this).set_enabled)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_enabled(const BulletConstraint self, bool enabled)\n");
  }
  return -1;
}

static int Dtool_Init_BulletConstraint(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletConstraint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletConstraint) {
    printf("BulletConstraint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletConstraint *local_this = (BulletConstraint *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletConstraint) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletConstraint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletConstraint) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletConstraint*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletRigidBodyNode
 */
/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_mass(PN_stdfloat mass)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_mass_259(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_mass")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::set_mass(PN_stdfloat mass)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_mass)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_mass(const BulletRigidBodyNode self, float mass)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_mass_259_comment =
  "C++ Interface:\n"
  "set_mass(const BulletRigidBodyNode self, float mass)\n"
  "\n"
  "// Mass & inertia\n"
  "\n"
  "// Mass & inertia\n"
  "\n"
  "/**\n"
  " * Sets the mass of a rigid body.  This also modifies the inertia, which is\n"
  " * automatically computed from the shape of the body.  Setting a value of zero\n"
  " * for mass will make the body static.  A value of zero can be considered an\n"
  " * infinite mass.\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_mass_259_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRigidBodyNode::get_mass(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_mass_260(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletRigidBodyNode::get_mass(void) const
  PN_stdfloat return_value = ((*(const BulletRigidBodyNode*)local_this).get_mass)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_mass_260_comment =
  "C++ Interface:\n"
  "get_mass(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " * Returns the total mass of a rigid body.  A value of zero means that the\n"
  " * body is staic, i.e.  has an infinite mass.\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_mass_260_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRigidBodyNode::get_inv_mass(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_inv_mass_261(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletRigidBodyNode::get_inv_mass(void) const
  PN_stdfloat return_value = ((*(const BulletRigidBodyNode*)local_this).get_inv_mass)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_inv_mass_261_comment =
  "C++ Interface:\n"
  "get_inv_mass(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " * Returns the inverse mass of a rigid body.\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_inv_mass_261_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_inertia(LVecBase3 const &inertia)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_inertia_262(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_inertia")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::set_inertia(LVecBase3 const &inertia)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_inertia", "LVecBase3f");
  }
  ((*local_this).set_inertia)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_inertia(const BulletRigidBodyNode self, const LVecBase3f inertia)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_inertia_262_comment =
  "C++ Interface:\n"
  "set_inertia(const BulletRigidBodyNode self, const LVecBase3f inertia)\n"
  "\n"
  "/**\n"
  " * Sets the inertia of a rigid body.  Inertia is given as a three-component\n"
  " * vector.  A component value of zero means infinite inertia along this\n"
  " * direction.  Setting the intertia will override the value which is\n"
  " * automatically calculated from the rigid bodies shape.  However, it is\n"
  " * possible that automatic calculation of intertia is trigger after calling\n"
  " * this method, and thus overwriting the explicitly set value again.  This\n"
  " * happens when: (a) the mass is set after the inertia.  (b) a shape is added\n"
  " * or removed from the body.  (c) the scale of the body changed.\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_inertia_262_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_inertia(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_inertia_263(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-LVector3 BulletRigidBodyNode::get_inertia(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_inertia)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_inertia_263_comment =
  "C++ Interface:\n"
  "get_inertia(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " * Returns the inertia of the rigid body.  Inertia is given as a three\n"
  " * component vector.  A component value of zero means infinite inertia along\n"
  " * this direction.\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_inertia_263_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_inv_inertia_diag_local(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_264(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-LVector3 BulletRigidBodyNode::get_inv_inertia_diag_local(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_inv_inertia_diag_local)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_264_comment =
  "C++ Interface:\n"
  "get_inv_inertia_diag_local(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_264_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LMatrix3 BulletRigidBodyNode::get_inv_inertia_tensor_world(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_265(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-LMatrix3 BulletRigidBodyNode::get_inv_inertia_tensor_world(void) const
  LMatrix3 *return_value = new LMatrix3(((*(const BulletRigidBodyNode*)local_this).get_inv_inertia_tensor_world)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LMatrix3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_265_comment =
  "C++ Interface:\n"
  "get_inv_inertia_tensor_world(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_265_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_linear_velocity(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_linear_velocity_266(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-LVector3 BulletRigidBodyNode::get_linear_velocity(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_linear_velocity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_linear_velocity_266_comment =
  "C++ Interface:\n"
  "get_linear_velocity(BulletRigidBodyNode self)\n"
  "\n"
  "// Velocity\n"
  "\n"
  "// Velocity\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_linear_velocity_266_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_angular_velocity(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_angular_velocity_267(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-LVector3 BulletRigidBodyNode::get_angular_velocity(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_angular_velocity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_angular_velocity_267_comment =
  "C++ Interface:\n"
  "get_angular_velocity(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_angular_velocity_267_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_linear_velocity(LVector3 const &velocity)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_linear_velocity_268(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_linear_velocity")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::set_linear_velocity(LVector3 const &velocity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_linear_velocity", "LVector3f");
  }
  ((*local_this).set_linear_velocity)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_velocity(const BulletRigidBodyNode self, const LVector3f velocity)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_linear_velocity_268_comment =
  "C++ Interface:\n"
  "set_linear_velocity(const BulletRigidBodyNode self, const LVector3f velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_linear_velocity_268_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_angular_velocity(LVector3 const &velocity)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_angular_velocity_269(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_angular_velocity")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::set_angular_velocity(LVector3 const &velocity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_angular_velocity", "LVector3f");
  }
  ((*local_this).set_angular_velocity)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_velocity(const BulletRigidBodyNode self, const LVector3f velocity)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_angular_velocity_269_comment =
  "C++ Interface:\n"
  "set_angular_velocity(const BulletRigidBodyNode self, const LVector3f velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_angular_velocity_269_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRigidBodyNode::get_linear_damping(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_linear_damping_270(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletRigidBodyNode::get_linear_damping(void) const
  PN_stdfloat return_value = ((*(const BulletRigidBodyNode*)local_this).get_linear_damping)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_linear_damping_270_comment =
  "C++ Interface:\n"
  "get_linear_damping(BulletRigidBodyNode self)\n"
  "\n"
  "// Damping\n"
  "\n"
  "// Damping\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_linear_damping_270_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRigidBodyNode::get_angular_damping(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_angular_damping_271(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletRigidBodyNode::get_angular_damping(void) const
  PN_stdfloat return_value = ((*(const BulletRigidBodyNode*)local_this).get_angular_damping)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_angular_damping_271_comment =
  "C++ Interface:\n"
  "get_angular_damping(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_angular_damping_271_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_linear_damping(PN_stdfloat value)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_linear_damping_272(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_linear_damping")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::set_linear_damping(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_linear_damping)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_damping(const BulletRigidBodyNode self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_linear_damping_272_comment =
  "C++ Interface:\n"
  "set_linear_damping(const BulletRigidBodyNode self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_linear_damping_272_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_angular_damping(PN_stdfloat value)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_angular_damping_273(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_angular_damping")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::set_angular_damping(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_angular_damping)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_damping(const BulletRigidBodyNode self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_angular_damping_273_comment =
  "C++ Interface:\n"
  "set_angular_damping(const BulletRigidBodyNode self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_angular_damping_273_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::clear_forces(void)
 */
static PyObject *Dtool_BulletRigidBodyNode_clear_forces_274(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.clear_forces")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::clear_forces(void)
  ((*local_this).clear_forces)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_clear_forces_274_comment =
  "C++ Interface:\n"
  "clear_forces(const BulletRigidBodyNode self)\n"
  "\n"
  "// Forces\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_clear_forces_274_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::apply_force(LVector3 const &force, LPoint3 const &pos)
 */
static PyObject *Dtool_BulletRigidBodyNode_apply_force_275(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.apply_force")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::apply_force(LVector3 const &force, LPoint3 const &pos)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"force", "pos", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:apply_force", (char **)keyword_list, &param1, &param2)) {
    LVector3f param1_local;
    LVector3 const *param1_this = Dtool_Coerce_LVector3f(param1, param1_local);
    if (!(param1_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletRigidBodyNode.apply_force", "LVector3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletRigidBodyNode.apply_force", "LPoint3f");
    }
    ((*local_this).apply_force)(*param1_this, *param2_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_force(const BulletRigidBodyNode self, const LVector3f force, const LPoint3f pos)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_apply_force_275_comment =
  "C++ Interface:\n"
  "apply_force(const BulletRigidBodyNode self, const LVector3f force, const LPoint3f pos)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_apply_force_275_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::apply_central_force(LVector3 const &force)
 */
static PyObject *Dtool_BulletRigidBodyNode_apply_central_force_276(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.apply_central_force")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::apply_central_force(LVector3 const &force)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.apply_central_force", "LVector3f");
  }
  ((*local_this).apply_central_force)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_central_force(const BulletRigidBodyNode self, const LVector3f force)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_apply_central_force_276_comment =
  "C++ Interface:\n"
  "apply_central_force(const BulletRigidBodyNode self, const LVector3f force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_apply_central_force_276_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::apply_impulse(LVector3 const &impulse, LPoint3 const &pos)
 */
static PyObject *Dtool_BulletRigidBodyNode_apply_impulse_277(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.apply_impulse")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::apply_impulse(LVector3 const &impulse, LPoint3 const &pos)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"impulse", "pos", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:apply_impulse", (char **)keyword_list, &param1, &param2)) {
    LVector3f param1_local;
    LVector3 const *param1_this = Dtool_Coerce_LVector3f(param1, param1_local);
    if (!(param1_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletRigidBodyNode.apply_impulse", "LVector3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletRigidBodyNode.apply_impulse", "LPoint3f");
    }
    ((*local_this).apply_impulse)(*param1_this, *param2_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_impulse(const BulletRigidBodyNode self, const LVector3f impulse, const LPoint3f pos)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_apply_impulse_277_comment =
  "C++ Interface:\n"
  "apply_impulse(const BulletRigidBodyNode self, const LVector3f impulse, const LPoint3f pos)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_apply_impulse_277_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::apply_central_impulse(LVector3 const &impulse)
 */
static PyObject *Dtool_BulletRigidBodyNode_apply_central_impulse_278(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.apply_central_impulse")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::apply_central_impulse(LVector3 const &impulse)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.apply_central_impulse", "LVector3f");
  }
  ((*local_this).apply_central_impulse)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_central_impulse(const BulletRigidBodyNode self, const LVector3f impulse)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_apply_central_impulse_278_comment =
  "C++ Interface:\n"
  "apply_central_impulse(const BulletRigidBodyNode self, const LVector3f impulse)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_apply_central_impulse_278_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::apply_torque(LVector3 const &torque)
 */
static PyObject *Dtool_BulletRigidBodyNode_apply_torque_279(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.apply_torque")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::apply_torque(LVector3 const &torque)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.apply_torque", "LVector3f");
  }
  ((*local_this).apply_torque)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_torque(const BulletRigidBodyNode self, const LVector3f torque)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_apply_torque_279_comment =
  "C++ Interface:\n"
  "apply_torque(const BulletRigidBodyNode self, const LVector3f torque)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_apply_torque_279_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::apply_torque_impulse(LVector3 const &torque)
 */
static PyObject *Dtool_BulletRigidBodyNode_apply_torque_impulse_280(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.apply_torque_impulse")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::apply_torque_impulse(LVector3 const &torque)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.apply_torque_impulse", "LVector3f");
  }
  ((*local_this).apply_torque_impulse)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_torque_impulse(const BulletRigidBodyNode self, const LVector3f torque)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_apply_torque_impulse_280_comment =
  "C++ Interface:\n"
  "apply_torque_impulse(const BulletRigidBodyNode self, const LVector3f torque)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_apply_torque_impulse_280_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_total_force(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_total_force_281(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-LVector3 BulletRigidBodyNode::get_total_force(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_total_force)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_total_force_281_comment =
  "C++ Interface:\n"
  "get_total_force(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_total_force_281_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_total_torque(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_total_torque_282(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-LVector3 BulletRigidBodyNode::get_total_torque(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_total_torque)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_total_torque_282_comment =
  "C++ Interface:\n"
  "get_total_torque(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_total_torque_282_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRigidBodyNode::get_linear_sleep_threshold(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_283(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletRigidBodyNode::get_linear_sleep_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletRigidBodyNode*)local_this).get_linear_sleep_threshold)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_283_comment =
  "C++ Interface:\n"
  "get_linear_sleep_threshold(BulletRigidBodyNode self)\n"
  "\n"
  "// Deactivation thresholds\n"
  "\n"
  "// Deactivation thresholds\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_283_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRigidBodyNode::get_angular_sleep_threshold(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_284(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletRigidBodyNode::get_angular_sleep_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletRigidBodyNode*)local_this).get_angular_sleep_threshold)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_284_comment =
  "C++ Interface:\n"
  "get_angular_sleep_threshold(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_284_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_linear_sleep_threshold(PN_stdfloat threshold)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_285(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_linear_sleep_threshold")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::set_linear_sleep_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_linear_sleep_threshold)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_sleep_threshold(const BulletRigidBodyNode self, float threshold)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_285_comment =
  "C++ Interface:\n"
  "set_linear_sleep_threshold(const BulletRigidBodyNode self, float threshold)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_285_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_angular_sleep_threshold(PN_stdfloat threshold)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_286(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_angular_sleep_threshold")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::set_angular_sleep_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_angular_sleep_threshold)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_sleep_threshold(const BulletRigidBodyNode self, float threshold)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_286_comment =
  "C++ Interface:\n"
  "set_angular_sleep_threshold(const BulletRigidBodyNode self, float threshold)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_286_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_gravity(LVector3 const &gravity)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_gravity_287(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_gravity")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::set_gravity(LVector3 const &gravity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_gravity", "LVector3f");
  }
  ((*local_this).set_gravity)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_gravity(const BulletRigidBodyNode self, const LVector3f gravity)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_gravity_287_comment =
  "C++ Interface:\n"
  "set_gravity(const BulletRigidBodyNode self, const LVector3f gravity)\n"
  "\n"
  "// Gravity\n"
  "\n"
  "// Gravity\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_gravity_287_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_gravity(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_gravity_288(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-LVector3 BulletRigidBodyNode::get_gravity(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_gravity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_gravity_288_comment =
  "C++ Interface:\n"
  "get_gravity(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_gravity_288_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_linear_factor(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_linear_factor_289(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-LVector3 BulletRigidBodyNode::get_linear_factor(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_linear_factor)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_linear_factor_289_comment =
  "C++ Interface:\n"
  "get_linear_factor(BulletRigidBodyNode self)\n"
  "\n"
  "// Restrict movement\n"
  "\n"
  "// Restrict movement\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_linear_factor_289_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_angular_factor(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_angular_factor_290(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRigidBodyNode)) {
    return nullptr;
  }
  // 1-LVector3 BulletRigidBodyNode::get_angular_factor(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_angular_factor)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_angular_factor_290_comment =
  "C++ Interface:\n"
  "get_angular_factor(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_angular_factor_290_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_linear_factor(LVector3 const &factor)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_linear_factor_291(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_linear_factor")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::set_linear_factor(LVector3 const &factor)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_linear_factor", "LVector3f");
  }
  ((*local_this).set_linear_factor)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_factor(const BulletRigidBodyNode self, const LVector3f factor)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_linear_factor_291_comment =
  "C++ Interface:\n"
  "set_linear_factor(const BulletRigidBodyNode self, const LVector3f factor)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_linear_factor_291_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_angular_factor(LVector3 const &factor)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_angular_factor_292(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_angular_factor")) {
    return nullptr;
  }
  // 1-void BulletRigidBodyNode::set_angular_factor(LVector3 const &factor)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_angular_factor", "LVector3f");
  }
  ((*local_this).set_angular_factor)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_factor(const BulletRigidBodyNode self, const LVector3f factor)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_angular_factor_292_comment =
  "C++ Interface:\n"
  "set_angular_factor(const BulletRigidBodyNode self, const LVector3f factor)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_angular_factor_292_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletRigidBodyNode::pick_dirty_flag(void)
 */
static PyObject *Dtool_BulletRigidBodyNode_pick_dirty_flag_293(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.pick_dirty_flag")) {
    return nullptr;
  }
  // 1-bool BulletRigidBodyNode::pick_dirty_flag(void)
  bool return_value = ((*local_this).pick_dirty_flag)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_pick_dirty_flag_293_comment =
  "C++ Interface:\n"
  "pick_dirty_flag(const BulletRigidBodyNode self)\n"
  "\n"
  "// Special\n"
  "\n"
  "/**\n"
  " * Returns TRUE if the transform of the rigid body has changed at least once\n"
  " * since the last call to this method.\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_pick_dirty_flag_293_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletRigidBodyNode::get_class_type(void)
 */
static PyObject *Dtool_BulletRigidBodyNode_get_class_type_312(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletRigidBodyNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletRigidBodyNode::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_class_type_312_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletRigidBodyNode_get_class_type_312_comment = nullptr;
#endif

static PyObject *Dtool_BulletRigidBodyNode_mass_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletRigidBodyNode::get_mass(void) const
  PN_stdfloat return_value = ((*(const BulletRigidBodyNode*)local_this).get_mass)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletRigidBodyNode_mass_Setter(PyObject *self, PyObject *arg, void *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.mass")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete mass attribute");
    return -1;
  }
  // 1-void BulletRigidBodyNode::set_mass(PN_stdfloat mass)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_mass)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_mass(const BulletRigidBodyNode self, float mass)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletRigidBodyNode_inv_mass_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletRigidBodyNode::get_inv_mass(void) const
  PN_stdfloat return_value = ((*(const BulletRigidBodyNode*)local_this).get_inv_mass)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletRigidBodyNode_inertia_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletRigidBodyNode::get_inertia(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_inertia)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static int Dtool_BulletRigidBodyNode_inertia_Setter(PyObject *self, PyObject *arg, void *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.inertia")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete inertia attribute");
    return -1;
  }
  // 1-void BulletRigidBodyNode::set_inertia(LVecBase3 const &inertia)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_inertia", "LVecBase3f");
    return -1;
  }
  ((*local_this).set_inertia)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_inertia(const BulletRigidBodyNode self, const LVecBase3f inertia)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletRigidBodyNode_inv_inertia_diag_local_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletRigidBodyNode::get_inv_inertia_diag_local(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_inv_inertia_diag_local)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletRigidBodyNode_inv_inertia_tensor_world_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LMatrix3 BulletRigidBodyNode::get_inv_inertia_tensor_world(void) const
  LMatrix3 *return_value = new LMatrix3(((*(const BulletRigidBodyNode*)local_this).get_inv_inertia_tensor_world)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LMatrix3f, true, false);
}

static PyObject *Dtool_BulletRigidBodyNode_linear_velocity_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletRigidBodyNode::get_linear_velocity(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_linear_velocity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static int Dtool_BulletRigidBodyNode_linear_velocity_Setter(PyObject *self, PyObject *arg, void *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.linear_velocity")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete linear_velocity attribute");
    return -1;
  }
  // 1-void BulletRigidBodyNode::set_linear_velocity(LVector3 const &velocity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_linear_velocity", "LVector3f");
    return -1;
  }
  ((*local_this).set_linear_velocity)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_linear_velocity(const BulletRigidBodyNode self, const LVector3f velocity)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletRigidBodyNode_angular_velocity_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletRigidBodyNode::get_angular_velocity(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_angular_velocity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static int Dtool_BulletRigidBodyNode_angular_velocity_Setter(PyObject *self, PyObject *arg, void *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.angular_velocity")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete angular_velocity attribute");
    return -1;
  }
  // 1-void BulletRigidBodyNode::set_angular_velocity(LVector3 const &velocity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_angular_velocity", "LVector3f");
    return -1;
  }
  ((*local_this).set_angular_velocity)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_angular_velocity(const BulletRigidBodyNode self, const LVector3f velocity)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletRigidBodyNode_linear_damping_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletRigidBodyNode::get_linear_damping(void) const
  PN_stdfloat return_value = ((*(const BulletRigidBodyNode*)local_this).get_linear_damping)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletRigidBodyNode_linear_damping_Setter(PyObject *self, PyObject *arg, void *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.linear_damping")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete linear_damping attribute");
    return -1;
  }
  // 1-void BulletRigidBodyNode::set_linear_damping(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_linear_damping)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_linear_damping(const BulletRigidBodyNode self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletRigidBodyNode_angular_damping_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletRigidBodyNode::get_angular_damping(void) const
  PN_stdfloat return_value = ((*(const BulletRigidBodyNode*)local_this).get_angular_damping)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletRigidBodyNode_angular_damping_Setter(PyObject *self, PyObject *arg, void *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.angular_damping")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete angular_damping attribute");
    return -1;
  }
  // 1-void BulletRigidBodyNode::set_angular_damping(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_angular_damping)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_angular_damping(const BulletRigidBodyNode self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletRigidBodyNode_total_force_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletRigidBodyNode::get_total_force(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_total_force)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletRigidBodyNode_total_torque_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletRigidBodyNode::get_total_torque(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_total_torque)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletRigidBodyNode_linear_sleep_threshold_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletRigidBodyNode::get_linear_sleep_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletRigidBodyNode*)local_this).get_linear_sleep_threshold)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletRigidBodyNode_linear_sleep_threshold_Setter(PyObject *self, PyObject *arg, void *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.linear_sleep_threshold")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete linear_sleep_threshold attribute");
    return -1;
  }
  // 1-void BulletRigidBodyNode::set_linear_sleep_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_linear_sleep_threshold)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_linear_sleep_threshold(const BulletRigidBodyNode self, float threshold)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletRigidBodyNode_angular_sleep_threshold_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletRigidBodyNode::get_angular_sleep_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletRigidBodyNode*)local_this).get_angular_sleep_threshold)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletRigidBodyNode_angular_sleep_threshold_Setter(PyObject *self, PyObject *arg, void *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.angular_sleep_threshold")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete angular_sleep_threshold attribute");
    return -1;
  }
  // 1-void BulletRigidBodyNode::set_angular_sleep_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_angular_sleep_threshold)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_angular_sleep_threshold(const BulletRigidBodyNode self, float threshold)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletRigidBodyNode_gravity_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletRigidBodyNode::get_gravity(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_gravity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static int Dtool_BulletRigidBodyNode_gravity_Setter(PyObject *self, PyObject *arg, void *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.gravity")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete gravity attribute");
    return -1;
  }
  // 1-void BulletRigidBodyNode::set_gravity(LVector3 const &gravity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_gravity", "LVector3f");
    return -1;
  }
  ((*local_this).set_gravity)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_gravity(const BulletRigidBodyNode self, const LVector3f gravity)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletRigidBodyNode_linear_factor_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletRigidBodyNode::get_linear_factor(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_linear_factor)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static int Dtool_BulletRigidBodyNode_linear_factor_Setter(PyObject *self, PyObject *arg, void *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.linear_factor")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete linear_factor attribute");
    return -1;
  }
  // 1-void BulletRigidBodyNode::set_linear_factor(LVector3 const &factor)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_linear_factor", "LVector3f");
    return -1;
  }
  ((*local_this).set_linear_factor)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_linear_factor(const BulletRigidBodyNode self, const LVector3f factor)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletRigidBodyNode_angular_factor_Getter(PyObject *self, void *) {
  const BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletRigidBodyNode::get_angular_factor(void) const
  LVector3 *return_value = new LVector3(((*(const BulletRigidBodyNode*)local_this).get_angular_factor)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static int Dtool_BulletRigidBodyNode_angular_factor_Setter(PyObject *self, PyObject *arg, void *) {
  BulletRigidBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.angular_factor")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete angular_factor attribute");
    return -1;
  }
  // 1-void BulletRigidBodyNode::set_angular_factor(LVector3 const &factor)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_angular_factor", "LVector3f");
    return -1;
  }
  ((*local_this).set_angular_factor)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_angular_factor(const BulletRigidBodyNode self, const LVector3f factor)\n");
  }
  return -1;
}

/**
 * Python function wrapper for:
 * explicit BulletRigidBodyNode::BulletRigidBodyNode(char const *name = "rigid")
 */
static int Dtool_Init_BulletRigidBodyNode(PyObject *self, PyObject *args, PyObject *kwds) {
  // 1-explicit BulletRigidBodyNode::BulletRigidBodyNode(char const *name = "rigid")
  char const *param0 = "rigid";
  static const char *keyword_list[] = {"name", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "|z:BulletRigidBodyNode", (char **)keyword_list, &param0)) {
    BulletRigidBodyNode *return_value = new BulletRigidBodyNode((char const *)param0);
    if (return_value == nullptr) {
      PyErr_NoMemory();
      return -1;
    }
    return_value->ref();
    if (Dtool_CheckErrorOccurred()) {
      unref_delete(return_value);
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletRigidBodyNode, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletRigidBodyNode(str name)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletRigidBodyNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletRigidBodyNode) {
    printf("BulletRigidBodyNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletRigidBodyNode *local_this = (BulletRigidBodyNode *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletRigidBodyNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletBodyNode) {
    return (BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletRigidBodyNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletRigidBodyNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletBodyNode) {
    BulletBodyNode* other_this = (BulletBodyNode*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletConeTwistConstraint
 */
/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_limit(PN_stdfloat swing1, PN_stdfloat swing2, PN_stdfloat twist, PN_stdfloat softness = 1.0, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0)
 * void BulletConeTwistConstraint::set_limit(int index, PN_stdfloat value)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_limit_321(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletConeTwistConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_limit")) {
    return nullptr;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-void BulletConeTwistConstraint::set_limit(int index, PN_stdfloat value)
      int param1;
      float param2;
      static const char *keyword_list[] = {"index", "value", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "if:set_limit", (char **)keyword_list, &param1, &param2)) {
        ((*local_this).set_limit)((int)param1, (PN_stdfloat)param2);
        return Dtool_Return_None();
      }
    }
    break;
  case 3:
  case 4:
  case 5:
  case 6:
    {
      // 1-void BulletConeTwistConstraint::set_limit(PN_stdfloat swing1, PN_stdfloat swing2, PN_stdfloat twist, PN_stdfloat softness = 1.0, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0)
      float param1;
      float param2;
      float param3;
      float param4 = 1.0;
      float param5 = 0.30000000000000007;
      float param6 = 1.0;
      static const char *keyword_list[] = {"swing1", "swing2", "twist", "softness", "bias", "relaxation", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "fff|fff:set_limit", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5, &param6)) {
        ((*local_this).set_limit)((PN_stdfloat)param1, (PN_stdfloat)param2, (PN_stdfloat)param3, (PN_stdfloat)param4, (PN_stdfloat)param5, (PN_stdfloat)param6);
        return Dtool_Return_None();
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "set_limit() takes 3, 4, 5, 6 or 7 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_limit(const BulletConeTwistConstraint self, int index, float value)\n"
      "set_limit(const BulletConeTwistConstraint self, float swing1, float swing2, float twist, float softness, float bias, float relaxation)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_limit_321_comment =
  "C++ Interface:\n"
  "set_limit(const BulletConeTwistConstraint self, int index, float value)\n"
  "set_limit(const BulletConeTwistConstraint self, float swing1, float swing2, float twist, float softness, float bias, float relaxation)\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_limit_321_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_damping(PN_stdfloat damping)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_damping_322(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_damping")) {
    return nullptr;
  }
  // 1-void BulletConeTwistConstraint::set_damping(PN_stdfloat damping)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_damping)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_damping(const BulletConeTwistConstraint self, float damping)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_damping_322_comment =
  "C++ Interface:\n"
  "set_damping(const BulletConeTwistConstraint self, float damping)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_damping_322_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletConeTwistConstraint::get_fix_threshold(void) const
 */
static PyObject *Dtool_BulletConeTwistConstraint_get_fix_threshold_323(PyObject *self, PyObject *) {
  BulletConeTwistConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletConeTwistConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletConeTwistConstraint::get_fix_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletConeTwistConstraint*)local_this).get_fix_threshold)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_get_fix_threshold_323_comment =
  "C++ Interface:\n"
  "get_fix_threshold(BulletConeTwistConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_get_fix_threshold_323_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_fix_threshold(PN_stdfloat threshold)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_fix_threshold_324(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_fix_threshold")) {
    return nullptr;
  }
  // 1-void BulletConeTwistConstraint::set_fix_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_fix_threshold)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_fix_threshold(const BulletConeTwistConstraint self, float threshold)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_fix_threshold_324_comment =
  "C++ Interface:\n"
  "set_fix_threshold(const BulletConeTwistConstraint self, float threshold)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_fix_threshold_324_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::enable_motor(bool enable)
 */
static PyObject *Dtool_BulletConeTwistConstraint_enable_motor_325(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.enable_motor")) {
    return nullptr;
  }
  // 1-void BulletConeTwistConstraint::enable_motor(bool enable)
  ((*local_this).enable_motor)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "enable_motor(const BulletConeTwistConstraint self, bool enable)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_enable_motor_325_comment =
  "C++ Interface:\n"
  "enable_motor(const BulletConeTwistConstraint self, bool enable)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_enable_motor_325_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_max_motor_impulse(PN_stdfloat max_impulse)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_max_motor_impulse_326(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_max_motor_impulse")) {
    return nullptr;
  }
  // 1-void BulletConeTwistConstraint::set_max_motor_impulse(PN_stdfloat max_impulse)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_motor_impulse)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_motor_impulse(const BulletConeTwistConstraint self, float max_impulse)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_max_motor_impulse_326_comment =
  "C++ Interface:\n"
  "set_max_motor_impulse(const BulletConeTwistConstraint self, float max_impulse)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_max_motor_impulse_326_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_max_motor_impulse_normalized(PN_stdfloat max_impulse)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_327(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_max_motor_impulse_normalized")) {
    return nullptr;
  }
  // 1-void BulletConeTwistConstraint::set_max_motor_impulse_normalized(PN_stdfloat max_impulse)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_motor_impulse_normalized)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_motor_impulse_normalized(const BulletConeTwistConstraint self, float max_impulse)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_327_comment =
  "C++ Interface:\n"
  "set_max_motor_impulse_normalized(const BulletConeTwistConstraint self, float max_impulse)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_327_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_motor_target(LQuaternion const &quat)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_motor_target_328(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_motor_target")) {
    return nullptr;
  }
  // 1-void BulletConeTwistConstraint::set_motor_target(LQuaternion const &quat)
  LQuaternionf arg_local;
  LQuaternion const *arg_this = Dtool_Coerce_LQuaternionf(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletConeTwistConstraint.set_motor_target", "LQuaternionf");
  }
  ((*local_this).set_motor_target)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_motor_target(const BulletConeTwistConstraint self, const LQuaternionf quat)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_motor_target_328_comment =
  "C++ Interface:\n"
  "set_motor_target(const BulletConeTwistConstraint self, const LQuaternionf quat)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_motor_target_328_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_motor_target_in_constraint_space(LQuaternion const &quat)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_329(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_motor_target_in_constraint_space")) {
    return nullptr;
  }
  // 1-void BulletConeTwistConstraint::set_motor_target_in_constraint_space(LQuaternion const &quat)
  LQuaternionf arg_local;
  LQuaternion const *arg_this = Dtool_Coerce_LQuaternionf(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletConeTwistConstraint.set_motor_target_in_constraint_space", "LQuaternionf");
  }
  ((*local_this).set_motor_target_in_constraint_space)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_motor_target_in_constraint_space(const BulletConeTwistConstraint self, const LQuaternionf quat)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_329_comment =
  "C++ Interface:\n"
  "set_motor_target_in_constraint_space(const BulletConeTwistConstraint self, const LQuaternionf quat)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_329_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_frames_330(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletConeTwistConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_frames")) {
    return nullptr;
  }
  // 1-void BulletConeTwistConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"ts_a", "ts_b", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:set_frames", (char **)keyword_list, &param1, &param2)) {
    TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletConeTwistConstraint.set_frames", true, true);
    TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletConeTwistConstraint.set_frames", true, true);
    if (param1_this != nullptr && param2_this != nullptr) {
      ((*local_this).set_frames)(param1_this, param2_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_frames(const BulletConeTwistConstraint self, const TransformState ts_a, const TransformState ts_b)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_frames_330_comment =
  "C++ Interface:\n"
  "set_frames(const BulletConeTwistConstraint self, const TransformState ts_a, const TransformState ts_b)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_frames_330_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_a(void) const
 */
static PyObject *Dtool_BulletConeTwistConstraint_get_frame_a_331(PyObject *self, PyObject *) {
  BulletConeTwistConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletConeTwistConstraint)) {
    return nullptr;
  }
  // 1-ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_a(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletConeTwistConstraint*)local_this).get_frame_a)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_get_frame_a_331_comment =
  "C++ Interface:\n"
  "get_frame_a(BulletConeTwistConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_get_frame_a_331_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_b(void) const
 */
static PyObject *Dtool_BulletConeTwistConstraint_get_frame_b_332(PyObject *self, PyObject *) {
  BulletConeTwistConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletConeTwistConstraint)) {
    return nullptr;
  }
  // 1-ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_b(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletConeTwistConstraint*)local_this).get_frame_b)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_get_frame_b_332_comment =
  "C++ Interface:\n"
  "get_frame_b(BulletConeTwistConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_get_frame_b_332_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletConeTwistConstraint::get_class_type(void)
 */
static PyObject *Dtool_BulletConeTwistConstraint_get_class_type_336(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletConeTwistConstraint::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletConeTwistConstraint::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_get_class_type_336_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletConeTwistConstraint_get_class_type_336_comment = nullptr;
#endif

static PyObject *Dtool_BulletConeTwistConstraint_fix_threshold_Getter(PyObject *self, void *) {
  const BulletConeTwistConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConeTwistConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletConeTwistConstraint::get_fix_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletConeTwistConstraint*)local_this).get_fix_threshold)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletConeTwistConstraint_fix_threshold_Setter(PyObject *self, PyObject *arg, void *) {
  BulletConeTwistConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.fix_threshold")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete fix_threshold attribute");
    return -1;
  }
  // 1-void BulletConeTwistConstraint::set_fix_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_fix_threshold)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_fix_threshold(const BulletConeTwistConstraint self, float threshold)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletConeTwistConstraint_frame_a_Getter(PyObject *self, void *) {
  const BulletConeTwistConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConeTwistConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_a(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletConeTwistConstraint*)local_this).get_frame_a)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

static PyObject *Dtool_BulletConeTwistConstraint_frame_b_Getter(PyObject *self, void *) {
  const BulletConeTwistConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConeTwistConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_b(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletConeTwistConstraint*)local_this).get_frame_b)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

/**
 * Python function wrapper for:
 * explicit BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b)
 * explicit BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a)
 */
static int Dtool_Init_BulletConeTwistConstraint(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-explicit BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a)
      PyObject *param0;
      PyObject *param1;
      static const char *keyword_list[] = {"node_a", "frame_a", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletConeTwistConstraint", (char **)keyword_list, &param0, &param1)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletConeTwistConstraint.BulletConeTwistConstraint", true, true);
        TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletConeTwistConstraint.BulletConeTwistConstraint", true, true);
        if (param0_this != nullptr && param1_this != nullptr) {
          BulletConeTwistConstraint *return_value = new BulletConeTwistConstraint(param0_this, param1_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConeTwistConstraint, true, false);
        }
      }
    }
    break;
  case 4:
    {
      // 1-explicit BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      static const char *keyword_list[] = {"node_a", "node_b", "frame_a", "frame_b", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:BulletConeTwistConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletConeTwistConstraint.BulletConeTwistConstraint", true, true);
        BulletRigidBodyNode const *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletConeTwistConstraint.BulletConeTwistConstraint", true, true);
        TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletConeTwistConstraint.BulletConeTwistConstraint", true, true);
        TransformState const *param3_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param3, Dtool_Ptr_TransformState, 3, "BulletConeTwistConstraint.BulletConeTwistConstraint", true, true);
        if (param0_this != nullptr && param1_this != nullptr && param2_this != nullptr && param3_this != nullptr) {
          BulletConeTwistConstraint *return_value = new BulletConeTwistConstraint(param0_this, param1_this, param2_this, param3_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConeTwistConstraint, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletConeTwistConstraint() takes 2 or 4 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletConeTwistConstraint(const BulletRigidBodyNode node_a, const TransformState frame_a)\n"
      "BulletConeTwistConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const TransformState frame_a, const TransformState frame_b)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletConeTwistConstraint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletConeTwistConstraint) {
    printf("BulletConeTwistConstraint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletConeTwistConstraint *local_this = (BulletConeTwistConstraint *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletConeTwistConstraint) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletConstraint) {
    return (BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletConeTwistConstraint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletConeTwistConstraint) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletConstraint) {
    BulletConstraint* other_this = (BulletConstraint*)from_this;
    return (BulletConeTwistConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletConeTwistConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletConeTwistConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletConeTwistConstraint*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletManifoldPoint
 */
/**
 * Python function wrapper for:
 * int BulletManifoldPoint::get_life_time(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_life_time_339(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-int BulletManifoldPoint::get_life_time(void) const
  int return_value = ((*(const BulletManifoldPoint*)local_this).get_life_time)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_life_time_339_comment =
  "C++ Interface:\n"
  "get_life_time(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_life_time_339_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletManifoldPoint::get_distance(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_distance_340(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletManifoldPoint::get_distance(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_distance)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_distance_340_comment =
  "C++ Interface:\n"
  "get_distance(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_distance_340_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletManifoldPoint::get_applied_impulse(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_applied_impulse_341(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletManifoldPoint::get_applied_impulse(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_applied_impulse)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_applied_impulse_341_comment =
  "C++ Interface:\n"
  "get_applied_impulse(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_applied_impulse_341_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletManifoldPoint::get_position_world_on_a(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_position_world_on_a_342(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-LPoint3 BulletManifoldPoint::get_position_world_on_a(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletManifoldPoint*)local_this).get_position_world_on_a)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_position_world_on_a_342_comment =
  "C++ Interface:\n"
  "get_position_world_on_a(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_position_world_on_a_342_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletManifoldPoint::get_position_world_on_b(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_position_world_on_b_343(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-LPoint3 BulletManifoldPoint::get_position_world_on_b(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletManifoldPoint*)local_this).get_position_world_on_b)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_position_world_on_b_343_comment =
  "C++ Interface:\n"
  "get_position_world_on_b(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_position_world_on_b_343_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletManifoldPoint::get_normal_world_on_b(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_normal_world_on_b_344(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-LVector3 BulletManifoldPoint::get_normal_world_on_b(void) const
  LVector3 *return_value = new LVector3(((*(const BulletManifoldPoint*)local_this).get_normal_world_on_b)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_normal_world_on_b_344_comment =
  "C++ Interface:\n"
  "get_normal_world_on_b(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_normal_world_on_b_344_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletManifoldPoint::get_local_point_a(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_local_point_a_345(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-LPoint3 BulletManifoldPoint::get_local_point_a(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletManifoldPoint*)local_this).get_local_point_a)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_local_point_a_345_comment =
  "C++ Interface:\n"
  "get_local_point_a(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_local_point_a_345_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletManifoldPoint::get_local_point_b(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_local_point_b_346(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-LPoint3 BulletManifoldPoint::get_local_point_b(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletManifoldPoint*)local_this).get_local_point_b)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_local_point_b_346_comment =
  "C++ Interface:\n"
  "get_local_point_b(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_local_point_b_346_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletManifoldPoint::get_part_id0(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_part_id0_347(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-int BulletManifoldPoint::get_part_id0(void) const
  int return_value = ((*(const BulletManifoldPoint*)local_this).get_part_id0)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_part_id0_347_comment =
  "C++ Interface:\n"
  "get_part_id0(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_part_id0_347_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletManifoldPoint::get_part_id1(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_part_id1_348(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-int BulletManifoldPoint::get_part_id1(void) const
  int return_value = ((*(const BulletManifoldPoint*)local_this).get_part_id1)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_part_id1_348_comment =
  "C++ Interface:\n"
  "get_part_id1(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_part_id1_348_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletManifoldPoint::get_index0(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_index0_349(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-int BulletManifoldPoint::get_index0(void) const
  int return_value = ((*(const BulletManifoldPoint*)local_this).get_index0)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_index0_349_comment =
  "C++ Interface:\n"
  "get_index0(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_index0_349_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletManifoldPoint::get_index1(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_index1_350(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-int BulletManifoldPoint::get_index1(void) const
  int return_value = ((*(const BulletManifoldPoint*)local_this).get_index1)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_index1_350_comment =
  "C++ Interface:\n"
  "get_index1(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_index1_350_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletManifoldPoint::set_lateral_friction_initialized(bool value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_lateral_friction_initialized_351(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_lateral_friction_initialized")) {
    return nullptr;
  }
  // 1-void BulletManifoldPoint::set_lateral_friction_initialized(bool value)
  ((*local_this).set_lateral_friction_initialized)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_lateral_friction_initialized(const BulletManifoldPoint self, bool value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_lateral_friction_initialized_351_comment =
  "C++ Interface:\n"
  "set_lateral_friction_initialized(const BulletManifoldPoint self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_lateral_friction_initialized_351_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletManifoldPoint::set_lateral_friction_dir1(LVecBase3 const &dir)
 */
static PyObject *Dtool_BulletManifoldPoint_set_lateral_friction_dir1_352(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_lateral_friction_dir1")) {
    return nullptr;
  }
  // 1-void BulletManifoldPoint::set_lateral_friction_dir1(LVecBase3 const &dir)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletManifoldPoint.set_lateral_friction_dir1", "LVecBase3f");
  }
  ((*local_this).set_lateral_friction_dir1)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_lateral_friction_dir1(const BulletManifoldPoint self, const LVecBase3f dir)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_lateral_friction_dir1_352_comment =
  "C++ Interface:\n"
  "set_lateral_friction_dir1(const BulletManifoldPoint self, const LVecBase3f dir)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_lateral_friction_dir1_352_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletManifoldPoint::set_lateral_friction_dir2(LVecBase3 const &dir)
 */
static PyObject *Dtool_BulletManifoldPoint_set_lateral_friction_dir2_353(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_lateral_friction_dir2")) {
    return nullptr;
  }
  // 1-void BulletManifoldPoint::set_lateral_friction_dir2(LVecBase3 const &dir)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletManifoldPoint.set_lateral_friction_dir2", "LVecBase3f");
  }
  ((*local_this).set_lateral_friction_dir2)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_lateral_friction_dir2(const BulletManifoldPoint self, const LVecBase3f dir)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_lateral_friction_dir2_353_comment =
  "C++ Interface:\n"
  "set_lateral_friction_dir2(const BulletManifoldPoint self, const LVecBase3f dir)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_lateral_friction_dir2_353_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletManifoldPoint::set_contact_motion1(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_contact_motion1_354(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_contact_motion1")) {
    return nullptr;
  }
  // 1-void BulletManifoldPoint::set_contact_motion1(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_contact_motion1)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_contact_motion1(const BulletManifoldPoint self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_contact_motion1_354_comment =
  "C++ Interface:\n"
  "set_contact_motion1(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_contact_motion1_354_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletManifoldPoint::set_contact_motion2(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_contact_motion2_355(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_contact_motion2")) {
    return nullptr;
  }
  // 1-void BulletManifoldPoint::set_contact_motion2(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_contact_motion2)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_contact_motion2(const BulletManifoldPoint self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_contact_motion2_355_comment =
  "C++ Interface:\n"
  "set_contact_motion2(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_contact_motion2_355_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletManifoldPoint::set_combined_friction(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_combined_friction_356(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_combined_friction")) {
    return nullptr;
  }
  // 1-void BulletManifoldPoint::set_combined_friction(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_combined_friction)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_combined_friction(const BulletManifoldPoint self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_combined_friction_356_comment =
  "C++ Interface:\n"
  "set_combined_friction(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_combined_friction_356_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletManifoldPoint::set_combined_restitution(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_combined_restitution_357(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_combined_restitution")) {
    return nullptr;
  }
  // 1-void BulletManifoldPoint::set_combined_restitution(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_combined_restitution)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_combined_restitution(const BulletManifoldPoint self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_combined_restitution_357_comment =
  "C++ Interface:\n"
  "set_combined_restitution(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_combined_restitution_357_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletManifoldPoint::set_applied_impulse(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_applied_impulse_358(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_applied_impulse")) {
    return nullptr;
  }
  // 1-void BulletManifoldPoint::set_applied_impulse(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_applied_impulse)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_applied_impulse(const BulletManifoldPoint self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_applied_impulse_358_comment =
  "C++ Interface:\n"
  "set_applied_impulse(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_applied_impulse_358_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletManifoldPoint::set_applied_impulse_lateral1(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_359(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_applied_impulse_lateral1")) {
    return nullptr;
  }
  // 1-void BulletManifoldPoint::set_applied_impulse_lateral1(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_applied_impulse_lateral1)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_applied_impulse_lateral1(const BulletManifoldPoint self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_359_comment =
  "C++ Interface:\n"
  "set_applied_impulse_lateral1(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_359_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletManifoldPoint::set_applied_impulse_lateral2(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_360(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_applied_impulse_lateral2")) {
    return nullptr;
  }
  // 1-void BulletManifoldPoint::set_applied_impulse_lateral2(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_applied_impulse_lateral2)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_applied_impulse_lateral2(const BulletManifoldPoint self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_360_comment =
  "C++ Interface:\n"
  "set_applied_impulse_lateral2(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_360_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletManifoldPoint::set_contact_cfm1(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_contact_cfm1_361(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_contact_cfm1")) {
    return nullptr;
  }
  // 1-void BulletManifoldPoint::set_contact_cfm1(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_contact_cfm1)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_contact_cfm1(const BulletManifoldPoint self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_contact_cfm1_361_comment =
  "C++ Interface:\n"
  "set_contact_cfm1(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_contact_cfm1_361_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletManifoldPoint::set_contact_cfm2(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_contact_cfm2_362(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_contact_cfm2")) {
    return nullptr;
  }
  // 1-void BulletManifoldPoint::set_contact_cfm2(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_contact_cfm2)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_contact_cfm2(const BulletManifoldPoint self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_contact_cfm2_362_comment =
  "C++ Interface:\n"
  "set_contact_cfm2(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_contact_cfm2_362_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletManifoldPoint::get_lateral_friction_initialized(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_lateral_friction_initialized_363(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-bool BulletManifoldPoint::get_lateral_friction_initialized(void) const
  bool return_value = ((*(const BulletManifoldPoint*)local_this).get_lateral_friction_initialized)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_lateral_friction_initialized_363_comment =
  "C++ Interface:\n"
  "get_lateral_friction_initialized(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_lateral_friction_initialized_363_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletManifoldPoint::get_lateral_friction_dir1(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_lateral_friction_dir1_364(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-LVector3 BulletManifoldPoint::get_lateral_friction_dir1(void) const
  LVector3 *return_value = new LVector3(((*(const BulletManifoldPoint*)local_this).get_lateral_friction_dir1)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_lateral_friction_dir1_364_comment =
  "C++ Interface:\n"
  "get_lateral_friction_dir1(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_lateral_friction_dir1_364_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletManifoldPoint::get_lateral_friction_dir2(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_lateral_friction_dir2_365(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-LVector3 BulletManifoldPoint::get_lateral_friction_dir2(void) const
  LVector3 *return_value = new LVector3(((*(const BulletManifoldPoint*)local_this).get_lateral_friction_dir2)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_lateral_friction_dir2_365_comment =
  "C++ Interface:\n"
  "get_lateral_friction_dir2(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_lateral_friction_dir2_365_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletManifoldPoint::get_contact_motion1(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_contact_motion1_366(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletManifoldPoint::get_contact_motion1(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_contact_motion1)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_contact_motion1_366_comment =
  "C++ Interface:\n"
  "get_contact_motion1(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_contact_motion1_366_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletManifoldPoint::get_contact_motion2(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_contact_motion2_367(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletManifoldPoint::get_contact_motion2(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_contact_motion2)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_contact_motion2_367_comment =
  "C++ Interface:\n"
  "get_contact_motion2(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_contact_motion2_367_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletManifoldPoint::get_combined_friction(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_combined_friction_368(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletManifoldPoint::get_combined_friction(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_combined_friction)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_combined_friction_368_comment =
  "C++ Interface:\n"
  "get_combined_friction(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_combined_friction_368_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletManifoldPoint::get_combined_restitution(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_combined_restitution_369(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletManifoldPoint::get_combined_restitution(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_combined_restitution)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_combined_restitution_369_comment =
  "C++ Interface:\n"
  "get_combined_restitution(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_combined_restitution_369_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral1(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_370(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral1(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_applied_impulse_lateral1)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_370_comment =
  "C++ Interface:\n"
  "get_applied_impulse_lateral1(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_370_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral2(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_371(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral2(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_applied_impulse_lateral2)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_371_comment =
  "C++ Interface:\n"
  "get_applied_impulse_lateral2(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_371_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletManifoldPoint::get_contact_cfm1(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_contact_cfm1_372(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletManifoldPoint::get_contact_cfm1(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_contact_cfm1)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_contact_cfm1_372_comment =
  "C++ Interface:\n"
  "get_contact_cfm1(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_contact_cfm1_372_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletManifoldPoint::get_contact_cfm2(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_contact_cfm2_373(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletManifoldPoint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletManifoldPoint::get_contact_cfm2(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_contact_cfm2)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_contact_cfm2_373_comment =
  "C++ Interface:\n"
  "get_contact_cfm2(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_contact_cfm2_373_comment = nullptr;
#endif

static PyObject *Dtool_BulletManifoldPoint_life_time_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletManifoldPoint::get_life_time(void) const
  int return_value = ((*(const BulletManifoldPoint*)local_this).get_life_time)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletManifoldPoint_distance_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletManifoldPoint::get_distance(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_distance)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletManifoldPoint_applied_impulse_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletManifoldPoint::get_applied_impulse(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_applied_impulse)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletManifoldPoint_applied_impulse_Setter(PyObject *self, PyObject *arg, void *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.applied_impulse")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete applied_impulse attribute");
    return -1;
  }
  // 1-void BulletManifoldPoint::set_applied_impulse(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_applied_impulse)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_applied_impulse(const BulletManifoldPoint self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletManifoldPoint_position_world_on_a_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletManifoldPoint::get_position_world_on_a(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletManifoldPoint*)local_this).get_position_world_on_a)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletManifoldPoint_position_world_on_b_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletManifoldPoint::get_position_world_on_b(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletManifoldPoint*)local_this).get_position_world_on_b)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletManifoldPoint_normal_world_on_b_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletManifoldPoint::get_normal_world_on_b(void) const
  LVector3 *return_value = new LVector3(((*(const BulletManifoldPoint*)local_this).get_normal_world_on_b)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletManifoldPoint_local_point_a_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletManifoldPoint::get_local_point_a(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletManifoldPoint*)local_this).get_local_point_a)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletManifoldPoint_local_point_b_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletManifoldPoint::get_local_point_b(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletManifoldPoint*)local_this).get_local_point_b)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletManifoldPoint_part_id0_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletManifoldPoint::get_part_id0(void) const
  int return_value = ((*(const BulletManifoldPoint*)local_this).get_part_id0)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletManifoldPoint_part_id1_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletManifoldPoint::get_part_id1(void) const
  int return_value = ((*(const BulletManifoldPoint*)local_this).get_part_id1)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletManifoldPoint_index0_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletManifoldPoint::get_index0(void) const
  int return_value = ((*(const BulletManifoldPoint*)local_this).get_index0)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletManifoldPoint_index1_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletManifoldPoint::get_index1(void) const
  int return_value = ((*(const BulletManifoldPoint*)local_this).get_index1)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletManifoldPoint_lateral_friction_initialized_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletManifoldPoint::get_lateral_friction_initialized(void) const
  bool return_value = ((*(const BulletManifoldPoint*)local_this).get_lateral_friction_initialized)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletManifoldPoint_lateral_friction_initialized_Setter(PyObject *self, PyObject *arg, void *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.lateral_friction_initialized")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete lateral_friction_initialized attribute");
    return -1;
  }
  // 1-void BulletManifoldPoint::set_lateral_friction_initialized(bool value)
  ((*local_this).set_lateral_friction_initialized)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_lateral_friction_initialized(const BulletManifoldPoint self, bool value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletManifoldPoint_lateral_friction_dir1_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletManifoldPoint::get_lateral_friction_dir1(void) const
  LVector3 *return_value = new LVector3(((*(const BulletManifoldPoint*)local_this).get_lateral_friction_dir1)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static int Dtool_BulletManifoldPoint_lateral_friction_dir1_Setter(PyObject *self, PyObject *arg, void *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.lateral_friction_dir1")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete lateral_friction_dir1 attribute");
    return -1;
  }
  // 1-void BulletManifoldPoint::set_lateral_friction_dir1(LVecBase3 const &dir)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletManifoldPoint.set_lateral_friction_dir1", "LVecBase3f");
    return -1;
  }
  ((*local_this).set_lateral_friction_dir1)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_lateral_friction_dir1(const BulletManifoldPoint self, const LVecBase3f dir)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletManifoldPoint_lateral_friction_dir2_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletManifoldPoint::get_lateral_friction_dir2(void) const
  LVector3 *return_value = new LVector3(((*(const BulletManifoldPoint*)local_this).get_lateral_friction_dir2)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static int Dtool_BulletManifoldPoint_lateral_friction_dir2_Setter(PyObject *self, PyObject *arg, void *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.lateral_friction_dir2")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete lateral_friction_dir2 attribute");
    return -1;
  }
  // 1-void BulletManifoldPoint::set_lateral_friction_dir2(LVecBase3 const &dir)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletManifoldPoint.set_lateral_friction_dir2", "LVecBase3f");
    return -1;
  }
  ((*local_this).set_lateral_friction_dir2)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_lateral_friction_dir2(const BulletManifoldPoint self, const LVecBase3f dir)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletManifoldPoint_contact_motion1_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletManifoldPoint::get_contact_motion1(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_contact_motion1)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletManifoldPoint_contact_motion1_Setter(PyObject *self, PyObject *arg, void *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.contact_motion1")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete contact_motion1 attribute");
    return -1;
  }
  // 1-void BulletManifoldPoint::set_contact_motion1(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_contact_motion1)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_contact_motion1(const BulletManifoldPoint self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletManifoldPoint_contact_motion2_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletManifoldPoint::get_contact_motion2(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_contact_motion2)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletManifoldPoint_contact_motion2_Setter(PyObject *self, PyObject *arg, void *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.contact_motion2")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete contact_motion2 attribute");
    return -1;
  }
  // 1-void BulletManifoldPoint::set_contact_motion2(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_contact_motion2)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_contact_motion2(const BulletManifoldPoint self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletManifoldPoint_combined_friction_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletManifoldPoint::get_combined_friction(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_combined_friction)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletManifoldPoint_combined_friction_Setter(PyObject *self, PyObject *arg, void *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.combined_friction")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete combined_friction attribute");
    return -1;
  }
  // 1-void BulletManifoldPoint::set_combined_friction(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_combined_friction)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_combined_friction(const BulletManifoldPoint self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletManifoldPoint_combined_restitution_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletManifoldPoint::get_combined_restitution(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_combined_restitution)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletManifoldPoint_combined_restitution_Setter(PyObject *self, PyObject *arg, void *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.combined_restitution")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete combined_restitution attribute");
    return -1;
  }
  // 1-void BulletManifoldPoint::set_combined_restitution(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_combined_restitution)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_combined_restitution(const BulletManifoldPoint self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletManifoldPoint_applied_impulse_lateral1_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral1(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_applied_impulse_lateral1)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletManifoldPoint_applied_impulse_lateral1_Setter(PyObject *self, PyObject *arg, void *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.applied_impulse_lateral1")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete applied_impulse_lateral1 attribute");
    return -1;
  }
  // 1-void BulletManifoldPoint::set_applied_impulse_lateral1(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_applied_impulse_lateral1)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_applied_impulse_lateral1(const BulletManifoldPoint self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletManifoldPoint_applied_impulse_lateral2_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral2(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_applied_impulse_lateral2)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletManifoldPoint_applied_impulse_lateral2_Setter(PyObject *self, PyObject *arg, void *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.applied_impulse_lateral2")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete applied_impulse_lateral2 attribute");
    return -1;
  }
  // 1-void BulletManifoldPoint::set_applied_impulse_lateral2(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_applied_impulse_lateral2)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_applied_impulse_lateral2(const BulletManifoldPoint self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletManifoldPoint_contact_cfm1_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletManifoldPoint::get_contact_cfm1(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_contact_cfm1)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletManifoldPoint_contact_cfm1_Setter(PyObject *self, PyObject *arg, void *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.contact_cfm1")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete contact_cfm1 attribute");
    return -1;
  }
  // 1-void BulletManifoldPoint::set_contact_cfm1(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_contact_cfm1)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_contact_cfm1(const BulletManifoldPoint self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletManifoldPoint_contact_cfm2_Getter(PyObject *self, void *) {
  const BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletManifoldPoint::get_contact_cfm2(void) const
  PN_stdfloat return_value = ((*(const BulletManifoldPoint*)local_this).get_contact_cfm2)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletManifoldPoint_contact_cfm2_Setter(PyObject *self, PyObject *arg, void *) {
  BulletManifoldPoint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.contact_cfm2")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete contact_cfm2 attribute");
    return -1;
  }
  // 1-void BulletManifoldPoint::set_contact_cfm2(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_contact_cfm2)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_contact_cfm2(const BulletManifoldPoint self, float value)\n");
  }
  return -1;
}

static int Dtool_Init_BulletManifoldPoint(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletManifoldPoint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletManifoldPoint) {
    printf("BulletManifoldPoint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletManifoldPoint *local_this = (BulletManifoldPoint *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletManifoldPoint) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletManifoldPoint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletManifoldPoint) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletContactCallbackData
 */
/**
 * Python function wrapper for:
 * inline BulletManifoldPoint &BulletContactCallbackData::get_manifold(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_manifold_400(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContactCallbackData)) {
    return nullptr;
  }
  // 1-inline BulletManifoldPoint &BulletContactCallbackData::get_manifold(void) const
  BulletManifoldPoint *return_value = &(((*(const BulletContactCallbackData*)local_this).get_manifold)());
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletManifoldPoint, false, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_manifold_400_comment =
  "C++ Interface:\n"
  "get_manifold(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_manifold_400_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline PandaNode *BulletContactCallbackData::get_node0(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_node0_401(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContactCallbackData)) {
    return nullptr;
  }
  // 1-inline PandaNode *BulletContactCallbackData::get_node0(void) const
  PandaNode *return_value = ((*(const BulletContactCallbackData*)local_this).get_node0)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_node0_401_comment =
  "C++ Interface:\n"
  "get_node0(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_node0_401_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline PandaNode *BulletContactCallbackData::get_node1(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_node1_402(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContactCallbackData)) {
    return nullptr;
  }
  // 1-inline PandaNode *BulletContactCallbackData::get_node1(void) const
  PandaNode *return_value = ((*(const BulletContactCallbackData*)local_this).get_node1)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_node1_402_comment =
  "C++ Interface:\n"
  "get_node1(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_node1_402_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContactCallbackData::get_part_id0(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_part_id0_403(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContactCallbackData)) {
    return nullptr;
  }
  // 1-inline int BulletContactCallbackData::get_part_id0(void) const
  int return_value = ((*(const BulletContactCallbackData*)local_this).get_part_id0)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_part_id0_403_comment =
  "C++ Interface:\n"
  "get_part_id0(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_part_id0_403_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContactCallbackData::get_part_id1(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_part_id1_404(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContactCallbackData)) {
    return nullptr;
  }
  // 1-inline int BulletContactCallbackData::get_part_id1(void) const
  int return_value = ((*(const BulletContactCallbackData*)local_this).get_part_id1)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_part_id1_404_comment =
  "C++ Interface:\n"
  "get_part_id1(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_part_id1_404_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContactCallbackData::get_index0(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_index0_405(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContactCallbackData)) {
    return nullptr;
  }
  // 1-inline int BulletContactCallbackData::get_index0(void) const
  int return_value = ((*(const BulletContactCallbackData*)local_this).get_index0)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_index0_405_comment =
  "C++ Interface:\n"
  "get_index0(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_index0_405_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContactCallbackData::get_index1(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_index1_406(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContactCallbackData)) {
    return nullptr;
  }
  // 1-inline int BulletContactCallbackData::get_index1(void) const
  int return_value = ((*(const BulletContactCallbackData*)local_this).get_index1)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_index1_406_comment =
  "C++ Interface:\n"
  "get_index1(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_index1_406_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletContactCallbackData::get_class_type(void)
 */
static PyObject *Dtool_BulletContactCallbackData_get_class_type_414(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletContactCallbackData::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletContactCallbackData::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_class_type_414_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletContactCallbackData_get_class_type_414_comment = nullptr;
#endif

static PyObject *Dtool_BulletContactCallbackData_manifold_Getter(PyObject *self, void *) {
  const BulletContactCallbackData *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline BulletManifoldPoint &BulletContactCallbackData::get_manifold(void) const
  BulletManifoldPoint *return_value = &(((*(const BulletContactCallbackData*)local_this).get_manifold)());
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletManifoldPoint, false, false);
}

static PyObject *Dtool_BulletContactCallbackData_node0_Getter(PyObject *self, void *) {
  const BulletContactCallbackData *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline PandaNode *BulletContactCallbackData::get_node0(void) const
  PandaNode *return_value = ((*(const BulletContactCallbackData*)local_this).get_node0)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletContactCallbackData_node1_Getter(PyObject *self, void *) {
  const BulletContactCallbackData *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline PandaNode *BulletContactCallbackData::get_node1(void) const
  PandaNode *return_value = ((*(const BulletContactCallbackData*)local_this).get_node1)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletContactCallbackData_part_id0_Getter(PyObject *self, void *) {
  const BulletContactCallbackData *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline int BulletContactCallbackData::get_part_id0(void) const
  int return_value = ((*(const BulletContactCallbackData*)local_this).get_part_id0)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletContactCallbackData_part_id1_Getter(PyObject *self, void *) {
  const BulletContactCallbackData *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline int BulletContactCallbackData::get_part_id1(void) const
  int return_value = ((*(const BulletContactCallbackData*)local_this).get_part_id1)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletContactCallbackData_index0_Getter(PyObject *self, void *) {
  const BulletContactCallbackData *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline int BulletContactCallbackData::get_index0(void) const
  int return_value = ((*(const BulletContactCallbackData*)local_this).get_index0)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletContactCallbackData_index1_Getter(PyObject *self, void *) {
  const BulletContactCallbackData *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline int BulletContactCallbackData::get_index1(void) const
  int return_value = ((*(const BulletContactCallbackData*)local_this).get_index1)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * inline BulletContactCallbackData::BulletContactCallbackData(BulletManifoldPoint &mp, PandaNode *node0, PandaNode *node1, int id0, int id1, int index0, int index1)
 */
static int Dtool_Init_BulletContactCallbackData(PyObject *self, PyObject *args, PyObject *kwds) {
  // 1-inline BulletContactCallbackData::BulletContactCallbackData(BulletManifoldPoint &mp, PandaNode *node0, PandaNode *node1, int id0, int id1, int index0, int index1)
  PyObject *param0;
  PyObject *param1;
  PyObject *param2;
  int param3;
  int param4;
  int param5;
  int param6;
  static const char *keyword_list[] = {"mp", "node0", "node1", "id0", "id1", "index0", "index1", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOiiii:BulletContactCallbackData", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4, &param5, &param6)) {
    BulletManifoldPoint *param0_this = (BulletManifoldPoint *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletManifoldPoint, 0, "BulletContactCallbackData.BulletContactCallbackData", false, true);
    PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletContactCallbackData.BulletContactCallbackData", false, true);
    PandaNode *param2_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_PandaNode, 2, "BulletContactCallbackData.BulletContactCallbackData", false, true);
    if (param0_this != nullptr && param1_this != nullptr && param2_this != nullptr) {
      BulletContactCallbackData *return_value = new BulletContactCallbackData(*param0_this, param1_this, param2_this, (int)param3, (int)param4, (int)param5, (int)param6);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletContactCallbackData, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletContactCallbackData(BulletManifoldPoint mp, PandaNode node0, PandaNode node1, int id0, int id1, int index0, int index1)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletContactCallbackData(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletContactCallbackData) {
    printf("BulletContactCallbackData ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletContactCallbackData *local_this = (BulletContactCallbackData *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletContactCallbackData) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_CallbackData) {
    return (CallbackData *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(CallbackData *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletContactCallbackData(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletContactCallbackData) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_CallbackData) {
    CallbackData* other_this = (CallbackData*)from_this;
    return (BulletContactCallbackData*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletContactCallbackData*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletContact
 */
/**
 * Python function wrapper for:
 * inline BulletManifoldPoint &BulletContact::get_manifold_point(void)
 */
static PyObject *Dtool_BulletContact_get_manifold_point_416(PyObject *self, PyObject *) {
  BulletContact *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletContact, (void **)&local_this, "BulletContact.get_manifold_point")) {
    return nullptr;
  }
  // 1-inline BulletManifoldPoint &BulletContact::get_manifold_point(void)
  BulletManifoldPoint *return_value = &(((*local_this).get_manifold_point)());
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletManifoldPoint, false, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_manifold_point_416_comment =
  "C++ Interface:\n"
  "get_manifold_point(const BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_manifold_point_416_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline PandaNode *BulletContact::get_node0(void) const
 */
static PyObject *Dtool_BulletContact_get_node0_417(PyObject *self, PyObject *) {
  BulletContact *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContact)) {
    return nullptr;
  }
  // 1-inline PandaNode *BulletContact::get_node0(void) const
  PandaNode *return_value = ((*(const BulletContact*)local_this).get_node0)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_node0_417_comment =
  "C++ Interface:\n"
  "get_node0(BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_node0_417_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline PandaNode *BulletContact::get_node1(void) const
 */
static PyObject *Dtool_BulletContact_get_node1_418(PyObject *self, PyObject *) {
  BulletContact *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContact)) {
    return nullptr;
  }
  // 1-inline PandaNode *BulletContact::get_node1(void) const
  PandaNode *return_value = ((*(const BulletContact*)local_this).get_node1)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_node1_418_comment =
  "C++ Interface:\n"
  "get_node1(BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_node1_418_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContact::get_idx0(void) const
 */
static PyObject *Dtool_BulletContact_get_idx0_419(PyObject *self, PyObject *) {
  BulletContact *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContact)) {
    return nullptr;
  }
  // 1-inline int BulletContact::get_idx0(void) const
  int return_value = ((*(const BulletContact*)local_this).get_idx0)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_idx0_419_comment =
  "C++ Interface:\n"
  "get_idx0(BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_idx0_419_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContact::get_idx1(void) const
 */
static PyObject *Dtool_BulletContact_get_idx1_420(PyObject *self, PyObject *) {
  BulletContact *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContact)) {
    return nullptr;
  }
  // 1-inline int BulletContact::get_idx1(void) const
  int return_value = ((*(const BulletContact*)local_this).get_idx1)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_idx1_420_comment =
  "C++ Interface:\n"
  "get_idx1(BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_idx1_420_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContact::get_part_id0(void) const
 */
static PyObject *Dtool_BulletContact_get_part_id0_421(PyObject *self, PyObject *) {
  BulletContact *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContact)) {
    return nullptr;
  }
  // 1-inline int BulletContact::get_part_id0(void) const
  int return_value = ((*(const BulletContact*)local_this).get_part_id0)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_part_id0_421_comment =
  "C++ Interface:\n"
  "get_part_id0(BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_part_id0_421_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContact::get_part_id1(void) const
 */
static PyObject *Dtool_BulletContact_get_part_id1_422(PyObject *self, PyObject *) {
  BulletContact *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContact)) {
    return nullptr;
  }
  // 1-inline int BulletContact::get_part_id1(void) const
  int return_value = ((*(const BulletContact*)local_this).get_part_id1)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_part_id1_422_comment =
  "C++ Interface:\n"
  "get_part_id1(BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_part_id1_422_comment = nullptr;
#endif

static PyObject *Dtool_BulletContact_manifold_point_Getter(PyObject *self, void *) {
  BulletContact *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletContact, (void **)&local_this, "BulletContact.manifold_point")) {
    return nullptr;
  }

  // 1-inline BulletManifoldPoint &BulletContact::get_manifold_point(void)
  BulletManifoldPoint *return_value = &(((*local_this).get_manifold_point)());
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletManifoldPoint, false, false);
}

static PyObject *Dtool_BulletContact_node0_Getter(PyObject *self, void *) {
  const BulletContact *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContact, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline PandaNode *BulletContact::get_node0(void) const
  PandaNode *return_value = ((*(const BulletContact*)local_this).get_node0)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletContact_node1_Getter(PyObject *self, void *) {
  const BulletContact *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContact, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline PandaNode *BulletContact::get_node1(void) const
  PandaNode *return_value = ((*(const BulletContact*)local_this).get_node1)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletContact_idx0_Getter(PyObject *self, void *) {
  const BulletContact *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContact, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline int BulletContact::get_idx0(void) const
  int return_value = ((*(const BulletContact*)local_this).get_idx0)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletContact_idx1_Getter(PyObject *self, void *) {
  const BulletContact *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContact, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline int BulletContact::get_idx1(void) const
  int return_value = ((*(const BulletContact*)local_this).get_idx1)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletContact_part_id0_Getter(PyObject *self, void *) {
  const BulletContact *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContact, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline int BulletContact::get_part_id0(void) const
  int return_value = ((*(const BulletContact*)local_this).get_part_id0)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletContact_part_id1_Getter(PyObject *self, void *) {
  const BulletContact *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContact, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline int BulletContact::get_part_id1(void) const
  int return_value = ((*(const BulletContact*)local_this).get_part_id1)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_Init_BulletContact(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletContact(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletContact) {
    printf("BulletContact ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletContact *local_this = (BulletContact *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletContact) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletContact(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletContact) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletContactResult
 */
/**
 * Python function wrapper for:
 * inline int BulletContactResult::get_num_contacts(void) const
 */
static PyObject *Dtool_BulletContactResult_get_num_contacts_435(PyObject *self, PyObject *) {
  BulletContactResult *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletContactResult)) {
    return nullptr;
  }
  // 1-inline int BulletContactResult::get_num_contacts(void) const
  int return_value = ((*(const BulletContactResult*)local_this).get_num_contacts)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactResult_get_num_contacts_435_comment =
  "C++ Interface:\n"
  "get_num_contacts(BulletContactResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactResult_get_num_contacts_435_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline BulletContact BulletContactResult::get_contact(int idx)
 */
static PyObject *Dtool_BulletContactResult_get_contact_436(PyObject *self, PyObject *arg) {
  BulletContactResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletContactResult, (void **)&local_this, "BulletContactResult.get_contact")) {
    return nullptr;
  }
  // 1-inline BulletContact BulletContactResult::get_contact(int idx)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletContact *return_value = new BulletContact(((*local_this).get_contact)((int)arg_val));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletContact, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_contact(const BulletContactResult self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletContactResult_get_contact_436_comment =
  "C++ Interface:\n"
  "get_contact(const BulletContactResult self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactResult_get_contact_436_comment = nullptr;
#endif

/**
 * sequence length function for property BulletContactResult::contacts
 */
static Py_ssize_t Dtool_BulletContactResult_contacts_Len(PyObject *self) {
  BulletContactResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactResult, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_contacts)();
}

/**
 * sequence getter for property BulletContactResult::contacts
 */
static PyObject *Dtool_BulletContactResult_contacts_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletContactResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactResult, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_contacts)()) {
    PyErr_SetString(PyExc_IndexError, "BulletContactResult.contacts[] index out of range");
    return nullptr;
  }
  if (!DtoolInstance_IS_CONST(self)) {
    // 1-inline BulletContact BulletContactResult::get_contact(int idx)
    BulletContact *return_value = new BulletContact(((*local_this).get_contact)(index));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      delete return_value;
      return Dtool_Raise_AssertionError();
    }
#endif
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletContact, true, false);
  } else {
#ifdef NDEBUG
    return Dtool_Raise_TypeError("non-const method called on const object");
#else
    return Dtool_Raise_TypeError("Cannot call BulletContactResult.get_contact() on a const object.");
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_contact(const BulletContactResult self, index)\n");
  }
}

static PyObject *Dtool_BulletContactResult_contacts_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletContactResult.contacts");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletContactResult_contacts_Len;
    wrap->_getitem_func = &Dtool_BulletContactResult_contacts_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

static int Dtool_Init_BulletContactResult(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletContactResult_get_contacts(PyObject *self, PyObject *) {
  BulletContactResult *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactResult, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_contacts)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletContactResult_get_contact_436(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletContactResult(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletContactResult) {
    printf("BulletContactResult ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletContactResult *local_this = (BulletContactResult *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletContactResult) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletContactResult(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletContactResult) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletDebugNode
 */
/**
 * Python function wrapper for:
 * virtual void BulletDebugNode::draw_mask_changed(void)
 */
static PyObject *Dtool_BulletDebugNode_draw_mask_changed_442(PyObject *self, PyObject *) {
  BulletDebugNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.draw_mask_changed")) {
    return nullptr;
  }
  // 1-virtual void BulletDebugNode::draw_mask_changed(void)
  ((*local_this).draw_mask_changed)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_draw_mask_changed_442_comment =
  "C++ Interface:\n"
  "draw_mask_changed(const BulletDebugNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_draw_mask_changed_442_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletDebugNode::show_wireframe(bool show)
 */
static PyObject *Dtool_BulletDebugNode_show_wireframe_443(PyObject *self, PyObject *arg) {
  BulletDebugNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.show_wireframe")) {
    return nullptr;
  }
  // 1-inline void BulletDebugNode::show_wireframe(bool show)
  ((*local_this).show_wireframe)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "show_wireframe(const BulletDebugNode self, bool show)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_show_wireframe_443_comment =
  "C++ Interface:\n"
  "show_wireframe(const BulletDebugNode self, bool show)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_show_wireframe_443_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletDebugNode::show_constraints(bool show)
 */
static PyObject *Dtool_BulletDebugNode_show_constraints_444(PyObject *self, PyObject *arg) {
  BulletDebugNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.show_constraints")) {
    return nullptr;
  }
  // 1-inline void BulletDebugNode::show_constraints(bool show)
  ((*local_this).show_constraints)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "show_constraints(const BulletDebugNode self, bool show)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_show_constraints_444_comment =
  "C++ Interface:\n"
  "show_constraints(const BulletDebugNode self, bool show)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_show_constraints_444_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletDebugNode::show_bounding_boxes(bool show)
 */
static PyObject *Dtool_BulletDebugNode_show_bounding_boxes_445(PyObject *self, PyObject *arg) {
  BulletDebugNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.show_bounding_boxes")) {
    return nullptr;
  }
  // 1-inline void BulletDebugNode::show_bounding_boxes(bool show)
  ((*local_this).show_bounding_boxes)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "show_bounding_boxes(const BulletDebugNode self, bool show)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_show_bounding_boxes_445_comment =
  "C++ Interface:\n"
  "show_bounding_boxes(const BulletDebugNode self, bool show)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_show_bounding_boxes_445_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletDebugNode::show_normals(bool show)
 */
static PyObject *Dtool_BulletDebugNode_show_normals_446(PyObject *self, PyObject *arg) {
  BulletDebugNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.show_normals")) {
    return nullptr;
  }
  // 1-inline void BulletDebugNode::show_normals(bool show)
  ((*local_this).show_normals)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "show_normals(const BulletDebugNode self, bool show)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_show_normals_446_comment =
  "C++ Interface:\n"
  "show_normals(const BulletDebugNode self, bool show)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_show_normals_446_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletDebugNode::get_show_wireframe(void) const
 */
static PyObject *Dtool_BulletDebugNode_get_show_wireframe_447(PyObject *self, PyObject *) {
  BulletDebugNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletDebugNode)) {
    return nullptr;
  }
  // 1-inline bool BulletDebugNode::get_show_wireframe(void) const
  bool return_value = ((*(const BulletDebugNode*)local_this).get_show_wireframe)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_get_show_wireframe_447_comment =
  "C++ Interface:\n"
  "get_show_wireframe(BulletDebugNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_get_show_wireframe_447_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletDebugNode::get_show_constraints(void) const
 */
static PyObject *Dtool_BulletDebugNode_get_show_constraints_448(PyObject *self, PyObject *) {
  BulletDebugNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletDebugNode)) {
    return nullptr;
  }
  // 1-inline bool BulletDebugNode::get_show_constraints(void) const
  bool return_value = ((*(const BulletDebugNode*)local_this).get_show_constraints)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_get_show_constraints_448_comment =
  "C++ Interface:\n"
  "get_show_constraints(BulletDebugNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_get_show_constraints_448_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletDebugNode::get_show_bounding_boxes(void) const
 */
static PyObject *Dtool_BulletDebugNode_get_show_bounding_boxes_449(PyObject *self, PyObject *) {
  BulletDebugNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletDebugNode)) {
    return nullptr;
  }
  // 1-inline bool BulletDebugNode::get_show_bounding_boxes(void) const
  bool return_value = ((*(const BulletDebugNode*)local_this).get_show_bounding_boxes)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_get_show_bounding_boxes_449_comment =
  "C++ Interface:\n"
  "get_show_bounding_boxes(BulletDebugNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_get_show_bounding_boxes_449_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletDebugNode::get_show_normals(void) const
 */
static PyObject *Dtool_BulletDebugNode_get_show_normals_450(PyObject *self, PyObject *) {
  BulletDebugNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletDebugNode)) {
    return nullptr;
  }
  // 1-inline bool BulletDebugNode::get_show_normals(void) const
  bool return_value = ((*(const BulletDebugNode*)local_this).get_show_normals)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_get_show_normals_450_comment =
  "C++ Interface:\n"
  "get_show_normals(BulletDebugNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_get_show_normals_450_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletDebugNode::get_class_type(void)
 */
static PyObject *Dtool_BulletDebugNode_get_class_type_455(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletDebugNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletDebugNode::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_get_class_type_455_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletDebugNode_get_class_type_455_comment = nullptr;
#endif

static PyObject *Dtool_BulletDebugNode_wireframe_Getter(PyObject *self, void *) {
  const BulletDebugNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletDebugNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline bool BulletDebugNode::get_show_wireframe(void) const
  bool return_value = ((*(const BulletDebugNode*)local_this).get_show_wireframe)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletDebugNode_wireframe_Setter(PyObject *self, PyObject *arg, void *) {
  BulletDebugNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.wireframe")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete wireframe attribute");
    return -1;
  }
  // 1-inline void BulletDebugNode::show_wireframe(bool show)
  ((*local_this).show_wireframe)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "show_wireframe(const BulletDebugNode self, bool show)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletDebugNode_constraints_Getter(PyObject *self, void *) {
  const BulletDebugNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletDebugNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline bool BulletDebugNode::get_show_constraints(void) const
  bool return_value = ((*(const BulletDebugNode*)local_this).get_show_constraints)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletDebugNode_constraints_Setter(PyObject *self, PyObject *arg, void *) {
  BulletDebugNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.constraints")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete constraints attribute");
    return -1;
  }
  // 1-inline void BulletDebugNode::show_constraints(bool show)
  ((*local_this).show_constraints)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "show_constraints(const BulletDebugNode self, bool show)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletDebugNode_bounding_boxes_Getter(PyObject *self, void *) {
  const BulletDebugNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletDebugNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline bool BulletDebugNode::get_show_bounding_boxes(void) const
  bool return_value = ((*(const BulletDebugNode*)local_this).get_show_bounding_boxes)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletDebugNode_bounding_boxes_Setter(PyObject *self, PyObject *arg, void *) {
  BulletDebugNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.bounding_boxes")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete bounding_boxes attribute");
    return -1;
  }
  // 1-inline void BulletDebugNode::show_bounding_boxes(bool show)
  ((*local_this).show_bounding_boxes)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "show_bounding_boxes(const BulletDebugNode self, bool show)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletDebugNode_normals_Getter(PyObject *self, void *) {
  const BulletDebugNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletDebugNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline bool BulletDebugNode::get_show_normals(void) const
  bool return_value = ((*(const BulletDebugNode*)local_this).get_show_normals)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletDebugNode_normals_Setter(PyObject *self, PyObject *arg, void *) {
  BulletDebugNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.normals")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete normals attribute");
    return -1;
  }
  // 1-inline void BulletDebugNode::show_normals(bool show)
  ((*local_this).show_normals)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "show_normals(const BulletDebugNode self, bool show)\n");
  }
  return -1;
}

/**
 * Python function wrapper for:
 * inline BulletDebugNode::BulletDebugNode(BulletDebugNode const &) = default
 * explicit BulletDebugNode::BulletDebugNode(char const *name = "debug")
 */
static int Dtool_Init_BulletDebugNode(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 0:
    {
      // 1-explicit BulletDebugNode::BulletDebugNode(char const *name)
      BulletDebugNode *return_value = new BulletDebugNode();
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletDebugNode, true, false);
    }
    break;
  case 1:
    {
      {
        // -2 inline BulletDebugNode::BulletDebugNode(BulletDebugNode const &) = default
        PyObject *param0;
        if (Dtool_ExtractArg(&param0, args, kwds)) {
          BulletDebugNode const *param0_this = nullptr;
          DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_BulletDebugNode);
          if (param0_this != nullptr) {
            BulletDebugNode *return_value = new BulletDebugNode(*param0_this);
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletDebugNode, true, false);
          }
        }
      }

      {
        // -2 explicit BulletDebugNode::BulletDebugNode(char const *name)
        char const *param0;
        static const char *keyword_list[] = {"name", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "z:BulletDebugNode", (char **)keyword_list, &param0)) {
          BulletDebugNode *return_value = new BulletDebugNode((char const *)param0);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletDebugNode, true, false);
        }
        PyErr_Clear();
      }

      // No coercion possible: inline BulletDebugNode::BulletDebugNode(BulletDebugNode const &) = default
      // No coercion possible: explicit BulletDebugNode::BulletDebugNode(char const *name)
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletDebugNode() takes 0 or 1 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletDebugNode()\n"
      "BulletDebugNode(const BulletDebugNode param0)\n"
      "BulletDebugNode(str name)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletDebugNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletDebugNode) {
    printf("BulletDebugNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletDebugNode *local_this = (BulletDebugNode *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletDebugNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletDebugNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletDebugNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletDebugNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletDebugNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletDebugNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletDebugNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletDebugNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletDebugNode*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletGhostNode
 */
/**
 * Python function wrapper for:
 * int BulletGhostNode::get_num_overlapping_nodes(void) const
 */
static PyObject *Dtool_BulletGhostNode_get_num_overlapping_nodes_458(PyObject *self, PyObject *) {
  BulletGhostNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletGhostNode)) {
    return nullptr;
  }
  // 1-int BulletGhostNode::get_num_overlapping_nodes(void) const
  int return_value = ((*(const BulletGhostNode*)local_this).get_num_overlapping_nodes)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletGhostNode_get_num_overlapping_nodes_458_comment =
  "C++ Interface:\n"
  "get_num_overlapping_nodes(BulletGhostNode self)\n"
  "\n"
  "// Overlapping\n"
  "\n"
  "// Overlapping\n"
  "\n"
  "// Overlapping\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGhostNode_get_num_overlapping_nodes_458_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PandaNode *BulletGhostNode::get_overlapping_node(int idx) const
 */
static PyObject *Dtool_BulletGhostNode_get_overlapping_node_459(PyObject *self, PyObject *arg) {
  BulletGhostNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletGhostNode)) {
    return nullptr;
  }
  // 1-PandaNode *BulletGhostNode::get_overlapping_node(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    PandaNode *return_value = ((*(const BulletGhostNode*)local_this).get_overlapping_node)((int)arg_val);
    if (return_value != nullptr) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != nullptr) {
        unref_delete(return_value);
      }
      return nullptr;
    }
    if (return_value == nullptr) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_overlapping_node(BulletGhostNode self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletGhostNode_get_overlapping_node_459_comment =
  "C++ Interface:\n"
  "get_overlapping_node(BulletGhostNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGhostNode_get_overlapping_node_459_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletGhostNode::get_class_type(void)
 */
static PyObject *Dtool_BulletGhostNode_get_class_type_462(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletGhostNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletGhostNode::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletGhostNode_get_class_type_462_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletGhostNode_get_class_type_462_comment = nullptr;
#endif

/**
 * sequence length function for property BulletGhostNode::overlapping_nodes
 */
static Py_ssize_t Dtool_BulletGhostNode_overlapping_nodes_Len(PyObject *self) {
  BulletGhostNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletGhostNode, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_overlapping_nodes)();
}

/**
 * sequence getter for property BulletGhostNode::overlapping_nodes
 */
static PyObject *Dtool_BulletGhostNode_overlapping_nodes_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletGhostNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletGhostNode, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_overlapping_nodes)()) {
    PyErr_SetString(PyExc_IndexError, "BulletGhostNode.overlapping_nodes[] index out of range");
    return nullptr;
  }
  // 1-PandaNode *BulletGhostNode::get_overlapping_node(int idx) const
  PandaNode *return_value = ((*(const BulletGhostNode*)local_this).get_overlapping_node)(index);
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_overlapping_node(BulletGhostNode self, index)\n");
  }
}

static PyObject *Dtool_BulletGhostNode_overlapping_nodes_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletGhostNode.overlapping_nodes");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletGhostNode_overlapping_nodes_Len;
    wrap->_getitem_func = &Dtool_BulletGhostNode_overlapping_nodes_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * Python function wrapper for:
 * explicit BulletGhostNode::BulletGhostNode(char const *name = "ghost")
 */
static int Dtool_Init_BulletGhostNode(PyObject *self, PyObject *args, PyObject *kwds) {
  // 1-explicit BulletGhostNode::BulletGhostNode(char const *name = "ghost")
  char const *param0 = "ghost";
  static const char *keyword_list[] = {"name", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "|z:BulletGhostNode", (char **)keyword_list, &param0)) {
    BulletGhostNode *return_value = new BulletGhostNode((char const *)param0);
    if (return_value == nullptr) {
      PyErr_NoMemory();
      return -1;
    }
    return_value->ref();
    if (Dtool_CheckErrorOccurred()) {
      unref_delete(return_value);
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletGhostNode, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletGhostNode(str name)\n");
  }
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletGhostNode_get_overlapping_nodes(PyObject *self, PyObject *) {
  BulletGhostNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletGhostNode, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_overlapping_nodes)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletGhostNode_get_overlapping_node_459(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletGhostNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletGhostNode) {
    printf("BulletGhostNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletGhostNode *local_this = (BulletGhostNode *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletGhostNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletBodyNode) {
    return (BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletGhostNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletGhostNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletBodyNode) {
    BulletBodyNode* other_this = (BulletBodyNode*)from_this;
    return (BulletGhostNode*)other_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletGhostNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletGhostNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletGhostNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletGhostNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletGhostNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletGhostNode*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletSoftBodyNodeElement
 */
/**
 * Python function wrapper for:
 * static inline BulletSoftBodyNodeElement BulletSoftBodyNodeElement::empty(void)
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_empty_465(PyObject *, PyObject *) {
  // 1-static inline BulletSoftBodyNodeElement BulletSoftBodyNodeElement::empty(void)
  BulletSoftBodyNodeElement *return_value = new BulletSoftBodyNodeElement((BulletSoftBodyNodeElement::empty)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyNodeElement, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_empty_465_comment =
  "C++ Interface:\n"
  "empty()\n"
  "\n"
  "/**\n"
  " * Named constructor intended to be used for asserts with have to return a\n"
  " * concrete value.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_empty_465_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletSoftBodyNodeElement::get_pos(void) const
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_get_pos_466(PyObject *self, PyObject *) {
  BulletSoftBodyNodeElement *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNodeElement)) {
    return nullptr;
  }
  // 1-LPoint3 BulletSoftBodyNodeElement::get_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletSoftBodyNodeElement*)local_this).get_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_get_pos_466_comment =
  "C++ Interface:\n"
  "get_pos(BulletSoftBodyNodeElement self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_get_pos_466_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletSoftBodyNodeElement::get_velocity(void) const
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_get_velocity_467(PyObject *self, PyObject *) {
  BulletSoftBodyNodeElement *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNodeElement)) {
    return nullptr;
  }
  // 1-LVector3 BulletSoftBodyNodeElement::get_velocity(void) const
  LVector3 *return_value = new LVector3(((*(const BulletSoftBodyNodeElement*)local_this).get_velocity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_get_velocity_467_comment =
  "C++ Interface:\n"
  "get_velocity(BulletSoftBodyNodeElement self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_get_velocity_467_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletSoftBodyNodeElement::get_normal(void) const
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_get_normal_468(PyObject *self, PyObject *) {
  BulletSoftBodyNodeElement *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNodeElement)) {
    return nullptr;
  }
  // 1-LVector3 BulletSoftBodyNodeElement::get_normal(void) const
  LVector3 *return_value = new LVector3(((*(const BulletSoftBodyNodeElement*)local_this).get_normal)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_get_normal_468_comment =
  "C++ Interface:\n"
  "get_normal(BulletSoftBodyNodeElement self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_get_normal_468_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyNodeElement::get_inv_mass(void) const
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_get_inv_mass_469(PyObject *self, PyObject *) {
  BulletSoftBodyNodeElement *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNodeElement)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyNodeElement::get_inv_mass(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyNodeElement*)local_this).get_inv_mass)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_get_inv_mass_469_comment =
  "C++ Interface:\n"
  "get_inv_mass(BulletSoftBodyNodeElement self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_get_inv_mass_469_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyNodeElement::get_area(void) const
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_get_area_470(PyObject *self, PyObject *) {
  BulletSoftBodyNodeElement *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNodeElement)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyNodeElement::get_area(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyNodeElement*)local_this).get_area)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_get_area_470_comment =
  "C++ Interface:\n"
  "get_area(BulletSoftBodyNodeElement self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_get_area_470_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletSoftBodyNodeElement::is_attached(void) const
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_is_attached_471(PyObject *self, PyObject *) {
  BulletSoftBodyNodeElement *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNodeElement)) {
    return nullptr;
  }
  // 1-int BulletSoftBodyNodeElement::is_attached(void) const
  int return_value = ((*(const BulletSoftBodyNodeElement*)local_this).is_attached)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_is_attached_471_comment =
  "C++ Interface:\n"
  "is_attached(BulletSoftBodyNodeElement self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_is_attached_471_comment = nullptr;
#endif

static PyObject *Dtool_BulletSoftBodyNodeElement_pos_Getter(PyObject *self, void *) {
  const BulletSoftBodyNodeElement *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNodeElement, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletSoftBodyNodeElement::get_pos(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletSoftBodyNodeElement*)local_this).get_pos)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletSoftBodyNodeElement_velocity_Getter(PyObject *self, void *) {
  const BulletSoftBodyNodeElement *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNodeElement, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletSoftBodyNodeElement::get_velocity(void) const
  LVector3 *return_value = new LVector3(((*(const BulletSoftBodyNodeElement*)local_this).get_velocity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletSoftBodyNodeElement_normal_Getter(PyObject *self, void *) {
  const BulletSoftBodyNodeElement *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNodeElement, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletSoftBodyNodeElement::get_normal(void) const
  LVector3 *return_value = new LVector3(((*(const BulletSoftBodyNodeElement*)local_this).get_normal)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletSoftBodyNodeElement_inv_mass_Getter(PyObject *self, void *) {
  const BulletSoftBodyNodeElement *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNodeElement, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyNodeElement::get_inv_mass(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyNodeElement*)local_this).get_inv_mass)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletSoftBodyNodeElement_area_Getter(PyObject *self, void *) {
  const BulletSoftBodyNodeElement *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNodeElement, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyNodeElement::get_area(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyNodeElement*)local_this).get_area)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletSoftBodyNodeElement_attached_Getter(PyObject *self, void *) {
  const BulletSoftBodyNodeElement *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNodeElement, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletSoftBodyNodeElement::is_attached(void) const
  int return_value = ((*(const BulletSoftBodyNodeElement*)local_this).is_attached)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * inline BulletSoftBodyNodeElement::BulletSoftBodyNodeElement(BulletSoftBodyNodeElement const &) = default
 */
static int Dtool_Init_BulletSoftBodyNodeElement(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletSoftBodyNodeElement() takes no keyword arguments");
    return -1;
#endif
  }
  // 1-inline BulletSoftBodyNodeElement::BulletSoftBodyNodeElement(BulletSoftBodyNodeElement const &) = default
  PyObject *param0;
  if (PyTuple_GET_SIZE(args) == 1) {
    param0 = PyTuple_GET_ITEM(args, 0);
    BulletSoftBodyNodeElement const *param0_this = (BulletSoftBodyNodeElement *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyNodeElement, 0, "BulletSoftBodyNodeElement.BulletSoftBodyNodeElement", true, true);
    if (param0_this != nullptr) {
      BulletSoftBodyNodeElement *return_value = new BulletSoftBodyNodeElement(*param0_this);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSoftBodyNodeElement, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSoftBodyNodeElement(const BulletSoftBodyNodeElement param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletSoftBodyNodeElement(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletSoftBodyNodeElement) {
    printf("BulletSoftBodyNodeElement ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletSoftBodyNodeElement *local_this = (BulletSoftBodyNodeElement *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletSoftBodyNodeElement) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletSoftBodyNodeElement(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyNodeElement) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletSoftBodyNode
 */
/**
 * Python function wrapper for:
 * BulletSoftBodyConfig BulletSoftBodyNode::get_cfg(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_get_cfg_480(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.get_cfg")) {
    return nullptr;
  }
  // 1-BulletSoftBodyConfig BulletSoftBodyNode::get_cfg(void)
  BulletSoftBodyConfig *return_value = new BulletSoftBodyConfig(((*local_this).get_cfg)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyConfig, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_cfg_480_comment =
  "C++ Interface:\n"
  "get_cfg(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_cfg_480_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyWorldInfo BulletSoftBodyNode::get_world_info(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_get_world_info_481(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.get_world_info")) {
    return nullptr;
  }
  // 1-BulletSoftBodyWorldInfo BulletSoftBodyNode::get_world_info(void)
  BulletSoftBodyWorldInfo *return_value = new BulletSoftBodyWorldInfo(((*local_this).get_world_info)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyWorldInfo, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_world_info_481_comment =
  "C++ Interface:\n"
  "get_world_info(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_world_info_481_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::generate_bending_constraints(int distance, BulletSoftBodyMaterial *material = nullptr)
 */
static PyObject *Dtool_BulletSoftBodyNode_generate_bending_constraints_482(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.generate_bending_constraints")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::generate_bending_constraints(int distance, BulletSoftBodyMaterial *material = nullptr)
  int param1;
  PyObject *param2 = nullptr;
  static const char *keyword_list[] = {"distance", "material", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "i|O:generate_bending_constraints", (char **)keyword_list, &param1, &param2)) {
    BulletSoftBodyMaterial *param2_this = nullptr;
    if (param2 != nullptr && param2 != Py_None) {
      param2_this = (BulletSoftBodyMaterial *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_BulletSoftBodyMaterial, 2, "BulletSoftBodyNode.generate_bending_constraints", false, true);
    }
    if ((param2 == nullptr || param2 == Py_None || param2_this != nullptr)) {
      ((*local_this).generate_bending_constraints)((int)param1, param2_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "generate_bending_constraints(const BulletSoftBodyNode self, int distance, BulletSoftBodyMaterial material)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_generate_bending_constraints_482_comment =
  "C++ Interface:\n"
  "generate_bending_constraints(const BulletSoftBodyNode self, int distance, BulletSoftBodyMaterial material)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_generate_bending_constraints_482_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::randomize_constraints(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_randomize_constraints_483(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.randomize_constraints")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::randomize_constraints(void)
  ((*local_this).randomize_constraints)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_randomize_constraints_483_comment =
  "C++ Interface:\n"
  "randomize_constraints(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_randomize_constraints_483_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_volume_mass(PN_stdfloat mass)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_volume_mass_484(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_volume_mass")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::set_volume_mass(PN_stdfloat mass)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_volume_mass)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_volume_mass(const BulletSoftBodyNode self, float mass)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_volume_mass_484_comment =
  "C++ Interface:\n"
  "set_volume_mass(const BulletSoftBodyNode self, float mass)\n"
  "\n"
  "// Mass, volume, density\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_volume_mass_484_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_volume_density(PN_stdfloat density)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_volume_density_485(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_volume_density")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::set_volume_density(PN_stdfloat density)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_volume_density)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_volume_density(const BulletSoftBodyNode self, float density)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_volume_density_485_comment =
  "C++ Interface:\n"
  "set_volume_density(const BulletSoftBodyNode self, float density)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_volume_density_485_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_total_mass(PN_stdfloat mass, bool fromfaces = false)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_total_mass_486(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_total_mass")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::set_total_mass(PN_stdfloat mass, bool fromfaces = false)
  float param1;
  PyObject *param2 = Py_False;
  static const char *keyword_list[] = {"mass", "fromfaces", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "f|O:set_total_mass", (char **)keyword_list, &param1, &param2)) {
    ((*local_this).set_total_mass)((PN_stdfloat)param1, (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_total_mass(const BulletSoftBodyNode self, float mass, bool fromfaces)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_total_mass_486_comment =
  "C++ Interface:\n"
  "set_total_mass(const BulletSoftBodyNode self, float mass, bool fromfaces)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_total_mass_486_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_total_density(PN_stdfloat density)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_total_density_487(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_total_density")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::set_total_density(PN_stdfloat density)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_total_density)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_total_density(const BulletSoftBodyNode self, float density)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_total_density_487_comment =
  "C++ Interface:\n"
  "set_total_density(const BulletSoftBodyNode self, float density)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_total_density_487_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_mass(int node, PN_stdfloat mass)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_mass_488(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_mass")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::set_mass(int node, PN_stdfloat mass)
  int param1;
  float param2;
  static const char *keyword_list[] = {"node", "mass", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "if:set_mass", (char **)keyword_list, &param1, &param2)) {
    ((*local_this).set_mass)((int)param1, (PN_stdfloat)param2);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_mass(const BulletSoftBodyNode self, int node, float mass)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_mass_488_comment =
  "C++ Interface:\n"
  "set_mass(const BulletSoftBodyNode self, int node, float mass)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_mass_488_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyNode::get_mass(int node) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_mass_489(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyNode::get_mass(int node) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    PN_stdfloat return_value = ((*(const BulletSoftBodyNode*)local_this).get_mass)((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return nullptr;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_mass(BulletSoftBodyNode self, int node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_mass_489_comment =
  "C++ Interface:\n"
  "get_mass(BulletSoftBodyNode self, int node)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_mass_489_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyNode::get_total_mass(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_total_mass_490(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyNode::get_total_mass(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyNode*)local_this).get_total_mass)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_total_mass_490_comment =
  "C++ Interface:\n"
  "get_total_mass(BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_total_mass_490_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyNode::get_volume(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_volume_491(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNode)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyNode::get_volume(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyNode*)local_this).get_volume)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_volume_491_comment =
  "C++ Interface:\n"
  "get_volume(BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_volume_491_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::add_force(LVector3 const &force)
 * void BulletSoftBodyNode::add_force(LVector3 const &force, int node)
 */
static PyObject *Dtool_BulletSoftBodyNode_add_force_492(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.add_force")) {
    return nullptr;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg;
      if (Dtool_ExtractArg(&arg, args, kwds, "force")) {
        // 1-void BulletSoftBodyNode::add_force(LVector3 const &force)
        LVector3f arg_local;
        LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
        if (!(arg_this != nullptr)) {
          return Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyNode.add_force", "LVector3f");
        }
        ((*local_this).add_force)(*arg_this);
        return Dtool_Return_None();
      }
    }
    break;
  case 2:
    {
      // 1-void BulletSoftBodyNode::add_force(LVector3 const &force, int node)
      PyObject *param1;
      int param2;
      static const char *keyword_list[] = {"force", "node", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "Oi:add_force", (char **)keyword_list, &param1, &param2)) {
        LVector3f param1_local;
        LVector3 const *param1_this = Dtool_Coerce_LVector3f(param1, param1_local);
        if (!(param1_this != nullptr)) {
          return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.add_force", "LVector3f");
        }
        ((*local_this).add_force)(*param1_this, (int)param2);
        return Dtool_Return_None();
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "add_force() takes 2 or 3 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_force(const BulletSoftBodyNode self, const LVector3f force)\n"
      "add_force(const BulletSoftBodyNode self, const LVector3f force, int node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_add_force_492_comment =
  "C++ Interface:\n"
  "add_force(const BulletSoftBodyNode self, const LVector3f force)\n"
  "add_force(const BulletSoftBodyNode self, const LVector3f force, int node)\n"
  "\n"
  "// Force\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_add_force_492_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_velocity(LVector3 const &velocity)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_velocity_493(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_velocity")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::set_velocity(LVector3 const &velocity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyNode.set_velocity", "LVector3f");
  }
  ((*local_this).set_velocity)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_velocity(const BulletSoftBodyNode self, const LVector3f velocity)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_velocity_493_comment =
  "C++ Interface:\n"
  "set_velocity(const BulletSoftBodyNode self, const LVector3f velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_velocity_493_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::add_velocity(LVector3 const &velocity)
 * void BulletSoftBodyNode::add_velocity(LVector3 const &velocity, int node)
 */
static PyObject *Dtool_BulletSoftBodyNode_add_velocity_494(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.add_velocity")) {
    return nullptr;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg;
      if (Dtool_ExtractArg(&arg, args, kwds, "velocity")) {
        // 1-void BulletSoftBodyNode::add_velocity(LVector3 const &velocity)
        LVector3f arg_local;
        LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
        if (!(arg_this != nullptr)) {
          return Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyNode.add_velocity", "LVector3f");
        }
        ((*local_this).add_velocity)(*arg_this);
        return Dtool_Return_None();
      }
    }
    break;
  case 2:
    {
      // 1-void BulletSoftBodyNode::add_velocity(LVector3 const &velocity, int node)
      PyObject *param1;
      int param2;
      static const char *keyword_list[] = {"velocity", "node", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "Oi:add_velocity", (char **)keyword_list, &param1, &param2)) {
        LVector3f param1_local;
        LVector3 const *param1_this = Dtool_Coerce_LVector3f(param1, param1_local);
        if (!(param1_this != nullptr)) {
          return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.add_velocity", "LVector3f");
        }
        ((*local_this).add_velocity)(*param1_this, (int)param2);
        return Dtool_Return_None();
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "add_velocity() takes 2 or 3 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_velocity(const BulletSoftBodyNode self, const LVector3f velocity)\n"
      "add_velocity(const BulletSoftBodyNode self, const LVector3f velocity, int node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_add_velocity_494_comment =
  "C++ Interface:\n"
  "add_velocity(const BulletSoftBodyNode self, const LVector3f velocity)\n"
  "add_velocity(const BulletSoftBodyNode self, const LVector3f velocity, int node)\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_add_velocity_494_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_wind_velocity(LVector3 const &velocity)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_wind_velocity_495(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_wind_velocity")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::set_wind_velocity(LVector3 const &velocity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyNode.set_wind_velocity", "LVector3f");
  }
  ((*local_this).set_wind_velocity)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wind_velocity(const BulletSoftBodyNode self, const LVector3f velocity)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_wind_velocity_495_comment =
  "C++ Interface:\n"
  "set_wind_velocity(const BulletSoftBodyNode self, const LVector3f velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_wind_velocity_495_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletSoftBodyNode::get_wind_velocity(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_wind_velocity_496(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNode)) {
    return nullptr;
  }
  // 1-LVector3 BulletSoftBodyNode::get_wind_velocity(void) const
  LVector3 *return_value = new LVector3(((*(const BulletSoftBodyNode*)local_this).get_wind_velocity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_wind_velocity_496_comment =
  "C++ Interface:\n"
  "get_wind_velocity(BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_wind_velocity_496_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_pose(bool bvolume, bool bframe)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_pose_497(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_pose")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::set_pose(bool bvolume, bool bframe)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"bvolume", "bframe", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:set_pose", (char **)keyword_list, &param1, &param2)) {
    ((*local_this).set_pose)((PyObject_IsTrue(param1) != 0), (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_pose(const BulletSoftBodyNode self, bool bvolume, bool bframe)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_pose_497_comment =
  "C++ Interface:\n"
  "set_pose(const BulletSoftBodyNode self, bool bvolume, bool bframe)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_pose_497_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BoundingBox BulletSoftBodyNode::get_aabb(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_aabb_498(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNode)) {
    return nullptr;
  }
  // 1-BoundingBox BulletSoftBodyNode::get_aabb(void) const
  BoundingBox *return_value = new BoundingBox(((*(const BulletSoftBodyNode*)local_this).get_aabb)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BoundingBox, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_aabb_498_comment =
  "C++ Interface:\n"
  "get_aabb(BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_aabb_498_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::generate_clusters(int k, int maxiterations = 8192)
 */
static PyObject *Dtool_BulletSoftBodyNode_generate_clusters_499(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.generate_clusters")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::generate_clusters(int k, int maxiterations = 8192)
  int param1;
  int param2 = 8192;
  static const char *keyword_list[] = {"k", "maxiterations", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "i|i:generate_clusters", (char **)keyword_list, &param1, &param2)) {
    ((*local_this).generate_clusters)((int)param1, (int)param2);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "generate_clusters(const BulletSoftBodyNode self, int k, int maxiterations)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_generate_clusters_499_comment =
  "C++ Interface:\n"
  "generate_clusters(const BulletSoftBodyNode self, int k, int maxiterations)\n"
  "\n"
  "// Cluster\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_generate_clusters_499_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::release_cluster(int index)
 */
static PyObject *Dtool_BulletSoftBodyNode_release_cluster_500(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.release_cluster")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::release_cluster(int index)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    ((*local_this).release_cluster)((int)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "release_cluster(const BulletSoftBodyNode self, int index)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_release_cluster_500_comment =
  "C++ Interface:\n"
  "release_cluster(const BulletSoftBodyNode self, int index)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_release_cluster_500_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::release_clusters(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_release_clusters_501(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.release_clusters")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::release_clusters(void)
  ((*local_this).release_clusters)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_release_clusters_501_comment =
  "C++ Interface:\n"
  "release_clusters(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_release_clusters_501_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletSoftBodyNode::get_num_clusters(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_num_clusters_502(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNode)) {
    return nullptr;
  }
  // 1-int BulletSoftBodyNode::get_num_clusters(void) const
  int return_value = ((*(const BulletSoftBodyNode*)local_this).get_num_clusters)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_num_clusters_502_comment =
  "C++ Interface:\n"
  "get_num_clusters(BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_num_clusters_502_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVecBase3 BulletSoftBodyNode::cluster_com(int cluster) const
 */
static PyObject *Dtool_BulletSoftBodyNode_cluster_com_503(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNode)) {
    return nullptr;
  }
  // 1-LVecBase3 BulletSoftBodyNode::cluster_com(int cluster) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    LVecBase3 *return_value = new LVecBase3(((*(const BulletSoftBodyNode*)local_this).cluster_com)((int)arg_val));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "cluster_com(BulletSoftBodyNode self, int cluster)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_cluster_com_503_comment =
  "C++ Interface:\n"
  "cluster_com(BulletSoftBodyNode self, int cluster)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_cluster_com_503_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::link_geom(Geom *geom)
 */
static PyObject *Dtool_BulletSoftBodyNode_link_geom_504(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.link_geom")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::link_geom(Geom *geom)
  Geom *arg_this = (Geom *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_Geom, 1, "BulletSoftBodyNode.link_geom", false, true);
  if (arg_this != nullptr) {
    ((*local_this).link_geom)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "link_geom(const BulletSoftBodyNode self, Geom geom)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_link_geom_504_comment =
  "C++ Interface:\n"
  "link_geom(const BulletSoftBodyNode self, Geom geom)\n"
  "\n"
  "// Rendering\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_link_geom_504_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::unlink_geom(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_unlink_geom_505(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.unlink_geom")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::unlink_geom(void)
  ((*local_this).unlink_geom)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_unlink_geom_505_comment =
  "C++ Interface:\n"
  "unlink_geom(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_unlink_geom_505_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::link_curve(NurbsCurveEvaluator *curve)
 */
static PyObject *Dtool_BulletSoftBodyNode_link_curve_506(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.link_curve")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::link_curve(NurbsCurveEvaluator *curve)
  NurbsCurveEvaluator *arg_this = (NurbsCurveEvaluator *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_NurbsCurveEvaluator, 1, "BulletSoftBodyNode.link_curve", false, true);
  if (arg_this != nullptr) {
    ((*local_this).link_curve)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "link_curve(const BulletSoftBodyNode self, NurbsCurveEvaluator curve)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_link_curve_506_comment =
  "C++ Interface:\n"
  "link_curve(const BulletSoftBodyNode self, NurbsCurveEvaluator curve)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_link_curve_506_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::unlink_curve(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_unlink_curve_507(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.unlink_curve")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::unlink_curve(void)
  ((*local_this).unlink_curve)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_unlink_curve_507_comment =
  "C++ Interface:\n"
  "unlink_curve(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_unlink_curve_507_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::link_surface(NurbsSurfaceEvaluator *surface)
 */
static PyObject *Dtool_BulletSoftBodyNode_link_surface_508(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.link_surface")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::link_surface(NurbsSurfaceEvaluator *surface)
  NurbsSurfaceEvaluator *arg_this = (NurbsSurfaceEvaluator *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_NurbsSurfaceEvaluator, 1, "BulletSoftBodyNode.link_surface", false, true);
  if (arg_this != nullptr) {
    ((*local_this).link_surface)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "link_surface(const BulletSoftBodyNode self, NurbsSurfaceEvaluator surface)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_link_surface_508_comment =
  "C++ Interface:\n"
  "link_surface(const BulletSoftBodyNode self, NurbsSurfaceEvaluator surface)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_link_surface_508_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::unlink_surface(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_unlink_surface_509(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.unlink_surface")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::unlink_surface(void)
  ((*local_this).unlink_surface)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_unlink_surface_509_comment =
  "C++ Interface:\n"
  "unlink_surface(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_unlink_surface_509_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, LVector3 const &pivot, bool disable = false)
 * void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable = false)
 */
static PyObject *Dtool_BulletSoftBodyNode_append_anchor_510(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.append_anchor")) {
    return nullptr;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable)
      int param1;
      PyObject *param2;
      static const char *keyword_list[] = {"node", "body", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "iO:append_anchor", (char **)keyword_list, &param1, &param2)) {
        BulletRigidBodyNode *param2_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_BulletRigidBodyNode, 2, "BulletSoftBodyNode.append_anchor", false, true);
        if (param2_this != nullptr) {
          ((*local_this).append_anchor)((int)param1, param2_this);
          return Dtool_Return_None();
        }
      }
    }
    break;
  case 3:
  case 4:
    {
      {
        // -2 void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, LVector3 const &pivot, bool disable = false)
        int param1;
        PyObject *param2;
        PyObject *param3;
        PyObject *param4 = Py_False;
        static const char *keyword_list[] = {"node", "body", "pivot", "disable", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "iOO|O:append_anchor", (char **)keyword_list, &param1, &param2, &param3, &param4)) {
          BulletRigidBodyNode *param2_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_BulletRigidBodyNode, 2, "BulletSoftBodyNode.append_anchor", false, false);
          LVector3 const *param3_this = nullptr;
          DtoolInstance_GetPointer(param3, param3_this, *Dtool_Ptr_LVector3f);
          if (param2_this != nullptr && param3_this != nullptr) {
            ((*local_this).append_anchor)((int)param1, param2_this, *param3_this, (PyObject_IsTrue(param4) != 0));
            return Dtool_Return_None();
          }
        }
        PyErr_Clear();
      }

      {
        // -2 void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable = false)
        int param1;
        PyObject *param2;
        PyObject *param3;
        static const char *keyword_list[] = {"node", "body", "disable", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "iOO:append_anchor", (char **)keyword_list, &param1, &param2, &param3)) {
          BulletRigidBodyNode *param2_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_BulletRigidBodyNode, 2, "BulletSoftBodyNode.append_anchor", false, false);
          if (param2_this != nullptr) {
            ((*local_this).append_anchor)((int)param1, param2_this, (PyObject_IsTrue(param3) != 0));
            return Dtool_Return_None();
          }
        }
        PyErr_Clear();
      }

      {
        // -2 void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, LVector3 const &pivot, bool disable = false)
        int param1;
        PyObject *param2;
        PyObject *param3;
        PyObject *param4 = Py_False;
        static const char *keyword_list[] = {"node", "body", "pivot", "disable", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "iOO|O:append_anchor", (char **)keyword_list, &param1, &param2, &param3, &param4)) {
          BulletRigidBodyNode *param2_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_BulletRigidBodyNode, 2, "BulletSoftBodyNode.append_anchor", false, false);
          LVector3f param3_local;
          LVector3 const *param3_this = Dtool_Coerce_LVector3f(param3, param3_local);
          if (param2_this != nullptr && (param3_this != nullptr)) {
            ((*local_this).append_anchor)((int)param1, param2_this, *param3_this, (PyObject_IsTrue(param4) != 0));
            return Dtool_Return_None();
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable = false)
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "append_anchor() takes 3, 4 or 5 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "append_anchor(const BulletSoftBodyNode self, int node, BulletRigidBodyNode body)\n"
      "append_anchor(const BulletSoftBodyNode self, int node, BulletRigidBodyNode body, const LVector3f pivot, bool disable)\n"
      "append_anchor(const BulletSoftBodyNode self, int node, BulletRigidBodyNode body, bool disable)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_append_anchor_510_comment =
  "C++ Interface:\n"
  "append_anchor(const BulletSoftBodyNode self, int node, BulletRigidBodyNode body)\n"
  "append_anchor(const BulletSoftBodyNode self, int node, BulletRigidBodyNode body, const LVector3f pivot, bool disable)\n"
  "append_anchor(const BulletSoftBodyNode self, int node, BulletRigidBodyNode body, bool disable)\n"
  "\n"
  "// Anchors\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_append_anchor_510_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, LPoint3 const &pos, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0)
 * void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, int cluster, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0)
 */
static PyObject *Dtool_BulletSoftBodyNode_append_linear_joint_511(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.append_linear_joint")) {
    return nullptr;
  }
  {
    // -2 void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, LPoint3 const &pos, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0)
    PyObject *param1;
    PyObject *param2;
    float param3 = 1.0;
    float param4 = 1.0;
    float param5 = 1.0;
    static const char *keyword_list[] = {"body", "pos", "erp", "cfm", "split", nullptr};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "OO|fff:append_linear_joint", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5)) {
      BulletBodyNode *param1_this = (BulletBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletBodyNode, 1, "BulletSoftBodyNode.append_linear_joint", false, false);
      LPoint3 const *param2_this = nullptr;
      DtoolInstance_GetPointer(param2, param2_this, *Dtool_Ptr_LPoint3f);
      if (param1_this != nullptr && param2_this != nullptr) {
        ((*local_this).append_linear_joint)(param1_this, *param2_this, (PN_stdfloat)param3, (PN_stdfloat)param4, (PN_stdfloat)param5);
        return Dtool_Return_None();
      }
    }
    PyErr_Clear();
  }

  {
    // -2 void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, int cluster, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0)
    PyObject *param1;
    int param2;
    float param3 = 1.0;
    float param4 = 1.0;
    float param5 = 1.0;
    static const char *keyword_list[] = {"body", "cluster", "erp", "cfm", "split", nullptr};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "Oi|fff:append_linear_joint", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5)) {
      BulletBodyNode *param1_this = (BulletBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletBodyNode, 1, "BulletSoftBodyNode.append_linear_joint", false, false);
      if (param1_this != nullptr) {
        ((*local_this).append_linear_joint)(param1_this, (int)param2, (PN_stdfloat)param3, (PN_stdfloat)param4, (PN_stdfloat)param5);
        return Dtool_Return_None();
      }
    }
    PyErr_Clear();
  }

  {
    // -2 void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, LPoint3 const &pos, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0)
    PyObject *param1;
    PyObject *param2;
    float param3 = 1.0;
    float param4 = 1.0;
    float param5 = 1.0;
    static const char *keyword_list[] = {"body", "pos", "erp", "cfm", "split", nullptr};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "OO|fff:append_linear_joint", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5)) {
      BulletBodyNode *param1_this = (BulletBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletBodyNode, 1, "BulletSoftBodyNode.append_linear_joint", false, false);
      LPoint3f param2_local;
      LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
      if (param1_this != nullptr && (param2_this != nullptr)) {
        ((*local_this).append_linear_joint)(param1_this, *param2_this, (PN_stdfloat)param3, (PN_stdfloat)param4, (PN_stdfloat)param5);
        return Dtool_Return_None();
      }
    }
    PyErr_Clear();
  }

  // No coercion possible: void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, int cluster, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0)
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "append_linear_joint(const BulletSoftBodyNode self, BulletBodyNode body, const LPoint3f pos, float erp, float cfm, float split)\n"
      "append_linear_joint(const BulletSoftBodyNode self, BulletBodyNode body, int cluster, float erp, float cfm, float split)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_append_linear_joint_511_comment =
  "C++ Interface:\n"
  "append_linear_joint(const BulletSoftBodyNode self, BulletBodyNode body, const LPoint3f pos, float erp, float cfm, float split)\n"
  "append_linear_joint(const BulletSoftBodyNode self, BulletBodyNode body, int cluster, float erp, float cfm, float split)\n"
  "\n"
  "// Links\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_append_linear_joint_511_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::append_angular_joint(BulletBodyNode *body, LVector3 const &axis, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0, BulletSoftBodyControl *control = nullptr)
 */
static PyObject *Dtool_BulletSoftBodyNode_append_angular_joint_512(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.append_angular_joint")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyNode::append_angular_joint(BulletBodyNode *body, LVector3 const &axis, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0, BulletSoftBodyControl *control = nullptr)
  PyObject *param1;
  PyObject *param2;
  float param3 = 1.0;
  float param4 = 1.0;
  float param5 = 1.0;
  PyObject *param6 = nullptr;
  static const char *keyword_list[] = {"body", "axis", "erp", "cfm", "split", "control", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO|fffO:append_angular_joint", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5, &param6)) {
    BulletBodyNode *param1_this = (BulletBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletBodyNode, 1, "BulletSoftBodyNode.append_angular_joint", false, true);
    LVector3f param2_local;
    LVector3 const *param2_this = Dtool_Coerce_LVector3f(param2, param2_local);
    if (!(param2_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletSoftBodyNode.append_angular_joint", "LVector3f");
    }
    BulletSoftBodyControl *param6_this = nullptr;
    if (param6 != nullptr && param6 != Py_None) {
      param6_this = (BulletSoftBodyControl *)DTOOL_Call_GetPointerThisClass(param6, Dtool_Ptr_BulletSoftBodyControl, 6, "BulletSoftBodyNode.append_angular_joint", false, true);
    }
    if (param1_this != nullptr && (param6 == nullptr || param6 == Py_None || param6_this != nullptr)) {
      ((*local_this).append_angular_joint)(param1_this, *param2_this, (PN_stdfloat)param3, (PN_stdfloat)param4, (PN_stdfloat)param5, param6_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "append_angular_joint(const BulletSoftBodyNode self, BulletBodyNode body, const LVector3f axis, float erp, float cfm, float split, BulletSoftBodyControl control)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_append_angular_joint_512_comment =
  "C++ Interface:\n"
  "append_angular_joint(const BulletSoftBodyNode self, BulletBodyNode body, const LVector3f axis, float erp, float cfm, float split, BulletSoftBodyControl control)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_append_angular_joint_512_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletSoftBodyNode::get_num_materials(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_num_materials_513(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNode)) {
    return nullptr;
  }
  // 1-int BulletSoftBodyNode::get_num_materials(void) const
  int return_value = ((*(const BulletSoftBodyNode*)local_this).get_num_materials)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_num_materials_513_comment =
  "C++ Interface:\n"
  "get_num_materials(BulletSoftBodyNode self)\n"
  "\n"
  "// Materials\n"
  "\n"
  "// Materials\n"
  "\n"
  "// Materials\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_num_materials_513_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyMaterial BulletSoftBodyNode::get_material(int idx) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_material_514(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNode)) {
    return nullptr;
  }
  // 1-BulletSoftBodyMaterial BulletSoftBodyNode::get_material(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletSoftBodyMaterial *return_value = new BulletSoftBodyMaterial(((*(const BulletSoftBodyNode*)local_this).get_material)((int)arg_val));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyMaterial, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_material(BulletSoftBodyNode self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_material_514_comment =
  "C++ Interface:\n"
  "get_material(BulletSoftBodyNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_material_514_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyMaterial BulletSoftBodyNode::append_material(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_append_material_516(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.append_material")) {
    return nullptr;
  }
  // 1-BulletSoftBodyMaterial BulletSoftBodyNode::append_material(void)
  BulletSoftBodyMaterial *return_value = new BulletSoftBodyMaterial(((*local_this).append_material)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyMaterial, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_append_material_516_comment =
  "C++ Interface:\n"
  "append_material(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_append_material_516_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletSoftBodyNode::get_num_nodes(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_num_nodes_517(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNode)) {
    return nullptr;
  }
  // 1-int BulletSoftBodyNode::get_num_nodes(void) const
  int return_value = ((*(const BulletSoftBodyNode*)local_this).get_num_nodes)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_num_nodes_517_comment =
  "C++ Interface:\n"
  "get_num_nodes(BulletSoftBodyNode self)\n"
  "\n"
  "// Nodes\n"
  "\n"
  "// Nodes\n"
  "\n"
  "// Nodes\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_num_nodes_517_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyNodeElement BulletSoftBodyNode::get_node(int idx) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_node_518(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyNode)) {
    return nullptr;
  }
  // 1-BulletSoftBodyNodeElement BulletSoftBodyNode::get_node(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletSoftBodyNodeElement *return_value = new BulletSoftBodyNodeElement(((*(const BulletSoftBodyNode*)local_this).get_node)((int)arg_val));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyNodeElement, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_node(BulletSoftBodyNode self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_node_518_comment =
  "C++ Interface:\n"
  "get_node(BulletSoftBodyNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_node_518_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletSoftBodyNode::get_closest_node_index(LVecBase3 point, bool local)
 */
static PyObject *Dtool_BulletSoftBodyNode_get_closest_node_index_520(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.get_closest_node_index")) {
    return nullptr;
  }
  // 1-int BulletSoftBodyNode::get_closest_node_index(LVecBase3 point, bool local)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"point", "local", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:get_closest_node_index", (char **)keyword_list, &param1, &param2)) {
    LVecBase3f param1_local;
    LVecBase3 *param1_this = Dtool_Coerce_LVecBase3f(param1, param1_local);
    if (!(param1_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.get_closest_node_index", "LVecBase3f");
    }
    int return_value = ((*local_this).get_closest_node_index)(*param1_this, (PyObject_IsTrue(param2) != 0));
    if (Dtool_CheckErrorOccurred()) {
      return nullptr;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_closest_node_index(const BulletSoftBodyNode self, LVecBase3f point, bool local)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_closest_node_index_520_comment =
  "C++ Interface:\n"
  "get_closest_node_index(const BulletSoftBodyNode self, LVecBase3f point, bool local)\n"
  "\n"
  "/**\n"
  " * Returns the index of the node which is closest to the given point.  The\n"
  " * distance between each node and the given point is computed in world space\n"
  " * if local=false, and in local space if local=true.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_closest_node_index_520_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_rope(BulletSoftBodyWorldInfo &info, LPoint3 const &from, LPoint3 const &to, int res, int fixeds)
 */
static PyObject *Dtool_BulletSoftBodyNode_make_rope_521(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_rope(BulletSoftBodyWorldInfo &info, LPoint3 const &from, LPoint3 const &to, int res, int fixeds)
  PyObject *param0;
  PyObject *param1;
  PyObject *param2;
  int param3;
  int param4;
  static const char *keyword_list[] = {"info", "from", "to", "res", "fixeds", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOii:make_rope", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4)) {
    BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_rope", false, true);
    LPoint3f param1_local;
    LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
    if (!(param1_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.make_rope", "LPoint3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletSoftBodyNode.make_rope", "LPoint3f");
    }
    if (param0_this != nullptr) {
      PointerTo< BulletSoftBodyNode > return_value = (BulletSoftBodyNode::make_rope)(*param0_this, *param1_this, *param2_this, (int)param3, (int)param4);
      if (Dtool_CheckErrorOccurred()) {
        return nullptr;
      }
      // Transfer ownership of return_value.
      BulletSoftBodyNode *return_ptr = return_value.p();
      return_value.cheat() = nullptr;
      if (return_ptr == nullptr) {
        Py_INCREF(Py_None);
        return Py_None;
      } else {
        return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
      }
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_rope(BulletSoftBodyWorldInfo info, const LPoint3f from, const LPoint3f to, int res, int fixeds)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_make_rope_521_comment =
  "C++ Interface:\n"
  "make_rope(BulletSoftBodyWorldInfo info, const LPoint3f from, const LPoint3f to, int res, int fixeds)\n"
  "\n"
  "// Factory\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_make_rope_521_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_patch(BulletSoftBodyWorldInfo &info, LPoint3 const &corner00, LPoint3 const &corner10, LPoint3 const &corner01, LPoint3 const &corner11, int resx, int resy, int fixeds, bool gendiags)
 */
static PyObject *Dtool_BulletSoftBodyNode_make_patch_522(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_patch(BulletSoftBodyWorldInfo &info, LPoint3 const &corner00, LPoint3 const &corner10, LPoint3 const &corner01, LPoint3 const &corner11, int resx, int resy, int fixeds, bool gendiags)
  PyObject *param0;
  PyObject *param1;
  PyObject *param2;
  PyObject *param3;
  PyObject *param4;
  int param5;
  int param6;
  int param7;
  PyObject *param8;
  static const char *keyword_list[] = {"info", "corner00", "corner10", "corner01", "corner11", "resx", "resy", "fixeds", "gendiags", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOiiiO:make_patch", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4, &param5, &param6, &param7, &param8)) {
    BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_patch", false, true);
    LPoint3f param1_local;
    LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
    if (!(param1_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.make_patch", "LPoint3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletSoftBodyNode.make_patch", "LPoint3f");
    }
    LPoint3f param3_local;
    LPoint3 const *param3_this = Dtool_Coerce_LPoint3f(param3, param3_local);
    if (!(param3_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param3, 3, "BulletSoftBodyNode.make_patch", "LPoint3f");
    }
    LPoint3f param4_local;
    LPoint3 const *param4_this = Dtool_Coerce_LPoint3f(param4, param4_local);
    if (!(param4_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param4, 4, "BulletSoftBodyNode.make_patch", "LPoint3f");
    }
    if (param0_this != nullptr) {
      PointerTo< BulletSoftBodyNode > return_value = (BulletSoftBodyNode::make_patch)(*param0_this, *param1_this, *param2_this, *param3_this, *param4_this, (int)param5, (int)param6, (int)param7, (PyObject_IsTrue(param8) != 0));
      if (Dtool_CheckErrorOccurred()) {
        return nullptr;
      }
      // Transfer ownership of return_value.
      BulletSoftBodyNode *return_ptr = return_value.p();
      return_value.cheat() = nullptr;
      if (return_ptr == nullptr) {
        Py_INCREF(Py_None);
        return Py_None;
      } else {
        return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
      }
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_patch(BulletSoftBodyWorldInfo info, const LPoint3f corner00, const LPoint3f corner10, const LPoint3f corner01, const LPoint3f corner11, int resx, int resy, int fixeds, bool gendiags)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_make_patch_522_comment =
  "C++ Interface:\n"
  "make_patch(BulletSoftBodyWorldInfo info, const LPoint3f corner00, const LPoint3f corner10, const LPoint3f corner01, const LPoint3f corner11, int resx, int resy, int fixeds, bool gendiags)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_make_patch_522_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_ellipsoid(BulletSoftBodyWorldInfo &info, LPoint3 const &center, LVecBase3 const &radius, int res)
 */
static PyObject *Dtool_BulletSoftBodyNode_make_ellipsoid_523(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_ellipsoid(BulletSoftBodyWorldInfo &info, LPoint3 const &center, LVecBase3 const &radius, int res)
  PyObject *param0;
  PyObject *param1;
  PyObject *param2;
  int param3;
  static const char *keyword_list[] = {"info", "center", "radius", "res", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOi:make_ellipsoid", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
    BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_ellipsoid", false, true);
    LPoint3f param1_local;
    LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
    if (!(param1_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.make_ellipsoid", "LPoint3f");
    }
    LVecBase3f param2_local;
    LVecBase3 const *param2_this = Dtool_Coerce_LVecBase3f(param2, param2_local);
    if (!(param2_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletSoftBodyNode.make_ellipsoid", "LVecBase3f");
    }
    if (param0_this != nullptr) {
      PointerTo< BulletSoftBodyNode > return_value = (BulletSoftBodyNode::make_ellipsoid)(*param0_this, *param1_this, *param2_this, (int)param3);
      if (Dtool_CheckErrorOccurred()) {
        return nullptr;
      }
      // Transfer ownership of return_value.
      BulletSoftBodyNode *return_ptr = return_value.p();
      return_value.cheat() = nullptr;
      if (return_ptr == nullptr) {
        Py_INCREF(Py_None);
        return Py_None;
      } else {
        return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
      }
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_ellipsoid(BulletSoftBodyWorldInfo info, const LPoint3f center, const LVecBase3f radius, int res)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_make_ellipsoid_523_comment =
  "C++ Interface:\n"
  "make_ellipsoid(BulletSoftBodyWorldInfo info, const LPoint3f center, const LVecBase3f radius, int res)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_make_ellipsoid_523_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints = true)
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool randomizeConstraints = true)
 */
static PyObject *Dtool_BulletSoftBodyNode_make_tri_mesh_524(PyObject *, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints)
      PyObject *param0;
      PyObject *param1;
      static const char *keyword_list[] = {"info", "geom", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:make_tri_mesh", (char **)keyword_list, &param0, &param1)) {
        BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tri_mesh", false, true);
        Geom const *param1_this = (Geom *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_Geom, 1, "BulletSoftBodyNode.make_tri_mesh", true, true);
        if (param0_this != nullptr && param1_this != nullptr) {
          PointerTo< BulletSoftBodyNode > return_value = (BulletSoftBodyNode::make_tri_mesh)(*param0_this, param1_this);
          if (Dtool_CheckErrorOccurred()) {
            return nullptr;
          }
          // Transfer ownership of return_value.
          BulletSoftBodyNode *return_ptr = return_value.p();
          return_value.cheat() = nullptr;
          if (return_ptr == nullptr) {
            Py_INCREF(Py_None);
            return Py_None;
          } else {
            return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
          }
        }
      }
    }
    break;
  case 3:
  case 4:
    {
      {
        // -2 static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool randomizeConstraints = true)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3 = Py_True;
        static const char *keyword_list[] = {"info", "points", "indices", "randomizeConstraints", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO|O:make_tri_mesh", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tri_mesh", false, false);
          PTA_LVecBase3 *param1_this = nullptr;
          DtoolInstance_GetPointer(param1, param1_this, *Dtool_Ptr_PointerToArray_LVecBase3f);
          PTA_int *param2_this = nullptr;
          DtoolInstance_GetPointer(param2, param2_this, *Dtool_Ptr_PointerToArray_int);
          if (param0_this != nullptr && param1_this != nullptr && param2_this != nullptr) {
            PointerTo< BulletSoftBodyNode > return_value = (BulletSoftBodyNode::make_tri_mesh)(*param0_this, *param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
            if (Dtool_CheckErrorOccurred()) {
              return nullptr;
            }
            // Transfer ownership of return_value.
            BulletSoftBodyNode *return_ptr = return_value.p();
            return_value.cheat() = nullptr;
            if (return_ptr == nullptr) {
              Py_INCREF(Py_None);
              return Py_None;
            } else {
              return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
            }
          }
        }
        PyErr_Clear();
      }

      {
        // -2 static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints = true)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        static const char *keyword_list[] = {"info", "geom", "randomizeConstraints", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:make_tri_mesh", (char **)keyword_list, &param0, &param1, &param2)) {
          BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tri_mesh", false, false);
          Geom const *param1_this = nullptr;
          DtoolInstance_GetPointer(param1, param1_this, *Dtool_Ptr_Geom);
          if (param0_this != nullptr && param1_this != nullptr) {
            PointerTo< BulletSoftBodyNode > return_value = (BulletSoftBodyNode::make_tri_mesh)(*param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
            if (Dtool_CheckErrorOccurred()) {
              return nullptr;
            }
            // Transfer ownership of return_value.
            BulletSoftBodyNode *return_ptr = return_value.p();
            return_value.cheat() = nullptr;
            if (return_ptr == nullptr) {
              Py_INCREF(Py_None);
              return Py_None;
            } else {
              return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
            }
          }
        }
        PyErr_Clear();
      }

      {
        // -2 static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool randomizeConstraints = true)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3 = Py_True;
        static const char *keyword_list[] = {"info", "points", "indices", "randomizeConstraints", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO|O:make_tri_mesh", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tri_mesh", false, false);
          PointerToArray< LVecBase3f > param1_local;
          PTA_LVecBase3 *param1_this = Dtool_Coerce_PointerToArray_LVecBase3f(param1, param1_local);
          PointerToArray< int > param2_local;
          PTA_int *param2_this = Dtool_Coerce_PointerToArray_int(param2, param2_local);
          if (param0_this != nullptr && (param1_this != nullptr) && (param2_this != nullptr)) {
            PointerTo< BulletSoftBodyNode > return_value = (BulletSoftBodyNode::make_tri_mesh)(*param0_this, *param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
            if (Dtool_CheckErrorOccurred()) {
              return nullptr;
            }
            // Transfer ownership of return_value.
            BulletSoftBodyNode *return_ptr = return_value.p();
            return_value.cheat() = nullptr;
            if (return_ptr == nullptr) {
              Py_INCREF(Py_None);
              return Py_None;
            } else {
              return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
            }
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints = true)
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "make_tri_mesh() takes 2, 3 or 4 arguments (%d given)",
                        parameter_count);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_tri_mesh(BulletSoftBodyWorldInfo info, const Geom geom)\n"
      "make_tri_mesh(BulletSoftBodyWorldInfo info, PointerToArray points, PointerToArray indices, bool randomizeConstraints)\n"
      "make_tri_mesh(BulletSoftBodyWorldInfo info, const Geom geom, bool randomizeConstraints)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_make_tri_mesh_524_comment =
  "C++ Interface:\n"
  "make_tri_mesh(BulletSoftBodyWorldInfo info, const Geom geom)\n"
  "make_tri_mesh(BulletSoftBodyWorldInfo info, PointerToArray points, PointerToArray indices, bool randomizeConstraints)\n"
  "make_tri_mesh(BulletSoftBodyWorldInfo info, const Geom geom, bool randomizeConstraints)\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_make_tri_mesh_524_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks = true)
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, char const *ele, char const *face, char const *node)
 */
static PyObject *Dtool_BulletSoftBodyNode_make_tet_mesh_525(PyObject *, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 3:
    {
      // 1-static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      static const char *keyword_list[] = {"info", "points", "indices", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:make_tet_mesh", (char **)keyword_list, &param0, &param1, &param2)) {
        BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tet_mesh", false, true);
        PointerToArray< LVecBase3f > param1_local;
        PTA_LVecBase3 *param1_this = Dtool_Coerce_PointerToArray_LVecBase3f(param1, param1_local);
        if (!(param1_this != nullptr)) {
          return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.make_tet_mesh", "PointerToArray");
        }
        PointerToArray< int > param2_local;
        PTA_int *param2_this = Dtool_Coerce_PointerToArray_int(param2, param2_local);
        if (!(param2_this != nullptr)) {
          return Dtool_Raise_ArgTypeError(param2, 2, "BulletSoftBodyNode.make_tet_mesh", "PointerToArray");
        }
        if (param0_this != nullptr) {
          PointerTo< BulletSoftBodyNode > return_value = (BulletSoftBodyNode::make_tet_mesh)(*param0_this, *param1_this, *param2_this);
          if (Dtool_CheckErrorOccurred()) {
            return nullptr;
          }
          // Transfer ownership of return_value.
          BulletSoftBodyNode *return_ptr = return_value.p();
          return_value.cheat() = nullptr;
          if (return_ptr == nullptr) {
            Py_INCREF(Py_None);
            return Py_None;
          } else {
            return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
          }
        }
      }
    }
    break;
  case 4:
    {
      {
        // -2 static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        static const char *keyword_list[] = {"info", "points", "indices", "tetralinks", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:make_tet_mesh", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tet_mesh", false, false);
          PTA_LVecBase3 *param1_this = nullptr;
          DtoolInstance_GetPointer(param1, param1_this, *Dtool_Ptr_PointerToArray_LVecBase3f);
          PTA_int *param2_this = nullptr;
          DtoolInstance_GetPointer(param2, param2_this, *Dtool_Ptr_PointerToArray_int);
          if (param0_this != nullptr && param1_this != nullptr && param2_this != nullptr) {
            PointerTo< BulletSoftBodyNode > return_value = (BulletSoftBodyNode::make_tet_mesh)(*param0_this, *param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
            if (Dtool_CheckErrorOccurred()) {
              return nullptr;
            }
            // Transfer ownership of return_value.
            BulletSoftBodyNode *return_ptr = return_value.p();
            return_value.cheat() = nullptr;
            if (return_ptr == nullptr) {
              Py_INCREF(Py_None);
              return Py_None;
            } else {
              return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
            }
          }
        }
        PyErr_Clear();
      }

      {
        // -2 static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, char const *ele, char const *face, char const *node)
        PyObject *param0;
        char const *param1;
        char const *param2;
        char const *param3;
        static const char *keyword_list[] = {"info", "ele", "face", "node", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "Ozzz:make_tet_mesh", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tet_mesh", false, false);
          if (param0_this != nullptr) {
            PointerTo< BulletSoftBodyNode > return_value = (BulletSoftBodyNode::make_tet_mesh)(*param0_this, (char const *)param1, (char const *)param2, (char const *)param3);
            if (Dtool_CheckErrorOccurred()) {
              return nullptr;
            }
            // Transfer ownership of return_value.
            BulletSoftBodyNode *return_ptr = return_value.p();
            return_value.cheat() = nullptr;
            if (return_ptr == nullptr) {
              Py_INCREF(Py_None);
              return Py_None;
            } else {
              return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
            }
          }
        }
        PyErr_Clear();
      }

      {
        // -2 static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        static const char *keyword_list[] = {"info", "points", "indices", "tetralinks", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:make_tet_mesh", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tet_mesh", false, false);
          PointerToArray< LVecBase3f > param1_local;
          PTA_LVecBase3 *param1_this = Dtool_Coerce_PointerToArray_LVecBase3f(param1, param1_local);
          PointerToArray< int > param2_local;
          PTA_int *param2_this = Dtool_Coerce_PointerToArray_int(param2, param2_local);
          if (param0_this != nullptr && (param1_this != nullptr) && (param2_this != nullptr)) {
            PointerTo< BulletSoftBodyNode > return_value = (BulletSoftBodyNode::make_tet_mesh)(*param0_this, *param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
            if (Dtool_CheckErrorOccurred()) {
              return nullptr;
            }
            // Transfer ownership of return_value.
            BulletSoftBodyNode *return_ptr = return_value.p();
            return_value.cheat() = nullptr;
            if (return_ptr == nullptr) {
              Py_INCREF(Py_None);
              return Py_None;
            } else {
              return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
            }
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, char const *ele, char const *face, char const *node)
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "make_tet_mesh() takes 3 or 4 arguments (%d given)",
                        parameter_count);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_tet_mesh(BulletSoftBodyWorldInfo info, PointerToArray points, PointerToArray indices)\n"
      "make_tet_mesh(BulletSoftBodyWorldInfo info, PointerToArray points, PointerToArray indices, bool tetralinks)\n"
      "make_tet_mesh(BulletSoftBodyWorldInfo info, str ele, str face, str node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_make_tet_mesh_525_comment =
  "C++ Interface:\n"
  "make_tet_mesh(BulletSoftBodyWorldInfo info, PointerToArray points, PointerToArray indices)\n"
  "make_tet_mesh(BulletSoftBodyWorldInfo info, PointerToArray points, PointerToArray indices, bool tetralinks)\n"
  "make_tet_mesh(BulletSoftBodyWorldInfo info, str ele, str face, str node)\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_make_tet_mesh_525_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletSoftBodyNode::get_class_type(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_get_class_type_649(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletSoftBodyNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletSoftBodyNode::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_class_type_649_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletSoftBodyNode_get_class_type_649_comment = nullptr;
#endif

static PyObject *Dtool_BulletSoftBodyNode_cfg_Getter(PyObject *self, void *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.cfg")) {
    return nullptr;
  }

  // 1-BulletSoftBodyConfig BulletSoftBodyNode::get_cfg(void)
  BulletSoftBodyConfig *return_value = new BulletSoftBodyConfig(((*local_this).get_cfg)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyConfig, true, false);
}

static PyObject *Dtool_BulletSoftBodyNode_world_info_Getter(PyObject *self, void *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.world_info")) {
    return nullptr;
  }

  // 1-BulletSoftBodyWorldInfo BulletSoftBodyNode::get_world_info(void)
  BulletSoftBodyWorldInfo *return_value = new BulletSoftBodyWorldInfo(((*local_this).get_world_info)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyWorldInfo, true, false);
}

static PyObject *Dtool_BulletSoftBodyNode_wind_velocity_Getter(PyObject *self, void *) {
  const BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletSoftBodyNode::get_wind_velocity(void) const
  LVector3 *return_value = new LVector3(((*(const BulletSoftBodyNode*)local_this).get_wind_velocity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static int Dtool_BulletSoftBodyNode_wind_velocity_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.wind_velocity")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete wind_velocity attribute");
    return -1;
  }
  // 1-void BulletSoftBodyNode::set_wind_velocity(LVector3 const &velocity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyNode.set_wind_velocity", "LVector3f");
    return -1;
  }
  ((*local_this).set_wind_velocity)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_wind_velocity(const BulletSoftBodyNode self, const LVector3f velocity)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyNode_aabb_Getter(PyObject *self, void *) {
  const BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-BoundingBox BulletSoftBodyNode::get_aabb(void) const
  BoundingBox *return_value = new BoundingBox(((*(const BulletSoftBodyNode*)local_this).get_aabb)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BoundingBox, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletSoftBodyNode_num_clusters_Getter(PyObject *self, void *) {
  const BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletSoftBodyNode::get_num_clusters(void) const
  int return_value = ((*(const BulletSoftBodyNode*)local_this).get_num_clusters)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * sequence length function for property BulletSoftBodyNode::materials
 */
static Py_ssize_t Dtool_BulletSoftBodyNode_materials_Len(PyObject *self) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_materials)();
}

/**
 * sequence getter for property BulletSoftBodyNode::materials
 */
static PyObject *Dtool_BulletSoftBodyNode_materials_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_materials)()) {
    PyErr_SetString(PyExc_IndexError, "BulletSoftBodyNode.materials[] index out of range");
    return nullptr;
  }
  // 1-BulletSoftBodyMaterial BulletSoftBodyNode::get_material(int idx) const
  BulletSoftBodyMaterial *return_value = new BulletSoftBodyMaterial(((*(const BulletSoftBodyNode*)local_this).get_material)(index));
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyMaterial, true, false);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_material(BulletSoftBodyNode self, index)\n");
  }
}

static PyObject *Dtool_BulletSoftBodyNode_materials_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletSoftBodyNode.materials");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletSoftBodyNode_materials_Len;
    wrap->_getitem_func = &Dtool_BulletSoftBodyNode_materials_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * sequence length function for property BulletSoftBodyNode::nodes
 */
static Py_ssize_t Dtool_BulletSoftBodyNode_nodes_Len(PyObject *self) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_nodes)();
}

/**
 * sequence getter for property BulletSoftBodyNode::nodes
 */
static PyObject *Dtool_BulletSoftBodyNode_nodes_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_nodes)()) {
    PyErr_SetString(PyExc_IndexError, "BulletSoftBodyNode.nodes[] index out of range");
    return nullptr;
  }
  // 1-BulletSoftBodyNodeElement BulletSoftBodyNode::get_node(int idx) const
  BulletSoftBodyNodeElement *return_value = new BulletSoftBodyNodeElement(((*(const BulletSoftBodyNode*)local_this).get_node)(index));
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyNodeElement, true, false);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_node(BulletSoftBodyNode self, index)\n");
  }
}

static PyObject *Dtool_BulletSoftBodyNode_nodes_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletSoftBodyNode.nodes");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletSoftBodyNode_nodes_Len;
    wrap->_getitem_func = &Dtool_BulletSoftBodyNode_nodes_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

static int Dtool_Init_BulletSoftBodyNode(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletSoftBodyNode_get_materials(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_materials)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletSoftBodyNode_get_material_514(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletSoftBodyNode_get_nodes(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_nodes)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletSoftBodyNode_get_node_518(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletSoftBodyNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletSoftBodyNode) {
    printf("BulletSoftBodyNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletSoftBodyNode *local_this = (BulletSoftBodyNode *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletSoftBodyNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletBodyNode) {
    return (BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletSoftBodyNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletBodyNode) {
    BulletBodyNode* other_this = (BulletBodyNode*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletSoftBodyConfig
 */
/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::clear_all_collision_flags(void)
 */
static PyObject *Dtool_BulletSoftBodyConfig_clear_all_collision_flags_531(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.clear_all_collision_flags")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::clear_all_collision_flags(void)
  ((*local_this).clear_all_collision_flags)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_clear_all_collision_flags_531_comment =
  "C++ Interface:\n"
  "clear_all_collision_flags(const BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_clear_all_collision_flags_531_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_collision_flag(BulletSoftBodyConfig::CollisionFlag flag, bool value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_collision_flag_532(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_collision_flag")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_collision_flag(BulletSoftBodyConfig::CollisionFlag flag, bool value)
  int param1;
  PyObject *param2;
  static const char *keyword_list[] = {"flag", "value", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "iO:set_collision_flag", (char **)keyword_list, &param1, &param2)) {
    ((*local_this).set_collision_flag)((BulletSoftBodyConfig::CollisionFlag)param1, (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_collision_flag(const BulletSoftBodyConfig self, int flag, bool value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_collision_flag_532_comment =
  "C++ Interface:\n"
  "set_collision_flag(const BulletSoftBodyConfig self, int flag, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_collision_flag_532_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletSoftBodyConfig::get_collision_flag(BulletSoftBodyConfig::CollisionFlag flag) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_collision_flag_533(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-bool BulletSoftBodyConfig::get_collision_flag(BulletSoftBodyConfig::CollisionFlag flag) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    bool return_value = ((*(const BulletSoftBodyConfig*)local_this).get_collision_flag)((BulletSoftBodyConfig::CollisionFlag)arg_val);
    return Dtool_Return_Bool(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_collision_flag(BulletSoftBodyConfig self, int flag)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_collision_flag_533_comment =
  "C++ Interface:\n"
  "get_collision_flag(BulletSoftBodyConfig self, int flag)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_collision_flag_533_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_aero_model(BulletSoftBodyConfig::AeroModel value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_aero_model_534(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_aero_model")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_aero_model(BulletSoftBodyConfig::AeroModel value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    ((*local_this).set_aero_model)((BulletSoftBodyConfig::AeroModel)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_aero_model(const BulletSoftBodyConfig self, int value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_aero_model_534_comment =
  "C++ Interface:\n"
  "set_aero_model(const BulletSoftBodyConfig self, int value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_aero_model_534_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyConfig::AeroModel BulletSoftBodyConfig::get_aero_model(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_aero_model_535(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-BulletSoftBodyConfig::AeroModel BulletSoftBodyConfig::get_aero_model(void) const
  BulletSoftBodyConfig::AeroModel return_value = ((*(const BulletSoftBodyConfig*)local_this).get_aero_model)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_aero_model_535_comment =
  "C++ Interface:\n"
  "get_aero_model(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_aero_model_535_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_velocities_correction_factor(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_536(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_velocities_correction_factor")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_velocities_correction_factor(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_velocities_correction_factor)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_velocities_correction_factor(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_536_comment =
  "C++ Interface:\n"
  "set_velocities_correction_factor(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kVCF.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_536_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_damping_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_damping_coefficient_537(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_damping_coefficient")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_damping_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_damping_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_damping_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_damping_coefficient_537_comment =
  "C++ Interface:\n"
  "set_damping_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kDP.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_damping_coefficient_537_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_drag_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_drag_coefficient_538(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_drag_coefficient")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_drag_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_drag_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_drag_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_drag_coefficient_538_comment =
  "C++ Interface:\n"
  "set_drag_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kDG.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_drag_coefficient_538_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_lift_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_lift_coefficient_539(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_lift_coefficient")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_lift_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_lift_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_lift_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_lift_coefficient_539_comment =
  "C++ Interface:\n"
  "set_lift_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kLF.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_lift_coefficient_539_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_pressure_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_pressure_coefficient_540(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_pressure_coefficient")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_pressure_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_pressure_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_pressure_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_pressure_coefficient_540_comment =
  "C++ Interface:\n"
  "set_pressure_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kPR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_pressure_coefficient_540_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_volume_conservation_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_volume_conservation_coefficient_541(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_volume_conservation_coefficient")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_volume_conservation_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_volume_conservation_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_volume_conservation_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_volume_conservation_coefficient_541_comment =
  "C++ Interface:\n"
  "set_volume_conservation_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kVC.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_volume_conservation_coefficient_541_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_dynamic_friction_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_542(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_dynamic_friction_coefficient")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_dynamic_friction_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_dynamic_friction_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_dynamic_friction_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_542_comment =
  "C++ Interface:\n"
  "set_dynamic_friction_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kDF.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_542_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_pose_matching_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_543(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_pose_matching_coefficient")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_pose_matching_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_pose_matching_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_pose_matching_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_543_comment =
  "C++ Interface:\n"
  "set_pose_matching_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kMT.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_543_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_rigid_contacts_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_544(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_rigid_contacts_hardness")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_rigid_contacts_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_rigid_contacts_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_rigid_contacts_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_544_comment =
  "C++ Interface:\n"
  "set_rigid_contacts_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kCHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_544_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_kinetic_contacts_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_545(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_kinetic_contacts_hardness")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_kinetic_contacts_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_kinetic_contacts_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_kinetic_contacts_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_545_comment =
  "C++ Interface:\n"
  "set_kinetic_contacts_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kKHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_545_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_soft_contacts_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_546(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_contacts_hardness")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_soft_contacts_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_contacts_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_contacts_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_546_comment =
  "C++ Interface:\n"
  "set_soft_contacts_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_546_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_anchors_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_anchors_hardness_547(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_anchors_hardness")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_anchors_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_anchors_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_anchors_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_anchors_hardness_547_comment =
  "C++ Interface:\n"
  "set_anchors_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kAHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_anchors_hardness_547_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_soft_vs_rigid_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_548(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_vs_rigid_hardness")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_soft_vs_rigid_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_vs_rigid_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_vs_rigid_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_548_comment =
  "C++ Interface:\n"
  "set_soft_vs_rigid_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSRHR_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_548_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_soft_vs_kinetic_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_549(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_vs_kinetic_hardness")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_soft_vs_kinetic_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_vs_kinetic_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_vs_kinetic_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_549_comment =
  "C++ Interface:\n"
  "set_soft_vs_kinetic_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSKHR_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_549_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_soft_vs_soft_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_550(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_vs_soft_hardness")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_soft_vs_soft_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_vs_soft_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_vs_soft_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_550_comment =
  "C++ Interface:\n"
  "set_soft_vs_soft_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSSHR_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_550_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_551(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_vs_rigid_impulse_split")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_vs_rigid_impulse_split)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_vs_rigid_impulse_split(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_551_comment =
  "C++ Interface:\n"
  "set_soft_vs_rigid_impulse_split(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSR_SPLT_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_551_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_552(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_vs_kinetic_impulse_split")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_vs_kinetic_impulse_split)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_vs_kinetic_impulse_split(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_552_comment =
  "C++ Interface:\n"
  "set_soft_vs_kinetic_impulse_split(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSK_SPLT_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_552_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_soft_vs_soft_impulse_split(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_553(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_vs_soft_impulse_split")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_soft_vs_soft_impulse_split(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_vs_soft_impulse_split)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_vs_soft_impulse_split(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_553_comment =
  "C++ Interface:\n"
  "set_soft_vs_soft_impulse_split(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSS_SPLT_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_553_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_maxvolume(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_maxvolume_554(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_maxvolume")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_maxvolume(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_maxvolume)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_maxvolume(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_maxvolume_554_comment =
  "C++ Interface:\n"
  "set_maxvolume(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property maxvolume.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_maxvolume_554_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_timescale(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_timescale_555(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_timescale")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_timescale(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_timescale)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_timescale(const BulletSoftBodyConfig self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_timescale_555_comment =
  "C++ Interface:\n"
  "set_timescale(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property timescale.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_timescale_555_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_positions_solver_iterations(int value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_556(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_positions_solver_iterations")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_positions_solver_iterations(int value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    ((*local_this).set_positions_solver_iterations)((int)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_positions_solver_iterations(const BulletSoftBodyConfig self, int value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_556_comment =
  "C++ Interface:\n"
  "set_positions_solver_iterations(const BulletSoftBodyConfig self, int value)\n"
  "\n"
  "/**\n"
  " * Setter for property piterations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_556_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_velocities_solver_iterations(int value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_557(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_velocities_solver_iterations")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_velocities_solver_iterations(int value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    ((*local_this).set_velocities_solver_iterations)((int)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_velocities_solver_iterations(const BulletSoftBodyConfig self, int value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_557_comment =
  "C++ Interface:\n"
  "set_velocities_solver_iterations(const BulletSoftBodyConfig self, int value)\n"
  "\n"
  "/**\n"
  " * Setter for property viterations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_557_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_drift_solver_iterations(int value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_558(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_drift_solver_iterations")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_drift_solver_iterations(int value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    ((*local_this).set_drift_solver_iterations)((int)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_drift_solver_iterations(const BulletSoftBodyConfig self, int value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_558_comment =
  "C++ Interface:\n"
  "set_drift_solver_iterations(const BulletSoftBodyConfig self, int value)\n"
  "\n"
  "/**\n"
  " * Setter for property diterations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_558_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_cluster_solver_iterations(int value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_559(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_cluster_solver_iterations")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyConfig::set_cluster_solver_iterations(int value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    ((*local_this).set_cluster_solver_iterations)((int)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_cluster_solver_iterations(const BulletSoftBodyConfig self, int value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_559_comment =
  "C++ Interface:\n"
  "set_cluster_solver_iterations(const BulletSoftBodyConfig self, int value)\n"
  "\n"
  "/**\n"
  " * Setter for property citerations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_559_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_velocities_correction_factor(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_560(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_velocities_correction_factor(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_velocities_correction_factor)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_560_comment =
  "C++ Interface:\n"
  "get_velocities_correction_factor(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kVCF.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_560_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_damping_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_damping_coefficient_561(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_damping_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_damping_coefficient)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_damping_coefficient_561_comment =
  "C++ Interface:\n"
  "get_damping_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kDP.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_damping_coefficient_561_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_drag_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_drag_coefficient_562(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_drag_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_drag_coefficient)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_drag_coefficient_562_comment =
  "C++ Interface:\n"
  "get_drag_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kDG.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_drag_coefficient_562_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_lift_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_lift_coefficient_563(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_lift_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_lift_coefficient)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_lift_coefficient_563_comment =
  "C++ Interface:\n"
  "get_lift_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kLF.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_lift_coefficient_563_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_pressure_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_pressure_coefficient_564(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_pressure_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_pressure_coefficient)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_pressure_coefficient_564_comment =
  "C++ Interface:\n"
  "get_pressure_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kPR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_pressure_coefficient_564_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_volume_conservation_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_volume_conservation_coefficient_565(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_volume_conservation_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_volume_conservation_coefficient)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_volume_conservation_coefficient_565_comment =
  "C++ Interface:\n"
  "get_volume_conservation_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kVC.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_volume_conservation_coefficient_565_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_dynamic_friction_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_566(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_dynamic_friction_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_dynamic_friction_coefficient)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_566_comment =
  "C++ Interface:\n"
  "get_dynamic_friction_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kDF.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_566_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_pose_matching_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_567(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_pose_matching_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_pose_matching_coefficient)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_567_comment =
  "C++ Interface:\n"
  "get_pose_matching_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kMT.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_567_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_rigid_contacts_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_568(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_rigid_contacts_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_rigid_contacts_hardness)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_568_comment =
  "C++ Interface:\n"
  "get_rigid_contacts_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kCHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_568_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_kinetic_contacts_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_569(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_kinetic_contacts_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_kinetic_contacts_hardness)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_569_comment =
  "C++ Interface:\n"
  "get_kinetic_contacts_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kKHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_569_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_soft_contacts_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_570(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_contacts_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_contacts_hardness)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_570_comment =
  "C++ Interface:\n"
  "get_soft_contacts_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_570_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_anchors_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_anchors_hardness_571(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_anchors_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_anchors_hardness)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_anchors_hardness_571_comment =
  "C++ Interface:\n"
  "get_anchors_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kAHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_anchors_hardness_571_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_572(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_vs_rigid_hardness)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_572_comment =
  "C++ Interface:\n"
  "get_soft_vs_rigid_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSRHR_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_572_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_573(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_vs_kinetic_hardness)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_573_comment =
  "C++ Interface:\n"
  "get_soft_vs_kinetic_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSKHR_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_573_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_574(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_vs_soft_hardness)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_574_comment =
  "C++ Interface:\n"
  "get_soft_vs_soft_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSSHR_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_574_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_575(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_vs_rigid_impulse_split)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_575_comment =
  "C++ Interface:\n"
  "get_soft_vs_rigid_impulse_split(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSR_SPLT_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_575_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_576(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_vs_kinetic_impulse_split)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_576_comment =
  "C++ Interface:\n"
  "get_soft_vs_kinetic_impulse_split(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSK_SPLT_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_576_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_impulse_split(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_577(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_impulse_split(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_vs_soft_impulse_split)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_577_comment =
  "C++ Interface:\n"
  "get_soft_vs_soft_impulse_split(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSS_SPLT_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_577_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_maxvolume(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_maxvolume_578(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_maxvolume(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_maxvolume)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_maxvolume_578_comment =
  "C++ Interface:\n"
  "get_maxvolume(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property maxvolume.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_maxvolume_578_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyConfig::get_timescale(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_timescale_579(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyConfig::get_timescale(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_timescale)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_timescale_579_comment =
  "C++ Interface:\n"
  "get_timescale(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property timescale.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_timescale_579_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletSoftBodyConfig::get_positions_solver_iterations(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_580(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-int BulletSoftBodyConfig::get_positions_solver_iterations(void) const
  int return_value = ((*(const BulletSoftBodyConfig*)local_this).get_positions_solver_iterations)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_580_comment =
  "C++ Interface:\n"
  "get_positions_solver_iterations(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property piterations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_580_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletSoftBodyConfig::get_velocities_solver_iterations(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_581(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-int BulletSoftBodyConfig::get_velocities_solver_iterations(void) const
  int return_value = ((*(const BulletSoftBodyConfig*)local_this).get_velocities_solver_iterations)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_581_comment =
  "C++ Interface:\n"
  "get_velocities_solver_iterations(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property viterations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_581_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletSoftBodyConfig::get_drift_solver_iterations(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_582(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-int BulletSoftBodyConfig::get_drift_solver_iterations(void) const
  int return_value = ((*(const BulletSoftBodyConfig*)local_this).get_drift_solver_iterations)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_582_comment =
  "C++ Interface:\n"
  "get_drift_solver_iterations(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property diterations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_582_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletSoftBodyConfig::get_cluster_solver_iterations(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_583(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyConfig)) {
    return nullptr;
  }
  // 1-int BulletSoftBodyConfig::get_cluster_solver_iterations(void) const
  int return_value = ((*(const BulletSoftBodyConfig*)local_this).get_cluster_solver_iterations)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_583_comment =
  "C++ Interface:\n"
  "get_cluster_solver_iterations(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property citerations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_583_comment = nullptr;
#endif

static PyObject *Dtool_BulletSoftBodyConfig_aero_model_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-BulletSoftBodyConfig::AeroModel BulletSoftBodyConfig::get_aero_model(void) const
  BulletSoftBodyConfig::AeroModel return_value = ((*(const BulletSoftBodyConfig*)local_this).get_aero_model)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_aero_model_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.aero_model")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete aero_model attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_aero_model(BulletSoftBodyConfig::AeroModel value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      PyErr_Format(PyExc_OverflowError,
                   "value %ld out of range for signed integer",
                   arg_val);
      return -1;
    }
#endif
    ((*local_this).set_aero_model)((BulletSoftBodyConfig::AeroModel)arg_val);
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_aero_model(const BulletSoftBodyConfig self, int value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_velocities_correction_factor_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_velocities_correction_factor(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_velocities_correction_factor)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_velocities_correction_factor_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.velocities_correction_factor")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete velocities_correction_factor attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_velocities_correction_factor(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_velocities_correction_factor)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_velocities_correction_factor(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_damping_coefficient_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_damping_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_damping_coefficient)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_damping_coefficient_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.damping_coefficient")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete damping_coefficient attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_damping_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_damping_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_damping_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_drag_coefficient_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_drag_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_drag_coefficient)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_drag_coefficient_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.drag_coefficient")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete drag_coefficient attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_drag_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_drag_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_drag_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_lift_coefficient_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_lift_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_lift_coefficient)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_lift_coefficient_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.lift_coefficient")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete lift_coefficient attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_lift_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_lift_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_lift_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_pressure_coefficient_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_pressure_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_pressure_coefficient)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_pressure_coefficient_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.pressure_coefficient")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete pressure_coefficient attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_pressure_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_pressure_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_pressure_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_volume_conservation_coefficient_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_volume_conservation_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_volume_conservation_coefficient)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_volume_conservation_coefficient_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.volume_conservation_coefficient")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete volume_conservation_coefficient attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_volume_conservation_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_volume_conservation_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_volume_conservation_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_dynamic_friction_coefficient_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_dynamic_friction_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_dynamic_friction_coefficient)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_dynamic_friction_coefficient_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.dynamic_friction_coefficient")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete dynamic_friction_coefficient attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_dynamic_friction_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_dynamic_friction_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_dynamic_friction_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_pose_matching_coefficient_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_pose_matching_coefficient(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_pose_matching_coefficient)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_pose_matching_coefficient_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.pose_matching_coefficient")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete pose_matching_coefficient attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_pose_matching_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_pose_matching_coefficient)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_pose_matching_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_rigid_contacts_hardness_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_rigid_contacts_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_rigid_contacts_hardness)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_rigid_contacts_hardness_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.rigid_contacts_hardness")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete rigid_contacts_hardness attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_rigid_contacts_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_rigid_contacts_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_rigid_contacts_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_kinetic_contacts_hardness_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_kinetic_contacts_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_kinetic_contacts_hardness)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_kinetic_contacts_hardness_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.kinetic_contacts_hardness")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete kinetic_contacts_hardness attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_kinetic_contacts_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_kinetic_contacts_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_kinetic_contacts_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_soft_contacts_hardness_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_contacts_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_contacts_hardness)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_soft_contacts_hardness_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.soft_contacts_hardness")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete soft_contacts_hardness attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_soft_contacts_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_contacts_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_soft_contacts_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_anchors_hardness_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_anchors_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_anchors_hardness)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_anchors_hardness_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.anchors_hardness")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete anchors_hardness attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_anchors_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_anchors_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_anchors_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_soft_vs_rigid_hardness_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_vs_rigid_hardness)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_soft_vs_rigid_hardness_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.soft_vs_rigid_hardness")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete soft_vs_rigid_hardness attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_soft_vs_rigid_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_vs_rigid_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_soft_vs_rigid_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_soft_vs_kinetic_hardness_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_vs_kinetic_hardness)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_soft_vs_kinetic_hardness_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.soft_vs_kinetic_hardness")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete soft_vs_kinetic_hardness attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_soft_vs_kinetic_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_vs_kinetic_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_soft_vs_kinetic_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_soft_vs_soft_hardness_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_hardness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_vs_soft_hardness)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_soft_vs_soft_hardness_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.soft_vs_soft_hardness")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete soft_vs_soft_hardness attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_soft_vs_soft_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_vs_soft_hardness)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_soft_vs_soft_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_soft_vs_rigid_impulse_split_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_vs_rigid_impulse_split)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_soft_vs_rigid_impulse_split_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.soft_vs_rigid_impulse_split")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete soft_vs_rigid_impulse_split attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_vs_rigid_impulse_split)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_soft_vs_rigid_impulse_split(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_soft_vs_kinetic_impulse_split_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_vs_kinetic_impulse_split)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_soft_vs_kinetic_impulse_split_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.soft_vs_kinetic_impulse_split")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete soft_vs_kinetic_impulse_split attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_vs_kinetic_impulse_split)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_soft_vs_kinetic_impulse_split(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_soft_vs_soft_impulse_split_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_impulse_split(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_soft_vs_soft_impulse_split)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_soft_vs_soft_impulse_split_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.soft_vs_soft_impulse_split")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete soft_vs_soft_impulse_split attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_soft_vs_soft_impulse_split(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_soft_vs_soft_impulse_split)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_soft_vs_soft_impulse_split(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_maxvolume_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_maxvolume(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_maxvolume)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_maxvolume_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.maxvolume")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete maxvolume attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_maxvolume(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_maxvolume)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_maxvolume(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_timescale_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyConfig::get_timescale(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyConfig*)local_this).get_timescale)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_timescale_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.timescale")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete timescale attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_timescale(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_timescale)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_timescale(const BulletSoftBodyConfig self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_positions_solver_iterations_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletSoftBodyConfig::get_positions_solver_iterations(void) const
  int return_value = ((*(const BulletSoftBodyConfig*)local_this).get_positions_solver_iterations)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_positions_solver_iterations_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.positions_solver_iterations")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete positions_solver_iterations attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_positions_solver_iterations(int value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      PyErr_Format(PyExc_OverflowError,
                   "value %ld out of range for signed integer",
                   arg_val);
      return -1;
    }
#endif
    ((*local_this).set_positions_solver_iterations)((int)arg_val);
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_positions_solver_iterations(const BulletSoftBodyConfig self, int value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_velocities_solver_iterations_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletSoftBodyConfig::get_velocities_solver_iterations(void) const
  int return_value = ((*(const BulletSoftBodyConfig*)local_this).get_velocities_solver_iterations)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_velocities_solver_iterations_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.velocities_solver_iterations")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete velocities_solver_iterations attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_velocities_solver_iterations(int value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      PyErr_Format(PyExc_OverflowError,
                   "value %ld out of range for signed integer",
                   arg_val);
      return -1;
    }
#endif
    ((*local_this).set_velocities_solver_iterations)((int)arg_val);
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_velocities_solver_iterations(const BulletSoftBodyConfig self, int value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_drift_solver_iterations_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletSoftBodyConfig::get_drift_solver_iterations(void) const
  int return_value = ((*(const BulletSoftBodyConfig*)local_this).get_drift_solver_iterations)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_drift_solver_iterations_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.drift_solver_iterations")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete drift_solver_iterations attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_drift_solver_iterations(int value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      PyErr_Format(PyExc_OverflowError,
                   "value %ld out of range for signed integer",
                   arg_val);
      return -1;
    }
#endif
    ((*local_this).set_drift_solver_iterations)((int)arg_val);
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_drift_solver_iterations(const BulletSoftBodyConfig self, int value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyConfig_cluster_solver_iterations_Getter(PyObject *self, void *) {
  const BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletSoftBodyConfig::get_cluster_solver_iterations(void) const
  int return_value = ((*(const BulletSoftBodyConfig*)local_this).get_cluster_solver_iterations)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyConfig_cluster_solver_iterations_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyConfig *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.cluster_solver_iterations")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete cluster_solver_iterations attribute");
    return -1;
  }
  // 1-void BulletSoftBodyConfig::set_cluster_solver_iterations(int value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      PyErr_Format(PyExc_OverflowError,
                   "value %ld out of range for signed integer",
                   arg_val);
      return -1;
    }
#endif
    ((*local_this).set_cluster_solver_iterations)((int)arg_val);
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_cluster_solver_iterations(const BulletSoftBodyConfig self, int value)\n");
  }
  return -1;
}

/**
 * Python function wrapper for:
 * inline BulletSoftBodyConfig::BulletSoftBodyConfig(BulletSoftBodyConfig const &) = default
 */
static int Dtool_Init_BulletSoftBodyConfig(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletSoftBodyConfig() takes no keyword arguments");
    return -1;
#endif
  }
  // 1-inline BulletSoftBodyConfig::BulletSoftBodyConfig(BulletSoftBodyConfig const &) = default
  PyObject *param0;
  if (PyTuple_GET_SIZE(args) == 1) {
    param0 = PyTuple_GET_ITEM(args, 0);
    BulletSoftBodyConfig const *param0_this = (BulletSoftBodyConfig *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyConfig, 0, "BulletSoftBodyConfig.BulletSoftBodyConfig", true, true);
    if (param0_this != nullptr) {
      BulletSoftBodyConfig *return_value = new BulletSoftBodyConfig(*param0_this);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSoftBodyConfig, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSoftBodyConfig(const BulletSoftBodyConfig param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletSoftBodyConfig(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletSoftBodyConfig) {
    printf("BulletSoftBodyConfig ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletSoftBodyConfig *local_this = (BulletSoftBodyConfig *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletSoftBodyConfig) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletSoftBodyConfig(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyConfig) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletSoftBodyWorldInfo
 */
/**
 * Python function wrapper for:
 * void BulletSoftBodyWorldInfo::set_air_density(PN_stdfloat density)
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_set_air_density_613(PyObject *self, PyObject *arg) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.set_air_density")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyWorldInfo::set_air_density(PN_stdfloat density)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_air_density)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_air_density(const BulletSoftBodyWorldInfo self, float density)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_set_air_density_613_comment =
  "C++ Interface:\n"
  "set_air_density(const BulletSoftBodyWorldInfo self, float density)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_set_air_density_613_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyWorldInfo::set_water_density(PN_stdfloat density)
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_set_water_density_614(PyObject *self, PyObject *arg) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.set_water_density")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyWorldInfo::set_water_density(PN_stdfloat density)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_water_density)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_water_density(const BulletSoftBodyWorldInfo self, float density)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_set_water_density_614_comment =
  "C++ Interface:\n"
  "set_water_density(const BulletSoftBodyWorldInfo self, float density)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_set_water_density_614_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyWorldInfo::set_water_offset(PN_stdfloat offset)
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_set_water_offset_615(PyObject *self, PyObject *arg) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.set_water_offset")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyWorldInfo::set_water_offset(PN_stdfloat offset)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_water_offset)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_water_offset(const BulletSoftBodyWorldInfo self, float offset)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_set_water_offset_615_comment =
  "C++ Interface:\n"
  "set_water_offset(const BulletSoftBodyWorldInfo self, float offset)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_set_water_offset_615_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyWorldInfo::set_water_normal(LVector3 const &normal)
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_set_water_normal_616(PyObject *self, PyObject *arg) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.set_water_normal")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyWorldInfo::set_water_normal(LVector3 const &normal)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyWorldInfo.set_water_normal", "LVector3f");
  }
  ((*local_this).set_water_normal)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_water_normal(const BulletSoftBodyWorldInfo self, const LVector3f normal)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_set_water_normal_616_comment =
  "C++ Interface:\n"
  "set_water_normal(const BulletSoftBodyWorldInfo self, const LVector3f normal)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_set_water_normal_616_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyWorldInfo::set_gravity(LVector3 const &gravity)
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_set_gravity_617(PyObject *self, PyObject *arg) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.set_gravity")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyWorldInfo::set_gravity(LVector3 const &gravity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyWorldInfo.set_gravity", "LVector3f");
  }
  ((*local_this).set_gravity)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_gravity(const BulletSoftBodyWorldInfo self, const LVector3f gravity)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_set_gravity_617_comment =
  "C++ Interface:\n"
  "set_gravity(const BulletSoftBodyWorldInfo self, const LVector3f gravity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_set_gravity_617_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyWorldInfo::get_air_density(void) const
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_get_air_density_618(PyObject *self, PyObject *) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyWorldInfo)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyWorldInfo::get_air_density(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyWorldInfo*)local_this).get_air_density)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_get_air_density_618_comment =
  "C++ Interface:\n"
  "get_air_density(BulletSoftBodyWorldInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_get_air_density_618_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyWorldInfo::get_water_density(void) const
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_get_water_density_619(PyObject *self, PyObject *) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyWorldInfo)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyWorldInfo::get_water_density(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyWorldInfo*)local_this).get_water_density)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_get_water_density_619_comment =
  "C++ Interface:\n"
  "get_water_density(BulletSoftBodyWorldInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_get_water_density_619_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyWorldInfo::get_water_offset(void) const
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_get_water_offset_620(PyObject *self, PyObject *) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyWorldInfo)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyWorldInfo::get_water_offset(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyWorldInfo*)local_this).get_water_offset)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_get_water_offset_620_comment =
  "C++ Interface:\n"
  "get_water_offset(BulletSoftBodyWorldInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_get_water_offset_620_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletSoftBodyWorldInfo::get_water_normal(void) const
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_get_water_normal_621(PyObject *self, PyObject *) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyWorldInfo)) {
    return nullptr;
  }
  // 1-LVector3 BulletSoftBodyWorldInfo::get_water_normal(void) const
  LVector3 *return_value = new LVector3(((*(const BulletSoftBodyWorldInfo*)local_this).get_water_normal)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_get_water_normal_621_comment =
  "C++ Interface:\n"
  "get_water_normal(BulletSoftBodyWorldInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_get_water_normal_621_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletSoftBodyWorldInfo::get_gravity(void) const
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_get_gravity_622(PyObject *self, PyObject *) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyWorldInfo)) {
    return nullptr;
  }
  // 1-LVector3 BulletSoftBodyWorldInfo::get_gravity(void) const
  LVector3 *return_value = new LVector3(((*(const BulletSoftBodyWorldInfo*)local_this).get_gravity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_get_gravity_622_comment =
  "C++ Interface:\n"
  "get_gravity(BulletSoftBodyWorldInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_get_gravity_622_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyWorldInfo::garbage_collect(int lifetime = 256)
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_garbage_collect_623(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.garbage_collect")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyWorldInfo::garbage_collect(int lifetime = 256)
  int param1 = 256;
  static const char *keyword_list[] = {"lifetime", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "|i:garbage_collect", (char **)keyword_list, &param1)) {
    ((*local_this).garbage_collect)((int)param1);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "garbage_collect(const BulletSoftBodyWorldInfo self, int lifetime)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_garbage_collect_623_comment =
  "C++ Interface:\n"
  "garbage_collect(const BulletSoftBodyWorldInfo self, int lifetime)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_garbage_collect_623_comment = nullptr;
#endif

static PyObject *Dtool_BulletSoftBodyWorldInfo_air_density_Getter(PyObject *self, void *) {
  const BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyWorldInfo::get_air_density(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyWorldInfo*)local_this).get_air_density)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyWorldInfo_air_density_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.air_density")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete air_density attribute");
    return -1;
  }
  // 1-void BulletSoftBodyWorldInfo::set_air_density(PN_stdfloat density)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_air_density)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_air_density(const BulletSoftBodyWorldInfo self, float density)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyWorldInfo_water_density_Getter(PyObject *self, void *) {
  const BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyWorldInfo::get_water_density(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyWorldInfo*)local_this).get_water_density)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyWorldInfo_water_density_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.water_density")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete water_density attribute");
    return -1;
  }
  // 1-void BulletSoftBodyWorldInfo::set_water_density(PN_stdfloat density)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_water_density)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_water_density(const BulletSoftBodyWorldInfo self, float density)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyWorldInfo_water_offset_Getter(PyObject *self, void *) {
  const BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyWorldInfo::get_water_offset(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyWorldInfo*)local_this).get_water_offset)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyWorldInfo_water_offset_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.water_offset")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete water_offset attribute");
    return -1;
  }
  // 1-void BulletSoftBodyWorldInfo::set_water_offset(PN_stdfloat offset)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_water_offset)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_water_offset(const BulletSoftBodyWorldInfo self, float offset)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyWorldInfo_water_normal_Getter(PyObject *self, void *) {
  const BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletSoftBodyWorldInfo::get_water_normal(void) const
  LVector3 *return_value = new LVector3(((*(const BulletSoftBodyWorldInfo*)local_this).get_water_normal)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static int Dtool_BulletSoftBodyWorldInfo_water_normal_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.water_normal")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete water_normal attribute");
    return -1;
  }
  // 1-void BulletSoftBodyWorldInfo::set_water_normal(LVector3 const &normal)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyWorldInfo.set_water_normal", "LVector3f");
    return -1;
  }
  ((*local_this).set_water_normal)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_water_normal(const BulletSoftBodyWorldInfo self, const LVector3f normal)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyWorldInfo_gravity_Getter(PyObject *self, void *) {
  const BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletSoftBodyWorldInfo::get_gravity(void) const
  LVector3 *return_value = new LVector3(((*(const BulletSoftBodyWorldInfo*)local_this).get_gravity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static int Dtool_BulletSoftBodyWorldInfo_gravity_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyWorldInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.gravity")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete gravity attribute");
    return -1;
  }
  // 1-void BulletSoftBodyWorldInfo::set_gravity(LVector3 const &gravity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyWorldInfo.set_gravity", "LVector3f");
    return -1;
  }
  ((*local_this).set_gravity)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_gravity(const BulletSoftBodyWorldInfo self, const LVector3f gravity)\n");
  }
  return -1;
}

/**
 * Python function wrapper for:
 * inline BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo(BulletSoftBodyWorldInfo const &) = default
 */
static int Dtool_Init_BulletSoftBodyWorldInfo(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletSoftBodyWorldInfo() takes no keyword arguments");
    return -1;
#endif
  }
  // 1-inline BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo(BulletSoftBodyWorldInfo const &) = default
  PyObject *param0;
  if (PyTuple_GET_SIZE(args) == 1) {
    param0 = PyTuple_GET_ITEM(args, 0);
    BulletSoftBodyWorldInfo const *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyWorldInfo.BulletSoftBodyWorldInfo", true, true);
    if (param0_this != nullptr) {
      BulletSoftBodyWorldInfo *return_value = new BulletSoftBodyWorldInfo(*param0_this);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSoftBodyWorldInfo, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSoftBodyWorldInfo(const BulletSoftBodyWorldInfo param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletSoftBodyWorldInfo(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletSoftBodyWorldInfo) {
    printf("BulletSoftBodyWorldInfo ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletSoftBodyWorldInfo *local_this = (BulletSoftBodyWorldInfo *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletSoftBodyWorldInfo) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletSoftBodyWorldInfo(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyWorldInfo) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletSoftBodyMaterial
 */
/**
 * Python function wrapper for:
 * static inline BulletSoftBodyMaterial BulletSoftBodyMaterial::empty(void)
 */
static PyObject *Dtool_BulletSoftBodyMaterial_empty_637(PyObject *, PyObject *) {
  // 1-static inline BulletSoftBodyMaterial BulletSoftBodyMaterial::empty(void)
  BulletSoftBodyMaterial *return_value = new BulletSoftBodyMaterial((BulletSoftBodyMaterial::empty)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyMaterial, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_empty_637_comment =
  "C++ Interface:\n"
  "empty()\n"
  "\n"
  "/**\n"
  " * Named constructor intended to be used for asserts which have to return a\n"
  " * concrete value.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_empty_637_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyMaterial::get_linear_stiffness(void) const
 */
static PyObject *Dtool_BulletSoftBodyMaterial_get_linear_stiffness_638(PyObject *self, PyObject *) {
  BulletSoftBodyMaterial *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyMaterial)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyMaterial::get_linear_stiffness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyMaterial*)local_this).get_linear_stiffness)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_get_linear_stiffness_638_comment =
  "C++ Interface:\n"
  "get_linear_stiffness(BulletSoftBodyMaterial self)\n"
  "\n"
  "/**\n"
  " * Getter for the property m_kLST.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_get_linear_stiffness_638_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyMaterial::set_linear_stiffness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyMaterial_set_linear_stiffness_639(PyObject *self, PyObject *arg) {
  BulletSoftBodyMaterial *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this, "BulletSoftBodyMaterial.set_linear_stiffness")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyMaterial::set_linear_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_linear_stiffness)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_stiffness(const BulletSoftBodyMaterial self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_set_linear_stiffness_639_comment =
  "C++ Interface:\n"
  "set_linear_stiffness(const BulletSoftBodyMaterial self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for the property m_kLST.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_set_linear_stiffness_639_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyMaterial::get_angular_stiffness(void) const
 */
static PyObject *Dtool_BulletSoftBodyMaterial_get_angular_stiffness_640(PyObject *self, PyObject *) {
  BulletSoftBodyMaterial *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyMaterial)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyMaterial::get_angular_stiffness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyMaterial*)local_this).get_angular_stiffness)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_get_angular_stiffness_640_comment =
  "C++ Interface:\n"
  "get_angular_stiffness(BulletSoftBodyMaterial self)\n"
  "\n"
  "/**\n"
  " * Getter for the property m_kAST.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_get_angular_stiffness_640_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyMaterial::set_angular_stiffness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyMaterial_set_angular_stiffness_641(PyObject *self, PyObject *arg) {
  BulletSoftBodyMaterial *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this, "BulletSoftBodyMaterial.set_angular_stiffness")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyMaterial::set_angular_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_angular_stiffness)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_stiffness(const BulletSoftBodyMaterial self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_set_angular_stiffness_641_comment =
  "C++ Interface:\n"
  "set_angular_stiffness(const BulletSoftBodyMaterial self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for the property m_kAST.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_set_angular_stiffness_641_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyMaterial::get_volume_preservation(void) const
 */
static PyObject *Dtool_BulletSoftBodyMaterial_get_volume_preservation_642(PyObject *self, PyObject *) {
  BulletSoftBodyMaterial *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyMaterial)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSoftBodyMaterial::get_volume_preservation(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyMaterial*)local_this).get_volume_preservation)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_get_volume_preservation_642_comment =
  "C++ Interface:\n"
  "get_volume_preservation(BulletSoftBodyMaterial self)\n"
  "\n"
  "/**\n"
  " * Getter for the property m_kVST.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_get_volume_preservation_642_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyMaterial::set_volume_preservation(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyMaterial_set_volume_preservation_643(PyObject *self, PyObject *arg) {
  BulletSoftBodyMaterial *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this, "BulletSoftBodyMaterial.set_volume_preservation")) {
    return nullptr;
  }
  // 1-void BulletSoftBodyMaterial::set_volume_preservation(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_volume_preservation)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_volume_preservation(const BulletSoftBodyMaterial self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_set_volume_preservation_643_comment =
  "C++ Interface:\n"
  "set_volume_preservation(const BulletSoftBodyMaterial self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for the property m_kVST.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_set_volume_preservation_643_comment = nullptr;
#endif

static PyObject *Dtool_BulletSoftBodyMaterial_linear_stiffness_Getter(PyObject *self, void *) {
  const BulletSoftBodyMaterial *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyMaterial::get_linear_stiffness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyMaterial*)local_this).get_linear_stiffness)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyMaterial_linear_stiffness_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyMaterial *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this, "BulletSoftBodyMaterial.linear_stiffness")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete linear_stiffness attribute");
    return -1;
  }
  // 1-void BulletSoftBodyMaterial::set_linear_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_linear_stiffness)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_linear_stiffness(const BulletSoftBodyMaterial self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyMaterial_angular_stiffness_Getter(PyObject *self, void *) {
  const BulletSoftBodyMaterial *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyMaterial::get_angular_stiffness(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyMaterial*)local_this).get_angular_stiffness)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyMaterial_angular_stiffness_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyMaterial *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this, "BulletSoftBodyMaterial.angular_stiffness")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete angular_stiffness attribute");
    return -1;
  }
  // 1-void BulletSoftBodyMaterial::set_angular_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_angular_stiffness)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_angular_stiffness(const BulletSoftBodyMaterial self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyMaterial_volume_preservation_Getter(PyObject *self, void *) {
  const BulletSoftBodyMaterial *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSoftBodyMaterial::get_volume_preservation(void) const
  PN_stdfloat return_value = ((*(const BulletSoftBodyMaterial*)local_this).get_volume_preservation)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyMaterial_volume_preservation_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyMaterial *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this, "BulletSoftBodyMaterial.volume_preservation")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete volume_preservation attribute");
    return -1;
  }
  // 1-void BulletSoftBodyMaterial::set_volume_preservation(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_volume_preservation)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_volume_preservation(const BulletSoftBodyMaterial self, float value)\n");
  }
  return -1;
}

/**
 * Python function wrapper for:
 * inline BulletSoftBodyMaterial::BulletSoftBodyMaterial(BulletSoftBodyMaterial const &) = default
 */
static int Dtool_Init_BulletSoftBodyMaterial(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletSoftBodyMaterial() takes no keyword arguments");
    return -1;
#endif
  }
  // 1-inline BulletSoftBodyMaterial::BulletSoftBodyMaterial(BulletSoftBodyMaterial const &) = default
  PyObject *param0;
  if (PyTuple_GET_SIZE(args) == 1) {
    param0 = PyTuple_GET_ITEM(args, 0);
    BulletSoftBodyMaterial const *param0_this = (BulletSoftBodyMaterial *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyMaterial, 0, "BulletSoftBodyMaterial.BulletSoftBodyMaterial", true, true);
    if (param0_this != nullptr) {
      BulletSoftBodyMaterial *return_value = new BulletSoftBodyMaterial(*param0_this);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSoftBodyMaterial, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSoftBodyMaterial(const BulletSoftBodyMaterial param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletSoftBodyMaterial(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletSoftBodyMaterial) {
    printf("BulletSoftBodyMaterial ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletSoftBodyMaterial *local_this = (BulletSoftBodyMaterial *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletSoftBodyMaterial) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletSoftBodyMaterial(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyMaterial) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletVehicleTuning
 */
/**
 * Python function wrapper for:
 * void BulletVehicleTuning::set_suspension_stiffness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletVehicleTuning_set_suspension_stiffness_651(PyObject *self, PyObject *arg) {
  BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.set_suspension_stiffness")) {
    return nullptr;
  }
  // 1-void BulletVehicleTuning::set_suspension_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_suspension_stiffness)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_suspension_stiffness(const BulletVehicleTuning self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_set_suspension_stiffness_651_comment =
  "C++ Interface:\n"
  "set_suspension_stiffness(const BulletVehicleTuning self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_set_suspension_stiffness_651_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicleTuning::set_suspension_compression(PN_stdfloat value)
 */
static PyObject *Dtool_BulletVehicleTuning_set_suspension_compression_652(PyObject *self, PyObject *arg) {
  BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.set_suspension_compression")) {
    return nullptr;
  }
  // 1-void BulletVehicleTuning::set_suspension_compression(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_suspension_compression)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_suspension_compression(const BulletVehicleTuning self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_set_suspension_compression_652_comment =
  "C++ Interface:\n"
  "set_suspension_compression(const BulletVehicleTuning self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_set_suspension_compression_652_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicleTuning::set_suspension_damping(PN_stdfloat value)
 */
static PyObject *Dtool_BulletVehicleTuning_set_suspension_damping_653(PyObject *self, PyObject *arg) {
  BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.set_suspension_damping")) {
    return nullptr;
  }
  // 1-void BulletVehicleTuning::set_suspension_damping(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_suspension_damping)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_suspension_damping(const BulletVehicleTuning self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_set_suspension_damping_653_comment =
  "C++ Interface:\n"
  "set_suspension_damping(const BulletVehicleTuning self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_set_suspension_damping_653_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicleTuning::set_max_suspension_travel_cm(PN_stdfloat value)
 */
static PyObject *Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_654(PyObject *self, PyObject *arg) {
  BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.set_max_suspension_travel_cm")) {
    return nullptr;
  }
  // 1-void BulletVehicleTuning::set_max_suspension_travel_cm(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_suspension_travel_cm)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_suspension_travel_cm(const BulletVehicleTuning self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_654_comment =
  "C++ Interface:\n"
  "set_max_suspension_travel_cm(const BulletVehicleTuning self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_654_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicleTuning::set_friction_slip(PN_stdfloat value)
 */
static PyObject *Dtool_BulletVehicleTuning_set_friction_slip_655(PyObject *self, PyObject *arg) {
  BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.set_friction_slip")) {
    return nullptr;
  }
  // 1-void BulletVehicleTuning::set_friction_slip(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_friction_slip)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_friction_slip(const BulletVehicleTuning self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_set_friction_slip_655_comment =
  "C++ Interface:\n"
  "set_friction_slip(const BulletVehicleTuning self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_set_friction_slip_655_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicleTuning::set_max_suspension_force(PN_stdfloat value)
 */
static PyObject *Dtool_BulletVehicleTuning_set_max_suspension_force_656(PyObject *self, PyObject *arg) {
  BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.set_max_suspension_force")) {
    return nullptr;
  }
  // 1-void BulletVehicleTuning::set_max_suspension_force(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_suspension_force)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_suspension_force(const BulletVehicleTuning self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_set_max_suspension_force_656_comment =
  "C++ Interface:\n"
  "set_max_suspension_force(const BulletVehicleTuning self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_set_max_suspension_force_656_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletVehicleTuning::get_suspension_stiffness(void) const
 */
static PyObject *Dtool_BulletVehicleTuning_get_suspension_stiffness_657(PyObject *self, PyObject *) {
  BulletVehicleTuning *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletVehicleTuning)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletVehicleTuning::get_suspension_stiffness(void) const
  PN_stdfloat return_value = ((*(const BulletVehicleTuning*)local_this).get_suspension_stiffness)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_get_suspension_stiffness_657_comment =
  "C++ Interface:\n"
  "get_suspension_stiffness(BulletVehicleTuning self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_get_suspension_stiffness_657_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletVehicleTuning::get_suspension_compression(void) const
 */
static PyObject *Dtool_BulletVehicleTuning_get_suspension_compression_658(PyObject *self, PyObject *) {
  BulletVehicleTuning *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletVehicleTuning)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletVehicleTuning::get_suspension_compression(void) const
  PN_stdfloat return_value = ((*(const BulletVehicleTuning*)local_this).get_suspension_compression)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_get_suspension_compression_658_comment =
  "C++ Interface:\n"
  "get_suspension_compression(BulletVehicleTuning self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_get_suspension_compression_658_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletVehicleTuning::get_suspension_damping(void) const
 */
static PyObject *Dtool_BulletVehicleTuning_get_suspension_damping_659(PyObject *self, PyObject *) {
  BulletVehicleTuning *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletVehicleTuning)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletVehicleTuning::get_suspension_damping(void) const
  PN_stdfloat return_value = ((*(const BulletVehicleTuning*)local_this).get_suspension_damping)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_get_suspension_damping_659_comment =
  "C++ Interface:\n"
  "get_suspension_damping(BulletVehicleTuning self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_get_suspension_damping_659_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletVehicleTuning::get_max_suspension_travel_cm(void) const
 */
static PyObject *Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_660(PyObject *self, PyObject *) {
  BulletVehicleTuning *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletVehicleTuning)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletVehicleTuning::get_max_suspension_travel_cm(void) const
  PN_stdfloat return_value = ((*(const BulletVehicleTuning*)local_this).get_max_suspension_travel_cm)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_660_comment =
  "C++ Interface:\n"
  "get_max_suspension_travel_cm(BulletVehicleTuning self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_660_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletVehicleTuning::get_friction_slip(void) const
 */
static PyObject *Dtool_BulletVehicleTuning_get_friction_slip_661(PyObject *self, PyObject *) {
  BulletVehicleTuning *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletVehicleTuning)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletVehicleTuning::get_friction_slip(void) const
  PN_stdfloat return_value = ((*(const BulletVehicleTuning*)local_this).get_friction_slip)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_get_friction_slip_661_comment =
  "C++ Interface:\n"
  "get_friction_slip(BulletVehicleTuning self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_get_friction_slip_661_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletVehicleTuning::get_max_suspension_force(void) const
 */
static PyObject *Dtool_BulletVehicleTuning_get_max_suspension_force_662(PyObject *self, PyObject *) {
  BulletVehicleTuning *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletVehicleTuning)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletVehicleTuning::get_max_suspension_force(void) const
  PN_stdfloat return_value = ((*(const BulletVehicleTuning*)local_this).get_max_suspension_force)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_get_max_suspension_force_662_comment =
  "C++ Interface:\n"
  "get_max_suspension_force(BulletVehicleTuning self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_get_max_suspension_force_662_comment = nullptr;
#endif

static PyObject *Dtool_BulletVehicleTuning_suspension_stiffness_Getter(PyObject *self, void *) {
  const BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicleTuning, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletVehicleTuning::get_suspension_stiffness(void) const
  PN_stdfloat return_value = ((*(const BulletVehicleTuning*)local_this).get_suspension_stiffness)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletVehicleTuning_suspension_stiffness_Setter(PyObject *self, PyObject *arg, void *) {
  BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.suspension_stiffness")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete suspension_stiffness attribute");
    return -1;
  }
  // 1-void BulletVehicleTuning::set_suspension_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_suspension_stiffness)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_suspension_stiffness(const BulletVehicleTuning self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletVehicleTuning_suspension_compression_Getter(PyObject *self, void *) {
  const BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicleTuning, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletVehicleTuning::get_suspension_compression(void) const
  PN_stdfloat return_value = ((*(const BulletVehicleTuning*)local_this).get_suspension_compression)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletVehicleTuning_suspension_compression_Setter(PyObject *self, PyObject *arg, void *) {
  BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.suspension_compression")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete suspension_compression attribute");
    return -1;
  }
  // 1-void BulletVehicleTuning::set_suspension_compression(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_suspension_compression)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_suspension_compression(const BulletVehicleTuning self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletVehicleTuning_suspension_damping_Getter(PyObject *self, void *) {
  const BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicleTuning, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletVehicleTuning::get_suspension_damping(void) const
  PN_stdfloat return_value = ((*(const BulletVehicleTuning*)local_this).get_suspension_damping)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletVehicleTuning_suspension_damping_Setter(PyObject *self, PyObject *arg, void *) {
  BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.suspension_damping")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete suspension_damping attribute");
    return -1;
  }
  // 1-void BulletVehicleTuning::set_suspension_damping(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_suspension_damping)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_suspension_damping(const BulletVehicleTuning self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletVehicleTuning_max_suspension_travel_cm_Getter(PyObject *self, void *) {
  const BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicleTuning, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletVehicleTuning::get_max_suspension_travel_cm(void) const
  PN_stdfloat return_value = ((*(const BulletVehicleTuning*)local_this).get_max_suspension_travel_cm)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletVehicleTuning_max_suspension_travel_cm_Setter(PyObject *self, PyObject *arg, void *) {
  BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.max_suspension_travel_cm")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete max_suspension_travel_cm attribute");
    return -1;
  }
  // 1-void BulletVehicleTuning::set_max_suspension_travel_cm(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_suspension_travel_cm)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_max_suspension_travel_cm(const BulletVehicleTuning self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletVehicleTuning_friction_slip_Getter(PyObject *self, void *) {
  const BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicleTuning, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletVehicleTuning::get_friction_slip(void) const
  PN_stdfloat return_value = ((*(const BulletVehicleTuning*)local_this).get_friction_slip)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletVehicleTuning_friction_slip_Setter(PyObject *self, PyObject *arg, void *) {
  BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.friction_slip")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete friction_slip attribute");
    return -1;
  }
  // 1-void BulletVehicleTuning::set_friction_slip(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_friction_slip)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_friction_slip(const BulletVehicleTuning self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletVehicleTuning_max_suspension_force_Getter(PyObject *self, void *) {
  const BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicleTuning, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletVehicleTuning::get_max_suspension_force(void) const
  PN_stdfloat return_value = ((*(const BulletVehicleTuning*)local_this).get_max_suspension_force)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletVehicleTuning_max_suspension_force_Setter(PyObject *self, PyObject *arg, void *) {
  BulletVehicleTuning *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.max_suspension_force")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete max_suspension_force attribute");
    return -1;
  }
  // 1-void BulletVehicleTuning::set_max_suspension_force(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_suspension_force)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_max_suspension_force(const BulletVehicleTuning self, float value)\n");
  }
  return -1;
}

static int Dtool_Init_BulletVehicleTuning(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletVehicleTuning(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletVehicleTuning) {
    printf("BulletVehicleTuning ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletVehicleTuning *local_this = (BulletVehicleTuning *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletVehicleTuning) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletVehicleTuning(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletVehicleTuning) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletVehicle
 */
/**
 * Python function wrapper for:
 * void BulletVehicle::set_coordinate_system(BulletUpAxis up)
 */
static PyObject *Dtool_BulletVehicle_set_coordinate_system_671(PyObject *self, PyObject *arg) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.set_coordinate_system")) {
    return nullptr;
  }
  // 1-void BulletVehicle::set_coordinate_system(BulletUpAxis up)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    ((*local_this).set_coordinate_system)((BulletUpAxis)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_coordinate_system(const BulletVehicle self, int up)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_set_coordinate_system_671_comment =
  "C++ Interface:\n"
  "set_coordinate_system(const BulletVehicle self, int up)\n"
  "\n"
  "/**\n"
  " * Specifies which axis is \"up\". Nessecary for the vehicle's suspension to\n"
  " * work properly!\n"
  " */";
#else
static const char *Dtool_BulletVehicle_set_coordinate_system_671_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicle::set_steering_value(PN_stdfloat steering, int idx)
 */
static PyObject *Dtool_BulletVehicle_set_steering_value_672(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.set_steering_value")) {
    return nullptr;
  }
  // 1-void BulletVehicle::set_steering_value(PN_stdfloat steering, int idx)
  float param1;
  int param2;
  static const char *keyword_list[] = {"steering", "idx", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "fi:set_steering_value", (char **)keyword_list, &param1, &param2)) {
    ((*local_this).set_steering_value)((PN_stdfloat)param1, (int)param2);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_steering_value(const BulletVehicle self, float steering, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_set_steering_value_672_comment =
  "C++ Interface:\n"
  "set_steering_value(const BulletVehicle self, float steering, int idx)\n"
  "\n"
  "/**\n"
  " * Sets the steering value (in degrees) of the wheel with index idx.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_set_steering_value_672_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicle::set_brake(PN_stdfloat brake, int idx)
 */
static PyObject *Dtool_BulletVehicle_set_brake_673(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.set_brake")) {
    return nullptr;
  }
  // 1-void BulletVehicle::set_brake(PN_stdfloat brake, int idx)
  float param1;
  int param2;
  static const char *keyword_list[] = {"brake", "idx", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "fi:set_brake", (char **)keyword_list, &param1, &param2)) {
    ((*local_this).set_brake)((PN_stdfloat)param1, (int)param2);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_brake(const BulletVehicle self, float brake, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_set_brake_673_comment =
  "C++ Interface:\n"
  "set_brake(const BulletVehicle self, float brake, int idx)\n"
  "\n"
  "/**\n"
  " * Applies braking force to the wheel with index idx.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_set_brake_673_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicle::set_pitch_control(PN_stdfloat pitch)
 */
static PyObject *Dtool_BulletVehicle_set_pitch_control_674(PyObject *self, PyObject *arg) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.set_pitch_control")) {
    return nullptr;
  }
  // 1-void BulletVehicle::set_pitch_control(PN_stdfloat pitch)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_pitch_control)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_pitch_control(const BulletVehicle self, float pitch)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_set_pitch_control_674_comment =
  "C++ Interface:\n"
  "set_pitch_control(const BulletVehicle self, float pitch)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicle_set_pitch_control_674_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletRigidBodyNode *BulletVehicle::get_chassis(void)
 */
static PyObject *Dtool_BulletVehicle_get_chassis_675(PyObject *self, PyObject *) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.get_chassis")) {
    return nullptr;
  }
  // 1-BulletRigidBodyNode *BulletVehicle::get_chassis(void)
  BulletRigidBodyNode *return_value = ((*local_this).get_chassis)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletRigidBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_chassis_675_comment =
  "C++ Interface:\n"
  "get_chassis(const BulletVehicle self)\n"
  "\n"
  "/**\n"
  " * Returns the chassis of this vehicle.  The chassis is a rigid body node.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_chassis_675_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletVehicle::get_current_speed_km_hour(void) const
 */
static PyObject *Dtool_BulletVehicle_get_current_speed_km_hour_676(PyObject *self, PyObject *) {
  BulletVehicle *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletVehicle)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletVehicle::get_current_speed_km_hour(void) const
  PN_stdfloat return_value = ((*(const BulletVehicle*)local_this).get_current_speed_km_hour)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_current_speed_km_hour_676_comment =
  "C++ Interface:\n"
  "get_current_speed_km_hour(BulletVehicle self)\n"
  "\n"
  "/**\n"
  " * Returns the current speed in kilometers per hour.  Convert to miles using:\n"
  " * km/h * 0.62 = mph\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_current_speed_km_hour_676_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletVehicle::get_steering_value(int idx) const
 */
static PyObject *Dtool_BulletVehicle_get_steering_value_677(PyObject *self, PyObject *arg) {
  BulletVehicle *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletVehicle)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletVehicle::get_steering_value(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    PN_stdfloat return_value = ((*(const BulletVehicle*)local_this).get_steering_value)((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return nullptr;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_steering_value(BulletVehicle self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_steering_value_677_comment =
  "C++ Interface:\n"
  "get_steering_value(BulletVehicle self, int idx)\n"
  "\n"
  "/**\n"
  " * Returns the steering angle of the wheel with index idx in degrees.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_steering_value_677_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletVehicle::get_forward_vector(void) const
 */
static PyObject *Dtool_BulletVehicle_get_forward_vector_678(PyObject *self, PyObject *) {
  BulletVehicle *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletVehicle)) {
    return nullptr;
  }
  // 1-LVector3 BulletVehicle::get_forward_vector(void) const
  LVector3 *return_value = new LVector3(((*(const BulletVehicle*)local_this).get_forward_vector)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_forward_vector_678_comment =
  "C++ Interface:\n"
  "get_forward_vector(BulletVehicle self)\n"
  "\n"
  "/**\n"
  " * Returns the forward vector representing the car's actual direction of\n"
  " * movement.  The forward vetcor is given in global coordinates.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_forward_vector_678_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicle::reset_suspension(void)
 */
static PyObject *Dtool_BulletVehicle_reset_suspension_679(PyObject *self, PyObject *) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.reset_suspension")) {
    return nullptr;
  }
  // 1-void BulletVehicle::reset_suspension(void)
  ((*local_this).reset_suspension)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_reset_suspension_679_comment =
  "C++ Interface:\n"
  "reset_suspension(const BulletVehicle self)\n"
  "\n"
  "/**\n"
  " * Resets the vehicle's suspension.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_reset_suspension_679_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicle::apply_engine_force(PN_stdfloat force, int idx)
 */
static PyObject *Dtool_BulletVehicle_apply_engine_force_680(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.apply_engine_force")) {
    return nullptr;
  }
  // 1-void BulletVehicle::apply_engine_force(PN_stdfloat force, int idx)
  float param1;
  int param2;
  static const char *keyword_list[] = {"force", "idx", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "fi:apply_engine_force", (char **)keyword_list, &param1, &param2)) {
    ((*local_this).apply_engine_force)((PN_stdfloat)param1, (int)param2);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_engine_force(const BulletVehicle self, float force, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_apply_engine_force_680_comment =
  "C++ Interface:\n"
  "apply_engine_force(const BulletVehicle self, float force, int idx)\n"
  "\n"
  "/**\n"
  " * Applies force at the wheel with index idx for acceleration.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_apply_engine_force_680_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletWheel BulletVehicle::create_wheel(PN_stdfloat suspension_rest_length = 0.4)
 */
static PyObject *Dtool_BulletVehicle_create_wheel_681(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.create_wheel")) {
    return nullptr;
  }
  // 1-BulletWheel BulletVehicle::create_wheel(PN_stdfloat suspension_rest_length = 0.4)
  float param1 = 0.4;
  static const char *keyword_list[] = {"suspension_rest_length", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "|f:create_wheel", (char **)keyword_list, &param1)) {
    BulletWheel *return_value = new BulletWheel(((*local_this).create_wheel)((PN_stdfloat)param1));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletWheel, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "create_wheel(const BulletVehicle self, float suspension_rest_length)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_create_wheel_681_comment =
  "C++ Interface:\n"
  "create_wheel(const BulletVehicle self, float suspension_rest_length)\n"
  "\n"
  "// Wheels\n"
  "\n"
  "/**\n"
  " * Factory method for creating wheels for this vehicle instance.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_create_wheel_681_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletVehicle::get_num_wheels(void) const
 */
static PyObject *Dtool_BulletVehicle_get_num_wheels_682(PyObject *self, PyObject *) {
  BulletVehicle *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletVehicle)) {
    return nullptr;
  }
  // 1-int BulletVehicle::get_num_wheels(void) const
  int return_value = ((*(const BulletVehicle*)local_this).get_num_wheels)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_num_wheels_682_comment =
  "C++ Interface:\n"
  "get_num_wheels(BulletVehicle self)\n"
  "\n"
  "/**\n"
  " * Returns the number of wheels this vehicle has.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_num_wheels_682_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletWheel BulletVehicle::get_wheel(int idx) const
 */
static PyObject *Dtool_BulletVehicle_get_wheel_683(PyObject *self, PyObject *arg) {
  BulletVehicle *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletVehicle)) {
    return nullptr;
  }
  // 1-BulletWheel BulletVehicle::get_wheel(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletWheel *return_value = new BulletWheel(((*(const BulletVehicle*)local_this).get_wheel)((int)arg_val));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletWheel, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_wheel(BulletVehicle self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_wheel_683_comment =
  "C++ Interface:\n"
  "get_wheel(BulletVehicle self, int idx)\n"
  "\n"
  "/**\n"
  " * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is\n"
  " * equal or larger than the number of wheels.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_wheel_683_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline BulletVehicleTuning &BulletVehicle::get_tuning(void)
 */
static PyObject *Dtool_BulletVehicle_get_tuning_685(PyObject *self, PyObject *) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.get_tuning")) {
    return nullptr;
  }
  // 1-inline BulletVehicleTuning &BulletVehicle::get_tuning(void)
  BulletVehicleTuning *return_value = &(((*local_this).get_tuning)());
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletVehicleTuning, false, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_tuning_685_comment =
  "C++ Interface:\n"
  "get_tuning(const BulletVehicle self)\n"
  "\n"
  "// Tuning\n"
  "\n"
  "// Tuning\n"
  "\n"
  "/**\n"
  " * Returns a reference to the BulletVehicleTuning object of this vehicle which\n"
  " * offers various vehicle-global tuning options.  Make sure to configure this\n"
  " * before adding wheels!\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_tuning_685_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletVehicle::get_class_type(void)
 */
static PyObject *Dtool_BulletVehicle_get_class_type_786(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletVehicle::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletVehicle::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_class_type_786_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletVehicle_get_class_type_786_comment = nullptr;
#endif

static PyObject *Dtool_BulletVehicle_chassis_Getter(PyObject *self, void *) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.chassis")) {
    return nullptr;
  }

  // 1-BulletRigidBodyNode *BulletVehicle::get_chassis(void)
  BulletRigidBodyNode *return_value = ((*local_this).get_chassis)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletRigidBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletVehicle_current_speed_km_hour_Getter(PyObject *self, void *) {
  const BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicle, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletVehicle::get_current_speed_km_hour(void) const
  PN_stdfloat return_value = ((*(const BulletVehicle*)local_this).get_current_speed_km_hour)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletVehicle_forward_vector_Getter(PyObject *self, void *) {
  const BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicle, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletVehicle::get_forward_vector(void) const
  LVector3 *return_value = new LVector3(((*(const BulletVehicle*)local_this).get_forward_vector)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

/**
 * sequence length function for property BulletVehicle::wheels
 */
static Py_ssize_t Dtool_BulletVehicle_wheels_Len(PyObject *self) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicle, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_wheels)();
}

/**
 * sequence getter for property BulletVehicle::wheels
 */
static PyObject *Dtool_BulletVehicle_wheels_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicle, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_wheels)()) {
    PyErr_SetString(PyExc_IndexError, "BulletVehicle.wheels[] index out of range");
    return nullptr;
  }
  // 1-BulletWheel BulletVehicle::get_wheel(int idx) const
  BulletWheel *return_value = new BulletWheel(((*(const BulletVehicle*)local_this).get_wheel)(index));
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletWheel, true, false);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_wheel(BulletVehicle self, index)\n");
  }
}

static PyObject *Dtool_BulletVehicle_wheels_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletVehicle.wheels");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletVehicle_wheels_Len;
    wrap->_getitem_func = &Dtool_BulletVehicle_wheels_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

static PyObject *Dtool_BulletVehicle_tuning_Getter(PyObject *self, void *) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.tuning")) {
    return nullptr;
  }

  // 1-inline BulletVehicleTuning &BulletVehicle::get_tuning(void)
  BulletVehicleTuning *return_value = &(((*local_this).get_tuning)());
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletVehicleTuning, false, false);
}

/**
 * Python function wrapper for:
 * BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis)
 */
static int Dtool_Init_BulletVehicle(PyObject *self, PyObject *args, PyObject *kwds) {
  // 1-BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis)
  PyObject *param0;
  PyObject *param1;
  static const char *keyword_list[] = {"world", "chassis", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletVehicle", (char **)keyword_list, &param0, &param1)) {
    BulletWorld *param0_this = (BulletWorld *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletWorld, 0, "BulletVehicle.BulletVehicle", false, true);
    BulletRigidBodyNode *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletVehicle.BulletVehicle", false, true);
    if (param0_this != nullptr && param1_this != nullptr) {
      BulletVehicle *return_value = new BulletVehicle(param0_this, param1_this);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletVehicle, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletVehicle(BulletWorld world, BulletRigidBodyNode chassis)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletVehicle(PyObject *args, CPT(BulletVehicle) &coerced) {
  if (DtoolInstance_GetPointer(args, coerced.cheat(), Dtool_BulletVehicle)) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 2) {
      // 1-BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis)
      PyObject *param0;
      PyObject *param1;
      if (PyArg_UnpackTuple(args, "BulletVehicle", 2, 2, &param0, &param1)) {
        BulletWorld *param0_this = (BulletWorld *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletWorld, 0, "BulletVehicle.BulletVehicle", false, false);
        BulletRigidBodyNode *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletVehicle.BulletVehicle", false, false);
        if (param0_this != nullptr && param1_this != nullptr) {
          BulletVehicle *return_value = new BulletVehicle(param0_this, param1_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = std::move(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

bool Dtool_Coerce_BulletVehicle(PyObject *args, PT(BulletVehicle) &coerced) {
  if (DtoolInstance_GetPointer(args, coerced.cheat(), Dtool_BulletVehicle)) {
    // The argument is already of matching type, no need to coerce.
    if (!DtoolInstance_IS_CONST(args)) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 2) {
      // 1-BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis)
      PyObject *param0;
      PyObject *param1;
      if (PyArg_UnpackTuple(args, "BulletVehicle", 2, 2, &param0, &param1)) {
        BulletWorld *param0_this = (BulletWorld *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletWorld, 0, "BulletVehicle.BulletVehicle", false, false);
        BulletRigidBodyNode *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletVehicle.BulletVehicle", false, false);
        if (param0_this != nullptr && param1_this != nullptr) {
          BulletVehicle *return_value = new BulletVehicle(param0_this, param1_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = std::move(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletVehicle_get_wheels(PyObject *self, PyObject *) {
  BulletVehicle *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicle, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_wheels)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletVehicle_get_wheel_683(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletVehicle(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletVehicle) {
    printf("BulletVehicle ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletVehicle *local_this = (BulletVehicle *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletVehicle) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletVehicle(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletVehicle) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletVehicle*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletVehicle*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletVehicle*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletWheel
 */
/**
 * Python function wrapper for:
 * void BulletWheel::set_suspension_stiffness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_suspension_stiffness_692(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_suspension_stiffness")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_suspension_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_suspension_stiffness)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_suspension_stiffness(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_suspension_stiffness_692_comment =
  "C++ Interface:\n"
  "set_suspension_stiffness(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets how stiff the suspension shall be.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_suspension_stiffness_692_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_max_suspension_travel_cm(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_max_suspension_travel_cm_693(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_max_suspension_travel_cm")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_max_suspension_travel_cm(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_suspension_travel_cm)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_suspension_travel_cm(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_max_suspension_travel_cm_693_comment =
  "C++ Interface:\n"
  "set_max_suspension_travel_cm(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the maximum distance the suspension can travel out of the resting\n"
  " * position in centimeters.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_max_suspension_travel_cm_693_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_friction_slip(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_friction_slip_694(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_friction_slip")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_friction_slip(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_friction_slip)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_friction_slip(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_friction_slip_694_comment =
  "C++ Interface:\n"
  "set_friction_slip(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the slipperyness of the tyre.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_friction_slip_694_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_max_suspension_force(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_max_suspension_force_695(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_max_suspension_force")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_max_suspension_force(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_suspension_force)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_suspension_force(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_max_suspension_force_695_comment =
  "C++ Interface:\n"
  "set_max_suspension_force(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the maximum suspension force the wheel can handle.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_max_suspension_force_695_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_wheels_damping_compression(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_wheels_damping_compression_696(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_wheels_damping_compression")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_wheels_damping_compression(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_wheels_damping_compression)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wheels_damping_compression(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_wheels_damping_compression_696_comment =
  "C++ Interface:\n"
  "set_wheels_damping_compression(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the damping forces applied when the suspension gets compressed.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_wheels_damping_compression_696_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_wheels_damping_relaxation(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_wheels_damping_relaxation_697(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_wheels_damping_relaxation")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_wheels_damping_relaxation(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_wheels_damping_relaxation)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wheels_damping_relaxation(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_wheels_damping_relaxation_697_comment =
  "C++ Interface:\n"
  "set_wheels_damping_relaxation(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the damping forces applied when the suspension relaxes.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_wheels_damping_relaxation_697_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_roll_influence(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_roll_influence_698(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_roll_influence")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_roll_influence(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_roll_influence)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_roll_influence(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_roll_influence_698_comment =
  "C++ Interface:\n"
  "set_roll_influence(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Defines a scaling factor for roll forces that affect the chassis.  0.0\n"
  " * means no roll - the chassis won't ever flip over - while 1.0 means original\n"
  " * physical behaviour.  Basically, this allows moving the center of mass up\n"
  " * and down.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_roll_influence_698_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_wheel_radius(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_wheel_radius_699(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_wheel_radius")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_wheel_radius(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_wheel_radius)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wheel_radius(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_wheel_radius_699_comment =
  "C++ Interface:\n"
  "set_wheel_radius(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the wheel radius.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_wheel_radius_699_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_steering(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_steering_700(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_steering")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_steering(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_steering)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_steering(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_steering_700_comment =
  "C++ Interface:\n"
  "set_steering(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the steering angle.\n"
  " *\n"
  " * @warning\n"
  " * As of 1.11, this method uses degrees.  Previous versions used radians.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_steering_700_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_rotation(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_rotation_701(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_rotation")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_rotation(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_rotation)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_rotation(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_rotation_701_comment =
  "C++ Interface:\n"
  "set_rotation(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_rotation_701_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_delta_rotation(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_delta_rotation_702(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_delta_rotation")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_delta_rotation(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_delta_rotation)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_delta_rotation(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_delta_rotation_702_comment =
  "C++ Interface:\n"
  "set_delta_rotation(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_delta_rotation_702_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_engine_force(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_engine_force_703(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_engine_force")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_engine_force(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_engine_force)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_engine_force(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_engine_force_703_comment =
  "C++ Interface:\n"
  "set_engine_force(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Defines how much force should be used to rotate the wheel.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_engine_force_703_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_brake(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_brake_704(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_brake")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_brake(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_brake)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_brake(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_brake_704_comment =
  "C++ Interface:\n"
  "set_brake(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_brake_704_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_skid_info(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_skid_info_705(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_skid_info")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_skid_info(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_skid_info)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_skid_info(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_skid_info_705_comment =
  "C++ Interface:\n"
  "set_skid_info(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_skid_info_705_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_wheels_suspension_force(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_wheels_suspension_force_706(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_wheels_suspension_force")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_wheels_suspension_force(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_wheels_suspension_force)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wheels_suspension_force(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_wheels_suspension_force_706_comment =
  "C++ Interface:\n"
  "set_wheels_suspension_force(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_wheels_suspension_force_706_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_suspension_relative_velocity(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_suspension_relative_velocity_707(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_suspension_relative_velocity")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_suspension_relative_velocity(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_suspension_relative_velocity)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_suspension_relative_velocity(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_suspension_relative_velocity_707_comment =
  "C++ Interface:\n"
  "set_suspension_relative_velocity(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_suspension_relative_velocity_707_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_clipped_inv_connection_point_cs(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_clipped_inv_connection_point_cs_708(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_clipped_inv_connection_point_cs")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_clipped_inv_connection_point_cs(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_clipped_inv_connection_point_cs)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_clipped_inv_connection_point_cs(const BulletWheel self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_clipped_inv_connection_point_cs_708_comment =
  "C++ Interface:\n"
  "set_clipped_inv_connection_point_cs(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_clipped_inv_connection_point_cs_708_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_chassis_connection_point_cs(LPoint3 const &pos)
 */
static PyObject *Dtool_BulletWheel_set_chassis_connection_point_cs_709(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_chassis_connection_point_cs")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_chassis_connection_point_cs(LPoint3 const &pos)
  LPoint3f arg_local;
  LPoint3 const *arg_this = Dtool_Coerce_LPoint3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWheel.set_chassis_connection_point_cs", "LPoint3f");
  }
  ((*local_this).set_chassis_connection_point_cs)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_chassis_connection_point_cs(const BulletWheel self, const LPoint3f pos)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_chassis_connection_point_cs_709_comment =
  "C++ Interface:\n"
  "set_chassis_connection_point_cs(const BulletWheel self, const LPoint3f pos)\n"
  "\n"
  "/**\n"
  " * Sets the point where the wheel is connected to the chassis.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_chassis_connection_point_cs_709_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_wheel_direction_cs(LVector3 const &dir)
 */
static PyObject *Dtool_BulletWheel_set_wheel_direction_cs_710(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_wheel_direction_cs")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_wheel_direction_cs(LVector3 const &dir)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWheel.set_wheel_direction_cs", "LVector3f");
  }
  ((*local_this).set_wheel_direction_cs)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wheel_direction_cs(const BulletWheel self, const LVector3f dir)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_wheel_direction_cs_710_comment =
  "C++ Interface:\n"
  "set_wheel_direction_cs(const BulletWheel self, const LVector3f dir)\n"
  "\n"
  "/**\n"
  " * Sets the wheel's forward vector.  (Most likely orthogonal to the axle\n"
  " * vector.)\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_wheel_direction_cs_710_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_wheel_axle_cs(LVector3 const &axle)
 */
static PyObject *Dtool_BulletWheel_set_wheel_axle_cs_711(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_wheel_axle_cs")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_wheel_axle_cs(LVector3 const &axle)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWheel.set_wheel_axle_cs", "LVector3f");
  }
  ((*local_this).set_wheel_axle_cs)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wheel_axle_cs(const BulletWheel self, const LVector3f axle)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_wheel_axle_cs_711_comment =
  "C++ Interface:\n"
  "set_wheel_axle_cs(const BulletWheel self, const LVector3f axle)\n"
  "\n"
  "/**\n"
  " * Determines the wheel axle normal vector.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_wheel_axle_cs_711_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_world_transform(LMatrix4 const &mat)
 */
static PyObject *Dtool_BulletWheel_set_world_transform_712(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_world_transform")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_world_transform(LMatrix4 const &mat)
  LMatrix4f arg_local;
  LMatrix4 const *arg_this = Dtool_Coerce_LMatrix4f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWheel.set_world_transform", "LMatrix4f");
  }
  ((*local_this).set_world_transform)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_world_transform(const BulletWheel self, const LMatrix4f mat)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_world_transform_712_comment =
  "C++ Interface:\n"
  "set_world_transform(const BulletWheel self, const LMatrix4f mat)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_world_transform_712_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_front_wheel(bool value)
 */
static PyObject *Dtool_BulletWheel_set_front_wheel_713(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_front_wheel")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_front_wheel(bool value)
  ((*local_this).set_front_wheel)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_front_wheel(const BulletWheel self, bool value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_front_wheel_713_comment =
  "C++ Interface:\n"
  "set_front_wheel(const BulletWheel self, bool value)\n"
  "\n"
  "/**\n"
  " * Sets if the wheel is steerable.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_front_wheel_713_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_node(PandaNode *node)
 */
static PyObject *Dtool_BulletWheel_set_node_714(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_node")) {
    return nullptr;
  }
  // 1-void BulletWheel::set_node(PandaNode *node)
  PandaNode *arg_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_PandaNode, 1, "BulletWheel.set_node", false, true);
  if (arg_this != nullptr) {
    ((*local_this).set_node)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_node(const BulletWheel self, PandaNode node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_node_714_comment =
  "C++ Interface:\n"
  "set_node(const BulletWheel self, PandaNode node)\n"
  "\n"
  "/**\n"
  " * Sets the PandaNode which representates the visual appearance of this wheel.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_node_714_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_suspension_rest_length(void) const
 */
static PyObject *Dtool_BulletWheel_get_suspension_rest_length_715(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_suspension_rest_length(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_suspension_rest_length)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_suspension_rest_length_715_comment =
  "C++ Interface:\n"
  "get_suspension_rest_length(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the length of the suspension when the vehicle is standing still.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_suspension_rest_length_715_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_suspension_stiffness(void) const
 */
static PyObject *Dtool_BulletWheel_get_suspension_stiffness_716(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_suspension_stiffness(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_suspension_stiffness)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_suspension_stiffness_716_comment =
  "C++ Interface:\n"
  "get_suspension_stiffness(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the stiffness of the suspension.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_suspension_stiffness_716_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_max_suspension_travel_cm(void) const
 */
static PyObject *Dtool_BulletWheel_get_max_suspension_travel_cm_717(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_max_suspension_travel_cm(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_max_suspension_travel_cm)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_max_suspension_travel_cm_717_comment =
  "C++ Interface:\n"
  "get_max_suspension_travel_cm(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_max_suspension_travel_cm_717_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_friction_slip(void) const
 */
static PyObject *Dtool_BulletWheel_get_friction_slip_718(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_friction_slip(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_friction_slip)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_friction_slip_718_comment =
  "C++ Interface:\n"
  "get_friction_slip(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns how slippery the tyres are.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_friction_slip_718_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_max_suspension_force(void) const
 */
static PyObject *Dtool_BulletWheel_get_max_suspension_force_719(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_max_suspension_force(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_max_suspension_force)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_max_suspension_force_719_comment =
  "C++ Interface:\n"
  "get_max_suspension_force(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the maximum force (weight) the suspension can handle.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_max_suspension_force_719_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_wheels_damping_compression(void) const
 */
static PyObject *Dtool_BulletWheel_get_wheels_damping_compression_720(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_wheels_damping_compression(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_wheels_damping_compression)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_wheels_damping_compression_720_comment =
  "C++ Interface:\n"
  "get_wheels_damping_compression(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the  damping applied to the compressing suspension.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_wheels_damping_compression_720_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_wheels_damping_relaxation(void) const
 */
static PyObject *Dtool_BulletWheel_get_wheels_damping_relaxation_721(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_wheels_damping_relaxation(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_wheels_damping_relaxation)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_wheels_damping_relaxation_721_comment =
  "C++ Interface:\n"
  "get_wheels_damping_relaxation(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the damping applied to the relaxing suspension.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_wheels_damping_relaxation_721_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_roll_influence(void) const
 */
static PyObject *Dtool_BulletWheel_get_roll_influence_722(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_roll_influence(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_roll_influence)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_roll_influence_722_comment =
  "C++ Interface:\n"
  "get_roll_influence(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the factor by which roll forces are scaled.  See\n"
  " * set_roll_influence.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_roll_influence_722_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_wheel_radius(void) const
 */
static PyObject *Dtool_BulletWheel_get_wheel_radius_723(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_wheel_radius(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_wheel_radius)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_wheel_radius_723_comment =
  "C++ Interface:\n"
  "get_wheel_radius(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the wheel radius.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_wheel_radius_723_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_steering(void) const
 */
static PyObject *Dtool_BulletWheel_get_steering_724(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_steering(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_steering)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_steering_724_comment =
  "C++ Interface:\n"
  "get_steering(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the steering angle in degrees.\n"
  " *\n"
  " * @warning\n"
  " * As of 1.11, this method uses degrees.  Previous versions used radians.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_steering_724_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_rotation(void) const
 */
static PyObject *Dtool_BulletWheel_get_rotation_725(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_rotation(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_rotation)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_rotation_725_comment =
  "C++ Interface:\n"
  "get_rotation(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_rotation_725_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_delta_rotation(void) const
 */
static PyObject *Dtool_BulletWheel_get_delta_rotation_726(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_delta_rotation(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_delta_rotation)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_delta_rotation_726_comment =
  "C++ Interface:\n"
  "get_delta_rotation(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_delta_rotation_726_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_engine_force(void) const
 */
static PyObject *Dtool_BulletWheel_get_engine_force_727(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_engine_force(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_engine_force)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_engine_force_727_comment =
  "C++ Interface:\n"
  "get_engine_force(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the amount of accelleration force currently applied.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_engine_force_727_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_brake(void) const
 */
static PyObject *Dtool_BulletWheel_get_brake_728(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_brake(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_brake)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_brake_728_comment =
  "C++ Interface:\n"
  "get_brake(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the amount of braking force currently applied.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_brake_728_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_skid_info(void) const
 */
static PyObject *Dtool_BulletWheel_get_skid_info_729(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_skid_info(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_skid_info)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_skid_info_729_comment =
  "C++ Interface:\n"
  "get_skid_info(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_skid_info_729_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_wheels_suspension_force(void) const
 */
static PyObject *Dtool_BulletWheel_get_wheels_suspension_force_730(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_wheels_suspension_force(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_wheels_suspension_force)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_wheels_suspension_force_730_comment =
  "C++ Interface:\n"
  "get_wheels_suspension_force(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_wheels_suspension_force_730_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_suspension_relative_velocity(void) const
 */
static PyObject *Dtool_BulletWheel_get_suspension_relative_velocity_731(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_suspension_relative_velocity(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_suspension_relative_velocity)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_suspension_relative_velocity_731_comment =
  "C++ Interface:\n"
  "get_suspension_relative_velocity(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_suspension_relative_velocity_731_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_clipped_inv_connection_point_cs(void) const
 */
static PyObject *Dtool_BulletWheel_get_clipped_inv_connection_point_cs_732(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheel::get_clipped_inv_connection_point_cs(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_clipped_inv_connection_point_cs)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_clipped_inv_connection_point_cs_732_comment =
  "C++ Interface:\n"
  "get_clipped_inv_connection_point_cs(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_clipped_inv_connection_point_cs_732_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletWheel::get_chassis_connection_point_cs(void) const
 */
static PyObject *Dtool_BulletWheel_get_chassis_connection_point_cs_733(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-LPoint3 BulletWheel::get_chassis_connection_point_cs(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletWheel*)local_this).get_chassis_connection_point_cs)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_chassis_connection_point_cs_733_comment =
  "C++ Interface:\n"
  "get_chassis_connection_point_cs(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the point where the wheel is connected to the chassis.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_chassis_connection_point_cs_733_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletWheel::get_wheel_direction_cs(void) const
 */
static PyObject *Dtool_BulletWheel_get_wheel_direction_cs_734(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-LVector3 BulletWheel::get_wheel_direction_cs(void) const
  LVector3 *return_value = new LVector3(((*(const BulletWheel*)local_this).get_wheel_direction_cs)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_wheel_direction_cs_734_comment =
  "C++ Interface:\n"
  "get_wheel_direction_cs(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the wheel's forward vector relative to the chassis.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_wheel_direction_cs_734_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletWheel::get_wheel_axle_cs(void) const
 */
static PyObject *Dtool_BulletWheel_get_wheel_axle_cs_735(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-LVector3 BulletWheel::get_wheel_axle_cs(void) const
  LVector3 *return_value = new LVector3(((*(const BulletWheel*)local_this).get_wheel_axle_cs)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_wheel_axle_cs_735_comment =
  "C++ Interface:\n"
  "get_wheel_axle_cs(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the normal vector of the wheel axle.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_wheel_axle_cs_735_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LMatrix4 BulletWheel::get_world_transform(void) const
 */
static PyObject *Dtool_BulletWheel_get_world_transform_736(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-LMatrix4 BulletWheel::get_world_transform(void) const
  LMatrix4 *return_value = new LMatrix4(((*(const BulletWheel*)local_this).get_world_transform)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LMatrix4f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_world_transform_736_comment =
  "C++ Interface:\n"
  "get_world_transform(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_world_transform_736_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletWheel::is_front_wheel(void) const
 */
static PyObject *Dtool_BulletWheel_is_front_wheel_737(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-bool BulletWheel::is_front_wheel(void) const
  bool return_value = ((*(const BulletWheel*)local_this).is_front_wheel)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_is_front_wheel_737_comment =
  "C++ Interface:\n"
  "is_front_wheel(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Determines if a wheel is steerable.\n"
  " */";
#else
static const char *Dtool_BulletWheel_is_front_wheel_737_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PandaNode *BulletWheel::get_node(void) const
 */
static PyObject *Dtool_BulletWheel_get_node_738(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-PandaNode *BulletWheel::get_node(void) const
  PandaNode *return_value = ((*(const BulletWheel*)local_this).get_node)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_node_738_comment =
  "C++ Interface:\n"
  "get_node(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the PandaNode which representates the visual appearance of this\n"
  " * wheel, if such a representation has been set previously.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_node_738_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletWheelRaycastInfo BulletWheel::get_raycast_info(void) const
 */
static PyObject *Dtool_BulletWheel_get_raycast_info_739(PyObject *self, PyObject *) {
  BulletWheel *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheel)) {
    return nullptr;
  }
  // 1-BulletWheelRaycastInfo BulletWheel::get_raycast_info(void) const
  BulletWheelRaycastInfo *return_value = new BulletWheelRaycastInfo(((*(const BulletWheel*)local_this).get_raycast_info)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletWheelRaycastInfo, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_raycast_info_739_comment =
  "C++ Interface:\n"
  "get_raycast_info(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_raycast_info_739_comment = nullptr;
#endif

static PyObject *Dtool_BulletWheel_raycast_info_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-BulletWheelRaycastInfo BulletWheel::get_raycast_info(void) const
  BulletWheelRaycastInfo *return_value = new BulletWheelRaycastInfo(((*(const BulletWheel*)local_this).get_raycast_info)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletWheelRaycastInfo, true, false);
}

static PyObject *Dtool_BulletWheel_suspension_rest_length_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_suspension_rest_length(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_suspension_rest_length)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletWheel_suspension_stiffness_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_suspension_stiffness(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_suspension_stiffness)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_suspension_stiffness_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.suspension_stiffness")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete suspension_stiffness attribute");
    return -1;
  }
  // 1-void BulletWheel::set_suspension_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_suspension_stiffness)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_suspension_stiffness(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_max_suspension_travel_cm_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_max_suspension_travel_cm(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_max_suspension_travel_cm)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_max_suspension_travel_cm_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.max_suspension_travel_cm")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete max_suspension_travel_cm attribute");
    return -1;
  }
  // 1-void BulletWheel::set_max_suspension_travel_cm(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_suspension_travel_cm)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_max_suspension_travel_cm(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_friction_slip_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_friction_slip(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_friction_slip)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_friction_slip_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.friction_slip")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete friction_slip attribute");
    return -1;
  }
  // 1-void BulletWheel::set_friction_slip(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_friction_slip)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_friction_slip(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_max_suspension_force_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_max_suspension_force(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_max_suspension_force)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_max_suspension_force_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.max_suspension_force")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete max_suspension_force attribute");
    return -1;
  }
  // 1-void BulletWheel::set_max_suspension_force(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_suspension_force)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_max_suspension_force(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_wheels_damping_compression_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_wheels_damping_compression(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_wheels_damping_compression)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_wheels_damping_compression_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.wheels_damping_compression")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete wheels_damping_compression attribute");
    return -1;
  }
  // 1-void BulletWheel::set_wheels_damping_compression(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_wheels_damping_compression)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_wheels_damping_compression(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_wheels_damping_relaxation_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_wheels_damping_relaxation(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_wheels_damping_relaxation)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_wheels_damping_relaxation_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.wheels_damping_relaxation")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete wheels_damping_relaxation attribute");
    return -1;
  }
  // 1-void BulletWheel::set_wheels_damping_relaxation(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_wheels_damping_relaxation)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_wheels_damping_relaxation(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_roll_influence_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_roll_influence(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_roll_influence)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_roll_influence_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.roll_influence")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete roll_influence attribute");
    return -1;
  }
  // 1-void BulletWheel::set_roll_influence(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_roll_influence)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_roll_influence(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_wheel_radius_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_wheel_radius(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_wheel_radius)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_wheel_radius_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.wheel_radius")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete wheel_radius attribute");
    return -1;
  }
  // 1-void BulletWheel::set_wheel_radius(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_wheel_radius)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_wheel_radius(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_steering_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_steering(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_steering)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_steering_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.steering")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete steering attribute");
    return -1;
  }
  // 1-void BulletWheel::set_steering(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_steering)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_steering(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_rotation_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_rotation(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_rotation)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_rotation_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.rotation")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete rotation attribute");
    return -1;
  }
  // 1-void BulletWheel::set_rotation(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_rotation)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_rotation(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_delta_rotation_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_delta_rotation(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_delta_rotation)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_delta_rotation_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.delta_rotation")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete delta_rotation attribute");
    return -1;
  }
  // 1-void BulletWheel::set_delta_rotation(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_delta_rotation)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_delta_rotation(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_engine_force_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_engine_force(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_engine_force)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_engine_force_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.engine_force")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete engine_force attribute");
    return -1;
  }
  // 1-void BulletWheel::set_engine_force(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_engine_force)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_engine_force(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_brake_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_brake(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_brake)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_brake_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.brake")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete brake attribute");
    return -1;
  }
  // 1-void BulletWheel::set_brake(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_brake)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_brake(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_skid_info_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_skid_info(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_skid_info)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_skid_info_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.skid_info")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete skid_info attribute");
    return -1;
  }
  // 1-void BulletWheel::set_skid_info(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_skid_info)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_skid_info(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_wheels_suspension_force_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_wheels_suspension_force(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_wheels_suspension_force)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_wheels_suspension_force_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.wheels_suspension_force")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete wheels_suspension_force attribute");
    return -1;
  }
  // 1-void BulletWheel::set_wheels_suspension_force(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_wheels_suspension_force)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_wheels_suspension_force(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_suspension_relative_velocity_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_suspension_relative_velocity(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_suspension_relative_velocity)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_suspension_relative_velocity_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.suspension_relative_velocity")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete suspension_relative_velocity attribute");
    return -1;
  }
  // 1-void BulletWheel::set_suspension_relative_velocity(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_suspension_relative_velocity)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_suspension_relative_velocity(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_clipped_inv_connection_point_cs_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheel::get_clipped_inv_connection_point_cs(void) const
  PN_stdfloat return_value = ((*(const BulletWheel*)local_this).get_clipped_inv_connection_point_cs)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_clipped_inv_connection_point_cs_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.clipped_inv_connection_point_cs")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete clipped_inv_connection_point_cs attribute");
    return -1;
  }
  // 1-void BulletWheel::set_clipped_inv_connection_point_cs(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_clipped_inv_connection_point_cs)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_clipped_inv_connection_point_cs(const BulletWheel self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_chassis_connection_point_cs_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletWheel::get_chassis_connection_point_cs(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletWheel*)local_this).get_chassis_connection_point_cs)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static int Dtool_BulletWheel_chassis_connection_point_cs_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.chassis_connection_point_cs")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete chassis_connection_point_cs attribute");
    return -1;
  }
  // 1-void BulletWheel::set_chassis_connection_point_cs(LPoint3 const &pos)
  LPoint3f arg_local;
  LPoint3 const *arg_this = Dtool_Coerce_LPoint3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletWheel.set_chassis_connection_point_cs", "LPoint3f");
    return -1;
  }
  ((*local_this).set_chassis_connection_point_cs)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_chassis_connection_point_cs(const BulletWheel self, const LPoint3f pos)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_wheel_direction_cs_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletWheel::get_wheel_direction_cs(void) const
  LVector3 *return_value = new LVector3(((*(const BulletWheel*)local_this).get_wheel_direction_cs)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static int Dtool_BulletWheel_wheel_direction_cs_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.wheel_direction_cs")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete wheel_direction_cs attribute");
    return -1;
  }
  // 1-void BulletWheel::set_wheel_direction_cs(LVector3 const &dir)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletWheel.set_wheel_direction_cs", "LVector3f");
    return -1;
  }
  ((*local_this).set_wheel_direction_cs)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_wheel_direction_cs(const BulletWheel self, const LVector3f dir)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_wheel_axle_cs_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletWheel::get_wheel_axle_cs(void) const
  LVector3 *return_value = new LVector3(((*(const BulletWheel*)local_this).get_wheel_axle_cs)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static int Dtool_BulletWheel_wheel_axle_cs_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.wheel_axle_cs")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete wheel_axle_cs attribute");
    return -1;
  }
  // 1-void BulletWheel::set_wheel_axle_cs(LVector3 const &axle)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletWheel.set_wheel_axle_cs", "LVector3f");
    return -1;
  }
  ((*local_this).set_wheel_axle_cs)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_wheel_axle_cs(const BulletWheel self, const LVector3f axle)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_world_transform_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LMatrix4 BulletWheel::get_world_transform(void) const
  LMatrix4 *return_value = new LMatrix4(((*(const BulletWheel*)local_this).get_world_transform)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LMatrix4f, true, false);
}

static int Dtool_BulletWheel_world_transform_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.world_transform")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete world_transform attribute");
    return -1;
  }
  // 1-void BulletWheel::set_world_transform(LMatrix4 const &mat)
  LMatrix4f arg_local;
  LMatrix4 const *arg_this = Dtool_Coerce_LMatrix4f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletWheel.set_world_transform", "LMatrix4f");
    return -1;
  }
  ((*local_this).set_world_transform)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_world_transform(const BulletWheel self, const LMatrix4f mat)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_front_wheel_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletWheel::is_front_wheel(void) const
  bool return_value = ((*(const BulletWheel*)local_this).is_front_wheel)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWheel_front_wheel_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.front_wheel")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete front_wheel attribute");
    return -1;
  }
  // 1-void BulletWheel::set_front_wheel(bool value)
  ((*local_this).set_front_wheel)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_front_wheel(const BulletWheel self, bool value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWheel_node_Getter(PyObject *self, void *) {
  const BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PandaNode *BulletWheel::get_node(void) const
  PandaNode *return_value = ((*(const BulletWheel*)local_this).get_node)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static int Dtool_BulletWheel_node_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWheel *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.node")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete node attribute");
    return -1;
  }
  // 1-void BulletWheel::set_node(PandaNode *node)
  PandaNode *arg_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_PandaNode, 1, "BulletWheel.set_node", false, true);
  if (arg_this != nullptr) {
    ((*local_this).set_node)(arg_this);
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_node(const BulletWheel self, PandaNode node)\n");
  }
  return -1;
}

/**
 * Python function wrapper for:
 * inline BulletWheel::BulletWheel(BulletWheel const &) = default
 */
static int Dtool_Init_BulletWheel(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletWheel() takes no keyword arguments");
    return -1;
#endif
  }
  // 1-inline BulletWheel::BulletWheel(BulletWheel const &) = default
  PyObject *param0;
  if (PyTuple_GET_SIZE(args) == 1) {
    param0 = PyTuple_GET_ITEM(args, 0);
    BulletWheel const *param0_this = (BulletWheel *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletWheel, 0, "BulletWheel.BulletWheel", true, true);
    if (param0_this != nullptr) {
      BulletWheel *return_value = new BulletWheel(*param0_this);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletWheel, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletWheel(const BulletWheel param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletWheel(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletWheel) {
    printf("BulletWheel ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletWheel *local_this = (BulletWheel *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletWheel) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletWheel(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletWheel) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletWheelRaycastInfo
 */
/**
 * Python function wrapper for:
 * bool BulletWheelRaycastInfo::is_in_contact(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_is_in_contact_743(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheelRaycastInfo)) {
    return nullptr;
  }
  // 1-bool BulletWheelRaycastInfo::is_in_contact(void) const
  bool return_value = ((*(const BulletWheelRaycastInfo*)local_this).is_in_contact)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_is_in_contact_743_comment =
  "C++ Interface:\n"
  "is_in_contact(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_is_in_contact_743_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheelRaycastInfo::get_suspension_length(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_suspension_length_744(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheelRaycastInfo)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletWheelRaycastInfo::get_suspension_length(void) const
  PN_stdfloat return_value = ((*(const BulletWheelRaycastInfo*)local_this).get_suspension_length)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_suspension_length_744_comment =
  "C++ Interface:\n"
  "get_suspension_length(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_suspension_length_744_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletWheelRaycastInfo::get_contact_normal_ws(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_745(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheelRaycastInfo)) {
    return nullptr;
  }
  // 1-LVector3 BulletWheelRaycastInfo::get_contact_normal_ws(void) const
  LVector3 *return_value = new LVector3(((*(const BulletWheelRaycastInfo*)local_this).get_contact_normal_ws)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_745_comment =
  "C++ Interface:\n"
  "get_contact_normal_ws(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_745_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletWheelRaycastInfo::get_wheel_direction_ws(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_746(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheelRaycastInfo)) {
    return nullptr;
  }
  // 1-LVector3 BulletWheelRaycastInfo::get_wheel_direction_ws(void) const
  LVector3 *return_value = new LVector3(((*(const BulletWheelRaycastInfo*)local_this).get_wheel_direction_ws)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_746_comment =
  "C++ Interface:\n"
  "get_wheel_direction_ws(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_746_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletWheelRaycastInfo::get_wheel_axle_ws(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_747(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheelRaycastInfo)) {
    return nullptr;
  }
  // 1-LVector3 BulletWheelRaycastInfo::get_wheel_axle_ws(void) const
  LVector3 *return_value = new LVector3(((*(const BulletWheelRaycastInfo*)local_this).get_wheel_axle_ws)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_747_comment =
  "C++ Interface:\n"
  "get_wheel_axle_ws(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_747_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletWheelRaycastInfo::get_contact_point_ws(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_contact_point_ws_748(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheelRaycastInfo)) {
    return nullptr;
  }
  // 1-LPoint3 BulletWheelRaycastInfo::get_contact_point_ws(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletWheelRaycastInfo*)local_this).get_contact_point_ws)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_contact_point_ws_748_comment =
  "C++ Interface:\n"
  "get_contact_point_ws(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_contact_point_ws_748_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletWheelRaycastInfo::get_hard_point_ws(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_hard_point_ws_749(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheelRaycastInfo)) {
    return nullptr;
  }
  // 1-LPoint3 BulletWheelRaycastInfo::get_hard_point_ws(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletWheelRaycastInfo*)local_this).get_hard_point_ws)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_hard_point_ws_749_comment =
  "C++ Interface:\n"
  "get_hard_point_ws(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_hard_point_ws_749_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PandaNode *BulletWheelRaycastInfo::get_ground_object(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_ground_object_750(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWheelRaycastInfo)) {
    return nullptr;
  }
  // 1-PandaNode *BulletWheelRaycastInfo::get_ground_object(void) const
  PandaNode *return_value = ((*(const BulletWheelRaycastInfo*)local_this).get_ground_object)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_ground_object_750_comment =
  "C++ Interface:\n"
  "get_ground_object(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_ground_object_750_comment = nullptr;
#endif

static PyObject *Dtool_BulletWheelRaycastInfo_in_contact_Getter(PyObject *self, void *) {
  const BulletWheelRaycastInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletWheelRaycastInfo::is_in_contact(void) const
  bool return_value = ((*(const BulletWheelRaycastInfo*)local_this).is_in_contact)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletWheelRaycastInfo_suspension_length_Getter(PyObject *self, void *) {
  const BulletWheelRaycastInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletWheelRaycastInfo::get_suspension_length(void) const
  PN_stdfloat return_value = ((*(const BulletWheelRaycastInfo*)local_this).get_suspension_length)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletWheelRaycastInfo_contact_normal_ws_Getter(PyObject *self, void *) {
  const BulletWheelRaycastInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletWheelRaycastInfo::get_contact_normal_ws(void) const
  LVector3 *return_value = new LVector3(((*(const BulletWheelRaycastInfo*)local_this).get_contact_normal_ws)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletWheelRaycastInfo_wheel_direction_ws_Getter(PyObject *self, void *) {
  const BulletWheelRaycastInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletWheelRaycastInfo::get_wheel_direction_ws(void) const
  LVector3 *return_value = new LVector3(((*(const BulletWheelRaycastInfo*)local_this).get_wheel_direction_ws)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletWheelRaycastInfo_wheel_axle_ws_Getter(PyObject *self, void *) {
  const BulletWheelRaycastInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletWheelRaycastInfo::get_wheel_axle_ws(void) const
  LVector3 *return_value = new LVector3(((*(const BulletWheelRaycastInfo*)local_this).get_wheel_axle_ws)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletWheelRaycastInfo_contact_point_ws_Getter(PyObject *self, void *) {
  const BulletWheelRaycastInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletWheelRaycastInfo::get_contact_point_ws(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletWheelRaycastInfo*)local_this).get_contact_point_ws)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletWheelRaycastInfo_hard_point_ws_Getter(PyObject *self, void *) {
  const BulletWheelRaycastInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletWheelRaycastInfo::get_hard_point_ws(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletWheelRaycastInfo*)local_this).get_hard_point_ws)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletWheelRaycastInfo_ground_object_Getter(PyObject *self, void *) {
  const BulletWheelRaycastInfo *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PandaNode *BulletWheelRaycastInfo::get_ground_object(void) const
  PandaNode *return_value = ((*(const BulletWheelRaycastInfo*)local_this).get_ground_object)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

/**
 * Python function wrapper for:
 * inline BulletWheelRaycastInfo::BulletWheelRaycastInfo(BulletWheelRaycastInfo const &) = default
 */
static int Dtool_Init_BulletWheelRaycastInfo(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletWheelRaycastInfo() takes no keyword arguments");
    return -1;
#endif
  }
  // 1-inline BulletWheelRaycastInfo::BulletWheelRaycastInfo(BulletWheelRaycastInfo const &) = default
  PyObject *param0;
  if (PyTuple_GET_SIZE(args) == 1) {
    param0 = PyTuple_GET_ITEM(args, 0);
    BulletWheelRaycastInfo const *param0_this = (BulletWheelRaycastInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletWheelRaycastInfo, 0, "BulletWheelRaycastInfo.BulletWheelRaycastInfo", true, true);
    if (param0_this != nullptr) {
      BulletWheelRaycastInfo *return_value = new BulletWheelRaycastInfo(*param0_this);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletWheelRaycastInfo, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletWheelRaycastInfo(const BulletWheelRaycastInfo param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletWheelRaycastInfo(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletWheelRaycastInfo) {
    printf("BulletWheelRaycastInfo ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletWheelRaycastInfo *local_this = (BulletWheelRaycastInfo *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletWheelRaycastInfo) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletWheelRaycastInfo(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletWheelRaycastInfo) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletWorld
 */
/**
 * Python function wrapper for:
 * void BulletWorld::set_gravity(LVector3 const &gravity)
 * void BulletWorld::set_gravity(PN_stdfloat gx, PN_stdfloat gy, PN_stdfloat gz)
 */
static PyObject *Dtool_BulletWorld_set_gravity_789(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.set_gravity")) {
    return nullptr;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg;
      if (Dtool_ExtractArg(&arg, args, kwds, "gravity")) {
        // 1-void BulletWorld::set_gravity(LVector3 const &gravity)
        LVector3f arg_local;
        LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
        if (!(arg_this != nullptr)) {
          return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.set_gravity", "LVector3f");
        }
        ((*local_this).set_gravity)(*arg_this);
        return Dtool_Return_None();
      }
    }
    break;
  case 3:
    {
      // 1-void BulletWorld::set_gravity(PN_stdfloat gx, PN_stdfloat gy, PN_stdfloat gz)
      float param1;
      float param2;
      float param3;
      static const char *keyword_list[] = {"gx", "gy", "gz", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "fff:set_gravity", (char **)keyword_list, &param1, &param2, &param3)) {
        ((*local_this).set_gravity)((PN_stdfloat)param1, (PN_stdfloat)param2, (PN_stdfloat)param3);
        return Dtool_Return_None();
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "set_gravity() takes 2 or 4 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_gravity(const BulletWorld self, const LVector3f gravity)\n"
      "set_gravity(const BulletWorld self, float gx, float gy, float gz)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_set_gravity_789_comment =
  "C++ Interface:\n"
  "set_gravity(const BulletWorld self, const LVector3f gravity)\n"
  "set_gravity(const BulletWorld self, float gx, float gy, float gz)\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_set_gravity_789_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 const BulletWorld::get_gravity(void) const
 */
static PyObject *Dtool_BulletWorld_get_gravity_790(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-LVector3 const BulletWorld::get_gravity(void) const
  LVector3 const *return_value = new LVector3 const(((*(const BulletWorld*)local_this).get_gravity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, true);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_gravity_790_comment =
  "C++ Interface:\n"
  "get_gravity(BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_gravity_790_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletWorld::do_physics(PN_stdfloat dt, int max_substeps = 1, PN_stdfloat stepsize = (1.0 / 60.0))
 */
static PyObject *Dtool_BulletWorld_do_physics_791(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.do_physics")) {
    return nullptr;
  }
  // 1-int BulletWorld::do_physics(PN_stdfloat dt, int max_substeps = 1, PN_stdfloat stepsize = (1.0 / 60.0))
  float param1;
  int param2 = 1;
  float param3 = (1.0 / 60.0);
  static const char *keyword_list[] = {"dt", "max_substeps", "stepsize", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "f|if:do_physics", (char **)keyword_list, &param1, &param2, &param3)) {
#if defined(HAVE_THREADS) && !defined(SIMPLE_THREADS)
    PyThreadState *_save;
    Py_UNBLOCK_THREADS
#endif  // HAVE_THREADS && !SIMPLE_THREADS
    int return_value = ((*local_this).do_physics)((PN_stdfloat)param1, (int)param2, (PN_stdfloat)param3);
#if defined(HAVE_THREADS) && !defined(SIMPLE_THREADS)
    Py_BLOCK_THREADS
#endif  // HAVE_THREADS && !SIMPLE_THREADS
    if (Dtool_CheckErrorOccurred()) {
      return nullptr;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "do_physics(const BulletWorld self, float dt, int max_substeps, float stepsize)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_do_physics_791_comment =
  "C++ Interface:\n"
  "do_physics(const BulletWorld self, float dt, int max_substeps, float stepsize)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_do_physics_791_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyWorldInfo BulletWorld::get_world_info(void)
 */
static PyObject *Dtool_BulletWorld_get_world_info_792(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.get_world_info")) {
    return nullptr;
  }
  // 1-BulletSoftBodyWorldInfo BulletWorld::get_world_info(void)
  BulletSoftBodyWorldInfo *return_value = new BulletSoftBodyWorldInfo(((*local_this).get_world_info)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyWorldInfo, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_world_info_792_comment =
  "C++ Interface:\n"
  "get_world_info(const BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_world_info_792_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::set_debug_node(BulletDebugNode *node)
 */
static PyObject *Dtool_BulletWorld_set_debug_node_793(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.set_debug_node")) {
    return nullptr;
  }
  // 1-void BulletWorld::set_debug_node(BulletDebugNode *node)
  BulletDebugNode *arg_this = (BulletDebugNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletDebugNode, 1, "BulletWorld.set_debug_node", false, true);
  if (arg_this != nullptr) {
    ((*local_this).set_debug_node)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_debug_node(const BulletWorld self, BulletDebugNode node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_set_debug_node_793_comment =
  "C++ Interface:\n"
  "set_debug_node(const BulletWorld self, BulletDebugNode node)\n"
  "\n"
  "// Debug\n"
  "\n"
  "// Debug\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_set_debug_node_793_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::clear_debug_node(void)
 */
static PyObject *Dtool_BulletWorld_clear_debug_node_794(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.clear_debug_node")) {
    return nullptr;
  }
  // 1-void BulletWorld::clear_debug_node(void)
  ((*local_this).clear_debug_node)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_clear_debug_node_794_comment =
  "C++ Interface:\n"
  "clear_debug_node(const BulletWorld self)\n"
  "\n"
  "/**\n"
  " * Removes a debug node that has been assigned to this BulletWorld.\n"
  " */";
#else
static const char *Dtool_BulletWorld_clear_debug_node_794_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline BulletDebugNode *BulletWorld::get_debug_node(void) const
 */
static PyObject *Dtool_BulletWorld_get_debug_node_795(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-inline BulletDebugNode *BulletWorld::get_debug_node(void) const
  BulletDebugNode *return_value = ((*(const BulletWorld*)local_this).get_debug_node)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletDebugNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_debug_node_795_comment =
  "C++ Interface:\n"
  "get_debug_node(BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_debug_node_795_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletWorld::has_debug_node(void) const
 */
static PyObject *Dtool_BulletWorld_has_debug_node_796(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-inline bool BulletWorld::has_debug_node(void) const
  bool return_value = ((*(const BulletWorld*)local_this).has_debug_node)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_has_debug_node_796_comment =
  "C++ Interface:\n"
  "has_debug_node(BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_has_debug_node_796_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach(TypedObject *object)
 */
static PyObject *Dtool_BulletWorld_attach_797(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach")) {
    return nullptr;
  }
  // 1-void BulletWorld::attach(TypedObject *object)
  TypedObject *arg_this = (TypedObject *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_TypedObject, 1, "BulletWorld.attach", false, true);
  if (arg_this != nullptr) {
    ((*local_this).attach)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach(const BulletWorld self, TypedObject object)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_797_comment =
  "C++ Interface:\n"
  "attach(const BulletWorld self, TypedObject object)\n"
  "\n"
  "// AttachRemove\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_797_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove(TypedObject *object)
 */
static PyObject *Dtool_BulletWorld_remove_798(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove")) {
    return nullptr;
  }
  // 1-void BulletWorld::remove(TypedObject *object)
  TypedObject *arg_this = (TypedObject *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_TypedObject, 1, "BulletWorld.remove", false, true);
  if (arg_this != nullptr) {
    ((*local_this).remove)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove(const BulletWorld self, TypedObject object)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_798_comment =
  "C++ Interface:\n"
  "remove(const BulletWorld self, TypedObject object)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_798_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach_constraint(BulletConstraint *constraint, bool linked_collision = false)
 */
static PyObject *Dtool_BulletWorld_attach_constraint_799(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach_constraint")) {
    return nullptr;
  }
  // 1-void BulletWorld::attach_constraint(BulletConstraint *constraint, bool linked_collision = false)
  PyObject *param1;
  PyObject *param2 = Py_False;
  static const char *keyword_list[] = {"constraint", "linked_collision", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:attach_constraint", (char **)keyword_list, &param1, &param2)) {
    BulletConstraint *param1_this = (BulletConstraint *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletConstraint, 1, "BulletWorld.attach_constraint", false, true);
    if (param1_this != nullptr) {
      ((*local_this).attach_constraint)(param1_this, (PyObject_IsTrue(param2) != 0));
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach_constraint(const BulletWorld self, BulletConstraint constraint, bool linked_collision)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_constraint_799_comment =
  "C++ Interface:\n"
  "attach_constraint(const BulletWorld self, BulletConstraint constraint, bool linked_collision)\n"
  "\n"
  "/**\n"
  " * Attaches a single constraint to a world.  Collision checks between the\n"
  " * linked objects will be disabled if the second parameter is set to TRUE.\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_constraint_799_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletWorld::get_num_ghosts(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_ghosts_800(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-int BulletWorld::get_num_ghosts(void) const
  int return_value = ((*(const BulletWorld*)local_this).get_num_ghosts)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_ghosts_800_comment =
  "C++ Interface:\n"
  "get_num_ghosts(BulletWorld self)\n"
  "\n"
  "// Ghost object\n"
  "\n"
  "// Ghost object\n"
  "\n"
  "// Ghost object\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_ghosts_800_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletGhostNode *BulletWorld::get_ghost(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_ghost_801(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-BulletGhostNode *BulletWorld::get_ghost(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletGhostNode *return_value = ((*(const BulletWorld*)local_this).get_ghost)((int)arg_val);
    if (return_value != nullptr) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != nullptr) {
        unref_delete(return_value);
      }
      return nullptr;
    }
    if (return_value == nullptr) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletGhostNode, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_ghost(BulletWorld self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_ghost_801_comment =
  "C++ Interface:\n"
  "get_ghost(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_ghost_801_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletWorld::get_num_rigid_bodies(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_rigid_bodies_803(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-int BulletWorld::get_num_rigid_bodies(void) const
  int return_value = ((*(const BulletWorld*)local_this).get_num_rigid_bodies)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_rigid_bodies_803_comment =
  "C++ Interface:\n"
  "get_num_rigid_bodies(BulletWorld self)\n"
  "\n"
  "// Rigid body\n"
  "\n"
  "// Rigid body\n"
  "\n"
  "// Rigid body\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_rigid_bodies_803_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletRigidBodyNode *BulletWorld::get_rigid_body(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_rigid_body_804(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-BulletRigidBodyNode *BulletWorld::get_rigid_body(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletRigidBodyNode *return_value = ((*(const BulletWorld*)local_this).get_rigid_body)((int)arg_val);
    if (return_value != nullptr) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != nullptr) {
        unref_delete(return_value);
      }
      return nullptr;
    }
    if (return_value == nullptr) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletRigidBodyNode, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_rigid_body(BulletWorld self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_rigid_body_804_comment =
  "C++ Interface:\n"
  "get_rigid_body(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_rigid_body_804_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletWorld::get_num_soft_bodies(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_soft_bodies_806(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-int BulletWorld::get_num_soft_bodies(void) const
  int return_value = ((*(const BulletWorld*)local_this).get_num_soft_bodies)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_soft_bodies_806_comment =
  "C++ Interface:\n"
  "get_num_soft_bodies(BulletWorld self)\n"
  "\n"
  "// Soft body\n"
  "\n"
  "// Soft body\n"
  "\n"
  "// Soft body\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_soft_bodies_806_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyNode *BulletWorld::get_soft_body(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_soft_body_807(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-BulletSoftBodyNode *BulletWorld::get_soft_body(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletSoftBodyNode *return_value = ((*(const BulletWorld*)local_this).get_soft_body)((int)arg_val);
    if (return_value != nullptr) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != nullptr) {
        unref_delete(return_value);
      }
      return nullptr;
    }
    if (return_value == nullptr) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_soft_body(BulletWorld self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_soft_body_807_comment =
  "C++ Interface:\n"
  "get_soft_body(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_soft_body_807_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletWorld::get_num_characters(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_characters_809(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-int BulletWorld::get_num_characters(void) const
  int return_value = ((*(const BulletWorld*)local_this).get_num_characters)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_characters_809_comment =
  "C++ Interface:\n"
  "get_num_characters(BulletWorld self)\n"
  "\n"
  "// Character controller\n"
  "\n"
  "// Character controller\n"
  "\n"
  "// Character controller\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_characters_809_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletBaseCharacterControllerNode *BulletWorld::get_character(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_character_810(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-BulletBaseCharacterControllerNode *BulletWorld::get_character(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletBaseCharacterControllerNode *return_value = ((*(const BulletWorld*)local_this).get_character)((int)arg_val);
    if (return_value != nullptr) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != nullptr) {
        unref_delete(return_value);
      }
      return nullptr;
    }
    if (return_value == nullptr) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletBaseCharacterControllerNode, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_character(BulletWorld self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_character_810_comment =
  "C++ Interface:\n"
  "get_character(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_character_810_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletWorld::get_num_vehicles(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_vehicles_812(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-int BulletWorld::get_num_vehicles(void) const
  int return_value = ((*(const BulletWorld*)local_this).get_num_vehicles)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_vehicles_812_comment =
  "C++ Interface:\n"
  "get_num_vehicles(BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_vehicles_812_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletVehicle *BulletWorld::get_vehicle(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_vehicle_813(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-BulletVehicle *BulletWorld::get_vehicle(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletVehicle *return_value = ((*(const BulletWorld*)local_this).get_vehicle)((int)arg_val);
    if (return_value != nullptr) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != nullptr) {
        unref_delete(return_value);
      }
      return nullptr;
    }
    if (return_value == nullptr) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletVehicle, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_vehicle(BulletWorld self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_vehicle_813_comment =
  "C++ Interface:\n"
  "get_vehicle(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_vehicle_813_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletWorld::get_num_constraints(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_constraints_815(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-int BulletWorld::get_num_constraints(void) const
  int return_value = ((*(const BulletWorld*)local_this).get_num_constraints)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_constraints_815_comment =
  "C++ Interface:\n"
  "get_num_constraints(BulletWorld self)\n"
  "\n"
  "// Constraint\n"
  "\n"
  "// Constraint\n"
  "\n"
  "// Constraint\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_constraints_815_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletConstraint *BulletWorld::get_constraint(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_constraint_816(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-BulletConstraint *BulletWorld::get_constraint(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletConstraint *return_value = ((*(const BulletWorld*)local_this).get_constraint)((int)arg_val);
    if (return_value != nullptr) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != nullptr) {
        unref_delete(return_value);
      }
      return nullptr;
    }
    if (return_value == nullptr) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletConstraint, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_constraint(BulletWorld self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_constraint_816_comment =
  "C++ Interface:\n"
  "get_constraint(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_constraint_816_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletClosestHitRayResult BulletWorld::ray_test_closest(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const
 */
static PyObject *Dtool_BulletWorld_ray_test_closest_818(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-BulletClosestHitRayResult BulletWorld::ray_test_closest(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const
  PyObject *param1;
  PyObject *param2;
  PyObject *param3 = nullptr;
  static const char *keyword_list[] = {"from_pos", "to_pos", "mask", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO|O:ray_test_closest", (char **)keyword_list, &param1, &param2, &param3)) {
    LPoint3f param1_local;
    LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
    if (!(param1_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletWorld.ray_test_closest", "LPoint3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletWorld.ray_test_closest", "LPoint3f");
    }
    BitMask< uint32_t, 32 > param3_local;
    CollideMask const *param3_this;
    if (param3 != nullptr) {
      param3_this = Dtool_Coerce_BitMask_uint32_t_32(param3, param3_local);
    } else {
      param3_local = BitMask< uint32_t, 32 >::all_on();
      param3_this = &param3_local;
    }
    if (param3 != nullptr && !(param3_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param3, 3, "BulletWorld.ray_test_closest", "BitMask");
    }
    BulletClosestHitRayResult *return_value = new BulletClosestHitRayResult(((*(const BulletWorld*)local_this).ray_test_closest)(*param1_this, *param2_this, *param3_this));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletClosestHitRayResult, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "ray_test_closest(BulletWorld self, const LPoint3f from_pos, const LPoint3f to_pos, const BitMask mask)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_ray_test_closest_818_comment =
  "C++ Interface:\n"
  "ray_test_closest(BulletWorld self, const LPoint3f from_pos, const LPoint3f to_pos, const BitMask mask)\n"
  "\n"
  "// Raycast and other queries\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_ray_test_closest_818_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletAllHitsRayResult BulletWorld::ray_test_all(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const
 */
static PyObject *Dtool_BulletWorld_ray_test_all_819(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-BulletAllHitsRayResult BulletWorld::ray_test_all(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const
  PyObject *param1;
  PyObject *param2;
  PyObject *param3 = nullptr;
  static const char *keyword_list[] = {"from_pos", "to_pos", "mask", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO|O:ray_test_all", (char **)keyword_list, &param1, &param2, &param3)) {
    LPoint3f param1_local;
    LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
    if (!(param1_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletWorld.ray_test_all", "LPoint3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletWorld.ray_test_all", "LPoint3f");
    }
    BitMask< uint32_t, 32 > param3_local;
    CollideMask const *param3_this;
    if (param3 != nullptr) {
      param3_this = Dtool_Coerce_BitMask_uint32_t_32(param3, param3_local);
    } else {
      param3_local = BitMask< uint32_t, 32 >::all_on();
      param3_this = &param3_local;
    }
    if (param3 != nullptr && !(param3_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param3, 3, "BulletWorld.ray_test_all", "BitMask");
    }
    BulletAllHitsRayResult *return_value = new BulletAllHitsRayResult(((*(const BulletWorld*)local_this).ray_test_all)(*param1_this, *param2_this, *param3_this));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletAllHitsRayResult, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "ray_test_all(BulletWorld self, const LPoint3f from_pos, const LPoint3f to_pos, const BitMask mask)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_ray_test_all_819_comment =
  "C++ Interface:\n"
  "ray_test_all(BulletWorld self, const LPoint3f from_pos, const LPoint3f to_pos, const BitMask mask)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_ray_test_all_819_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletClosestHitSweepResult BulletWorld::sweep_test_closest(BulletShape *shape, TransformState const &from_ts, TransformState const &to_ts, CollideMask const &mask = CollideMask::all_on(), PN_stdfloat penetration = 0.0) const
 */
static PyObject *Dtool_BulletWorld_sweep_test_closest_820(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-BulletClosestHitSweepResult BulletWorld::sweep_test_closest(BulletShape *shape, TransformState const &from_ts, TransformState const &to_ts, CollideMask const &mask = CollideMask::all_on(), PN_stdfloat penetration = 0.0) const
  PyObject *param1;
  PyObject *param2;
  PyObject *param3;
  PyObject *param4 = nullptr;
  float param5 = 0.0;
  static const char *keyword_list[] = {"shape", "from_ts", "to_ts", "mask", "penetration", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO|Of:sweep_test_closest", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5)) {
    BulletShape *param1_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletShape, 1, "BulletWorld.sweep_test_closest", false, true);
    TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletWorld.sweep_test_closest", true, true);
    TransformState const *param3_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param3, Dtool_Ptr_TransformState, 3, "BulletWorld.sweep_test_closest", true, true);
    BitMask< uint32_t, 32 > param4_local;
    CollideMask const *param4_this;
    if (param4 != nullptr) {
      param4_this = Dtool_Coerce_BitMask_uint32_t_32(param4, param4_local);
    } else {
      param4_local = BitMask< uint32_t, 32 >::all_on();
      param4_this = &param4_local;
    }
    if (param4 != nullptr && !(param4_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param4, 4, "BulletWorld.sweep_test_closest", "BitMask");
    }
    if (param1_this != nullptr && param2_this != nullptr && param3_this != nullptr) {
      BulletClosestHitSweepResult *return_value = new BulletClosestHitSweepResult(((*(const BulletWorld*)local_this).sweep_test_closest)(param1_this, *param2_this, *param3_this, *param4_this, (PN_stdfloat)param5));
      if (return_value == nullptr) {
        return PyErr_NoMemory();
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return nullptr;
      }
      return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletClosestHitSweepResult, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "sweep_test_closest(BulletWorld self, BulletShape shape, const TransformState from_ts, const TransformState to_ts, const BitMask mask, float penetration)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_sweep_test_closest_820_comment =
  "C++ Interface:\n"
  "sweep_test_closest(BulletWorld self, BulletShape shape, const TransformState from_ts, const TransformState to_ts, const BitMask mask, float penetration)\n"
  "\n"
  "/**\n"
  " * Performs a sweep test against all other shapes that match the given group\n"
  " * mask.  The provided shape must be a convex shape; it is an error to invoke\n"
  " * this method using a non-convex shape.\n"
  " */";
#else
static const char *Dtool_BulletWorld_sweep_test_closest_820_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletContactResult BulletWorld::contact_test(PandaNode *node, bool use_filter = false) const
 */
static PyObject *Dtool_BulletWorld_contact_test_821(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-BulletContactResult BulletWorld::contact_test(PandaNode *node, bool use_filter = false) const
  PyObject *param1;
  PyObject *param2 = Py_False;
  static const char *keyword_list[] = {"node", "use_filter", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:contact_test", (char **)keyword_list, &param1, &param2)) {
    PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletWorld.contact_test", false, true);
    if (param1_this != nullptr) {
      BulletContactResult *return_value = new BulletContactResult(((*(const BulletWorld*)local_this).contact_test)(param1_this, (PyObject_IsTrue(param2) != 0)));
      if (return_value == nullptr) {
        return PyErr_NoMemory();
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return nullptr;
      }
      return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletContactResult, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "contact_test(BulletWorld self, PandaNode node, bool use_filter)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_contact_test_821_comment =
  "C++ Interface:\n"
  "contact_test(BulletWorld self, PandaNode node, bool use_filter)\n"
  "\n"
  "/**\n"
  " * Performas a test for all bodies which are currently in contact with the\n"
  " * given body.  The test returns a BulletContactResult object which may\n"
  " * contain zero, one or more contacts.\n"
  " *\n"
  " * If the optional parameter use_filter is set to TRUE this test will consider\n"
  " * filter settings.  Otherwise all objects in contact are reported, no matter\n"
  " * if they would collide or not.\n"
  " */";
#else
static const char *Dtool_BulletWorld_contact_test_821_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletContactResult BulletWorld::contact_test_pair(PandaNode *node0, PandaNode *node1) const
 */
static PyObject *Dtool_BulletWorld_contact_test_pair_822(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-BulletContactResult BulletWorld::contact_test_pair(PandaNode *node0, PandaNode *node1) const
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"node0", "node1", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:contact_test_pair", (char **)keyword_list, &param1, &param2)) {
    PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletWorld.contact_test_pair", false, true);
    PandaNode *param2_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_PandaNode, 2, "BulletWorld.contact_test_pair", false, true);
    if (param1_this != nullptr && param2_this != nullptr) {
      BulletContactResult *return_value = new BulletContactResult(((*(const BulletWorld*)local_this).contact_test_pair)(param1_this, param2_this));
      if (return_value == nullptr) {
        return PyErr_NoMemory();
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return nullptr;
      }
      return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletContactResult, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "contact_test_pair(BulletWorld self, PandaNode node0, PandaNode node1)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_contact_test_pair_822_comment =
  "C++ Interface:\n"
  "contact_test_pair(BulletWorld self, PandaNode node0, PandaNode node1)\n"
  "\n"
  "/**\n"
  " * Performas a test if the two bodies given as parameters are in contact or\n"
  " * not.  The test returns a BulletContactResult object which may contain zero\n"
  " * or one contacts.\n"
  " */";
#else
static const char *Dtool_BulletWorld_contact_test_pair_822_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletWorld::filter_test(PandaNode *node0, PandaNode *node1) const
 */
static PyObject *Dtool_BulletWorld_filter_test_823(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-bool BulletWorld::filter_test(PandaNode *node0, PandaNode *node1) const
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"node0", "node1", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:filter_test", (char **)keyword_list, &param1, &param2)) {
    PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletWorld.filter_test", false, true);
    PandaNode *param2_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_PandaNode, 2, "BulletWorld.filter_test", false, true);
    if (param1_this != nullptr && param2_this != nullptr) {
      bool return_value = ((*(const BulletWorld*)local_this).filter_test)(param1_this, param2_this);
      return Dtool_Return_Bool(return_value);
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "filter_test(BulletWorld self, PandaNode node0, PandaNode node1)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_filter_test_823_comment =
  "C++ Interface:\n"
  "filter_test(BulletWorld self, PandaNode node0, PandaNode node1)\n"
  "\n"
  "/**\n"
  " * Performs a test if two bodies should collide or not, based on the collision\n"
  " * filter setting.\n"
  " */";
#else
static const char *Dtool_BulletWorld_filter_test_823_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletWorld::get_num_manifolds(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_manifolds_824(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-int BulletWorld::get_num_manifolds(void) const
  int return_value = ((*(const BulletWorld*)local_this).get_num_manifolds)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_manifolds_824_comment =
  "C++ Interface:\n"
  "get_num_manifolds(BulletWorld self)\n"
  "\n"
  "// Manifolds\n"
  "\n"
  "// Manifolds\n"
  "\n"
  "// Manifolds\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_manifolds_824_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletPersistentManifold *BulletWorld::get_manifold(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_manifold_825(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-BulletPersistentManifold *BulletWorld::get_manifold(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletPersistentManifold *return_value = ((*(const BulletWorld*)local_this).get_manifold)((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletPersistentManifold, false, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_manifold(BulletWorld self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_manifold_825_comment =
  "C++ Interface:\n"
  "get_manifold(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_manifold_825_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::set_group_collision_flag(unsigned int group1, unsigned int group2, bool enable)
 */
static PyObject *Dtool_BulletWorld_set_group_collision_flag_827(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.set_group_collision_flag")) {
    return nullptr;
  }
  // 1-void BulletWorld::set_group_collision_flag(unsigned int group1, unsigned int group2, bool enable)
  unsigned long param1;
  unsigned long param2;
  PyObject *param3;
  static const char *keyword_list[] = {"group1", "group2", "enable", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "kkO:set_group_collision_flag", (char **)keyword_list, &param1, &param2, &param3)) {
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (param1 > UINT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %lu out of range for unsigned integer",
                          param1);
    }
#endif
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (param2 > UINT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %lu out of range for unsigned integer",
                          param2);
    }
#endif
    ((*local_this).set_group_collision_flag)((unsigned int)param1, (unsigned int)param2, (PyObject_IsTrue(param3) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_group_collision_flag(const BulletWorld self, int group1, int group2, bool enable)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_set_group_collision_flag_827_comment =
  "C++ Interface:\n"
  "set_group_collision_flag(const BulletWorld self, int group1, int group2, bool enable)\n"
  "\n"
  "// Collision filtering\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_set_group_collision_flag_827_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletWorld::get_group_collision_flag(unsigned int group1, unsigned int group2) const
 */
static PyObject *Dtool_BulletWorld_get_group_collision_flag_828(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-bool BulletWorld::get_group_collision_flag(unsigned int group1, unsigned int group2) const
  unsigned long param1;
  unsigned long param2;
  static const char *keyword_list[] = {"group1", "group2", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "kk:get_group_collision_flag", (char **)keyword_list, &param1, &param2)) {
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (param1 > UINT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %lu out of range for unsigned integer",
                          param1);
    }
#endif
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (param2 > UINT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %lu out of range for unsigned integer",
                          param2);
    }
#endif
    bool return_value = ((*(const BulletWorld*)local_this).get_group_collision_flag)((unsigned int)param1, (unsigned int)param2);
    return Dtool_Return_Bool(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_group_collision_flag(BulletWorld self, int group1, int group2)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_group_collision_flag_828_comment =
  "C++ Interface:\n"
  "get_group_collision_flag(BulletWorld self, int group1, int group2)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_group_collision_flag_828_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::set_force_update_all_aabbs(bool force)
 */
static PyObject *Dtool_BulletWorld_set_force_update_all_aabbs_829(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.set_force_update_all_aabbs")) {
    return nullptr;
  }
  // 1-void BulletWorld::set_force_update_all_aabbs(bool force)
  ((*local_this).set_force_update_all_aabbs)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_force_update_all_aabbs(const BulletWorld self, bool force)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_set_force_update_all_aabbs_829_comment =
  "C++ Interface:\n"
  "set_force_update_all_aabbs(const BulletWorld self, bool force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_set_force_update_all_aabbs_829_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletWorld::get_force_update_all_aabbs(void) const
 */
static PyObject *Dtool_BulletWorld_get_force_update_all_aabbs_830(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletWorld)) {
    return nullptr;
  }
  // 1-bool BulletWorld::get_force_update_all_aabbs(void) const
  bool return_value = ((*(const BulletWorld*)local_this).get_force_update_all_aabbs)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_force_update_all_aabbs_830_comment =
  "C++ Interface:\n"
  "get_force_update_all_aabbs(BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_force_update_all_aabbs_830_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::set_contact_added_callback(CallbackObject *obj)
 */
static PyObject *Dtool_BulletWorld_set_contact_added_callback_831(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.set_contact_added_callback")) {
    return nullptr;
  }
  // 1-void BulletWorld::set_contact_added_callback(CallbackObject *obj)
  PT(CallbackObject) arg_this;
  if (!Dtool_Coerce_CallbackObject(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.set_contact_added_callback", "CallbackObject");
  }
  ((*local_this).set_contact_added_callback)(std::move(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_contact_added_callback(const BulletWorld self, CallbackObject obj)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_set_contact_added_callback_831_comment =
  "C++ Interface:\n"
  "set_contact_added_callback(const BulletWorld self, CallbackObject obj)\n"
  "\n"
  "// Callbacks\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_set_contact_added_callback_831_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::clear_contact_added_callback(void)
 */
static PyObject *Dtool_BulletWorld_clear_contact_added_callback_832(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.clear_contact_added_callback")) {
    return nullptr;
  }
  // 1-void BulletWorld::clear_contact_added_callback(void)
  ((*local_this).clear_contact_added_callback)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_clear_contact_added_callback_832_comment =
  "C++ Interface:\n"
  "clear_contact_added_callback(const BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_clear_contact_added_callback_832_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::set_tick_callback(CallbackObject *obj, bool is_pretick = false)
 */
static PyObject *Dtool_BulletWorld_set_tick_callback_833(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.set_tick_callback")) {
    return nullptr;
  }
  // 1-void BulletWorld::set_tick_callback(CallbackObject *obj, bool is_pretick = false)
  PyObject *param1;
  PyObject *param2 = Py_False;
  static const char *keyword_list[] = {"obj", "is_pretick", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:set_tick_callback", (char **)keyword_list, &param1, &param2)) {
    PT(CallbackObject) param1_this;
    if (!Dtool_Coerce_CallbackObject(param1, param1_this)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletWorld.set_tick_callback", "CallbackObject");
    }
    ((*local_this).set_tick_callback)(std::move(param1_this), (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_tick_callback(const BulletWorld self, CallbackObject obj, bool is_pretick)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_set_tick_callback_833_comment =
  "C++ Interface:\n"
  "set_tick_callback(const BulletWorld self, CallbackObject obj, bool is_pretick)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_set_tick_callback_833_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::clear_tick_callback(void)
 */
static PyObject *Dtool_BulletWorld_clear_tick_callback_834(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.clear_tick_callback")) {
    return nullptr;
  }
  // 1-void BulletWorld::clear_tick_callback(void)
  ((*local_this).clear_tick_callback)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_clear_tick_callback_834_comment =
  "C++ Interface:\n"
  "clear_tick_callback(const BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_clear_tick_callback_834_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::set_filter_callback(CallbackObject *obj)
 */
static PyObject *Dtool_BulletWorld_set_filter_callback_835(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.set_filter_callback")) {
    return nullptr;
  }
  // 1-void BulletWorld::set_filter_callback(CallbackObject *obj)
  PT(CallbackObject) arg_this;
  if (!Dtool_Coerce_CallbackObject(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.set_filter_callback", "CallbackObject");
  }
  ((*local_this).set_filter_callback)(std::move(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_filter_callback(const BulletWorld self, CallbackObject obj)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_set_filter_callback_835_comment =
  "C++ Interface:\n"
  "set_filter_callback(const BulletWorld self, CallbackObject obj)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_set_filter_callback_835_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::clear_filter_callback(void)
 */
static PyObject *Dtool_BulletWorld_clear_filter_callback_836(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.clear_filter_callback")) {
    return nullptr;
  }
  // 1-void BulletWorld::clear_filter_callback(void)
  ((*local_this).clear_filter_callback)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_clear_filter_callback_836_comment =
  "C++ Interface:\n"
  "clear_filter_callback(const BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_clear_filter_callback_836_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach_ghost(BulletGhostNode *node)
 */
static PyObject *Dtool_BulletWorld_attach_ghost_874(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach_ghost")) {
    return nullptr;
  }
  // 1-void BulletWorld::attach_ghost(BulletGhostNode *node)
  BulletGhostNode *arg_this = (BulletGhostNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletGhostNode, 1, "BulletWorld.attach_ghost", false, true);
  if (arg_this != nullptr) {
    ((*local_this).attach_ghost)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach_ghost(const BulletWorld self, BulletGhostNode node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_ghost_874_comment =
  "C++ Interface:\n"
  "attach_ghost(const BulletWorld self, BulletGhostNode node)\n"
  "\n"
  "// Deprecated methods, will be removed soon\n"
  "\n"
  "/**\n"
  " * @deprecated Please use BulletWorld::attach\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_ghost_874_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove_ghost(BulletGhostNode *node)
 */
static PyObject *Dtool_BulletWorld_remove_ghost_875(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove_ghost")) {
    return nullptr;
  }
  // 1-void BulletWorld::remove_ghost(BulletGhostNode *node)
  BulletGhostNode *arg_this = (BulletGhostNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletGhostNode, 1, "BulletWorld.remove_ghost", false, true);
  if (arg_this != nullptr) {
    ((*local_this).remove_ghost)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_ghost(const BulletWorld self, BulletGhostNode node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_ghost_875_comment =
  "C++ Interface:\n"
  "remove_ghost(const BulletWorld self, BulletGhostNode node)\n"
  "\n"
  "/**\n"
  " * @deprecated Please use BulletWorld::remove\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_ghost_875_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach_rigid_body(BulletRigidBodyNode *node)
 */
static PyObject *Dtool_BulletWorld_attach_rigid_body_876(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach_rigid_body")) {
    return nullptr;
  }
  // 1-void BulletWorld::attach_rigid_body(BulletRigidBodyNode *node)
  BulletRigidBodyNode *arg_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletWorld.attach_rigid_body", false, true);
  if (arg_this != nullptr) {
    ((*local_this).attach_rigid_body)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach_rigid_body(const BulletWorld self, BulletRigidBodyNode node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_rigid_body_876_comment =
  "C++ Interface:\n"
  "attach_rigid_body(const BulletWorld self, BulletRigidBodyNode node)\n"
  "\n"
  "/**\n"
  " * @deprecated Please use BulletWorld::attach\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_rigid_body_876_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove_rigid_body(BulletRigidBodyNode *node)
 */
static PyObject *Dtool_BulletWorld_remove_rigid_body_877(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove_rigid_body")) {
    return nullptr;
  }
  // 1-void BulletWorld::remove_rigid_body(BulletRigidBodyNode *node)
  BulletRigidBodyNode *arg_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletWorld.remove_rigid_body", false, true);
  if (arg_this != nullptr) {
    ((*local_this).remove_rigid_body)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_rigid_body(const BulletWorld self, BulletRigidBodyNode node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_rigid_body_877_comment =
  "C++ Interface:\n"
  "remove_rigid_body(const BulletWorld self, BulletRigidBodyNode node)\n"
  "\n"
  "/**\n"
  " * @deprecated Please use BulletWorld::remove\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_rigid_body_877_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach_soft_body(BulletSoftBodyNode *node)
 */
static PyObject *Dtool_BulletWorld_attach_soft_body_878(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach_soft_body")) {
    return nullptr;
  }
  // 1-void BulletWorld::attach_soft_body(BulletSoftBodyNode *node)
  BulletSoftBodyNode *arg_this = (BulletSoftBodyNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletSoftBodyNode, 1, "BulletWorld.attach_soft_body", false, true);
  if (arg_this != nullptr) {
    ((*local_this).attach_soft_body)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach_soft_body(const BulletWorld self, BulletSoftBodyNode node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_soft_body_878_comment =
  "C++ Interface:\n"
  "attach_soft_body(const BulletWorld self, BulletSoftBodyNode node)\n"
  "\n"
  "/**\n"
  " * @deprecated Please use BulletWorld::attach\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_soft_body_878_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove_soft_body(BulletSoftBodyNode *node)
 */
static PyObject *Dtool_BulletWorld_remove_soft_body_879(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove_soft_body")) {
    return nullptr;
  }
  // 1-void BulletWorld::remove_soft_body(BulletSoftBodyNode *node)
  BulletSoftBodyNode *arg_this = (BulletSoftBodyNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletSoftBodyNode, 1, "BulletWorld.remove_soft_body", false, true);
  if (arg_this != nullptr) {
    ((*local_this).remove_soft_body)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_soft_body(const BulletWorld self, BulletSoftBodyNode node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_soft_body_879_comment =
  "C++ Interface:\n"
  "remove_soft_body(const BulletWorld self, BulletSoftBodyNode node)\n"
  "\n"
  "/**\n"
  " * @deprecated Please use BulletWorld::remove\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_soft_body_879_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach_character(BulletBaseCharacterControllerNode *node)
 */
static PyObject *Dtool_BulletWorld_attach_character_880(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach_character")) {
    return nullptr;
  }
  // 1-void BulletWorld::attach_character(BulletBaseCharacterControllerNode *node)
  BulletBaseCharacterControllerNode *arg_this = (BulletBaseCharacterControllerNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletBaseCharacterControllerNode, 1, "BulletWorld.attach_character", false, true);
  if (arg_this != nullptr) {
    ((*local_this).attach_character)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach_character(const BulletWorld self, BulletBaseCharacterControllerNode node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_character_880_comment =
  "C++ Interface:\n"
  "attach_character(const BulletWorld self, BulletBaseCharacterControllerNode node)\n"
  "\n"
  "/**\n"
  " * @deprecated Please use BulletWorld::attach\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_character_880_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove_character(BulletBaseCharacterControllerNode *node)
 */
static PyObject *Dtool_BulletWorld_remove_character_881(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove_character")) {
    return nullptr;
  }
  // 1-void BulletWorld::remove_character(BulletBaseCharacterControllerNode *node)
  BulletBaseCharacterControllerNode *arg_this = (BulletBaseCharacterControllerNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletBaseCharacterControllerNode, 1, "BulletWorld.remove_character", false, true);
  if (arg_this != nullptr) {
    ((*local_this).remove_character)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_character(const BulletWorld self, BulletBaseCharacterControllerNode node)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_character_881_comment =
  "C++ Interface:\n"
  "remove_character(const BulletWorld self, BulletBaseCharacterControllerNode node)\n"
  "\n"
  "/**\n"
  " * @deprecated Please use BulletWorld::remove\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_character_881_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach_vehicle(BulletVehicle *vehicle)
 */
static PyObject *Dtool_BulletWorld_attach_vehicle_882(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach_vehicle")) {
    return nullptr;
  }
  // 1-void BulletWorld::attach_vehicle(BulletVehicle *vehicle)
  PT(BulletVehicle) arg_this;
  if (!Dtool_Coerce_BulletVehicle(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.attach_vehicle", "BulletVehicle");
  }
  ((*local_this).attach_vehicle)(std::move(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach_vehicle(const BulletWorld self, BulletVehicle vehicle)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_vehicle_882_comment =
  "C++ Interface:\n"
  "attach_vehicle(const BulletWorld self, BulletVehicle vehicle)\n"
  "\n"
  "/**\n"
  " * @deprecated Please use BulletWorld::attach\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_vehicle_882_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove_vehicle(BulletVehicle *vehicle)
 */
static PyObject *Dtool_BulletWorld_remove_vehicle_883(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove_vehicle")) {
    return nullptr;
  }
  // 1-void BulletWorld::remove_vehicle(BulletVehicle *vehicle)
  PT(BulletVehicle) arg_this;
  if (!Dtool_Coerce_BulletVehicle(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.remove_vehicle", "BulletVehicle");
  }
  ((*local_this).remove_vehicle)(std::move(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_vehicle(const BulletWorld self, BulletVehicle vehicle)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_vehicle_883_comment =
  "C++ Interface:\n"
  "remove_vehicle(const BulletWorld self, BulletVehicle vehicle)\n"
  "\n"
  "/**\n"
  " * @deprecated Please use BulletWorld::remove\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_vehicle_883_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove_constraint(BulletConstraint *constraint)
 */
static PyObject *Dtool_BulletWorld_remove_constraint_884(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove_constraint")) {
    return nullptr;
  }
  // 1-void BulletWorld::remove_constraint(BulletConstraint *constraint)
  BulletConstraint *arg_this = (BulletConstraint *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletConstraint, 1, "BulletWorld.remove_constraint", false, true);
  if (arg_this != nullptr) {
    ((*local_this).remove_constraint)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_constraint(const BulletWorld self, BulletConstraint constraint)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_constraint_884_comment =
  "C++ Interface:\n"
  "remove_constraint(const BulletWorld self, BulletConstraint constraint)\n"
  "\n"
  "/**\n"
  " * @deprecated Please use BulletWorld::remove\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_constraint_884_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletWorld::get_class_type(void)
 */
static PyObject *Dtool_BulletWorld_get_class_type_885(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletWorld::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletWorld::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_class_type_885_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletWorld_get_class_type_885_comment = nullptr;
#endif

static PyObject *Dtool_BulletWorld_gravity_Getter(PyObject *self, void *) {
  const BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 const BulletWorld::get_gravity(void) const
  LVector3 const *return_value = new LVector3 const(((*(const BulletWorld*)local_this).get_gravity)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, true);
}

static int Dtool_BulletWorld_gravity_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.gravity")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete gravity attribute");
    return -1;
  }
  // 1-void BulletWorld::set_gravity(LVector3 const &gravity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.set_gravity", "LVector3f");
    return -1;
  }
  ((*local_this).set_gravity)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_gravity(const BulletWorld self, const LVector3f gravity)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletWorld_world_info_Getter(PyObject *self, void *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.world_info")) {
    return nullptr;
  }

  // 1-BulletSoftBodyWorldInfo BulletWorld::get_world_info(void)
  BulletSoftBodyWorldInfo *return_value = new BulletSoftBodyWorldInfo(((*local_this).get_world_info)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyWorldInfo, true, false);
}

static PyObject *Dtool_BulletWorld_debug_node_Getter(PyObject *self, void *) {
  const BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }

  if (!local_this->has_debug_node()) {
    Py_INCREF(Py_None);
    return Py_None;
  }
  // 1-inline BulletDebugNode *BulletWorld::get_debug_node(void) const
  BulletDebugNode *return_value = ((*(const BulletWorld*)local_this).get_debug_node)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletDebugNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static int Dtool_BulletWorld_debug_node_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.debug_node")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete debug_node attribute");
    return -1;
  }
  if (arg == Py_None) {
    local_this->clear_debug_node();
    return 0;
  }
  // 1-void BulletWorld::set_debug_node(BulletDebugNode *node)
  BulletDebugNode *arg_this = (BulletDebugNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletDebugNode, 1, "BulletWorld.set_debug_node", false, true);
  if (arg_this != nullptr) {
    ((*local_this).set_debug_node)(arg_this);
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_debug_node(const BulletWorld self, BulletDebugNode node)\n");
  }
  return -1;
}

/**
 * sequence length function for property BulletWorld::ghosts
 */
static Py_ssize_t Dtool_BulletWorld_ghosts_Len(PyObject *self) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_ghosts)();
}

/**
 * sequence getter for property BulletWorld::ghosts
 */
static PyObject *Dtool_BulletWorld_ghosts_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_ghosts)()) {
    PyErr_SetString(PyExc_IndexError, "BulletWorld.ghosts[] index out of range");
    return nullptr;
  }
  // 1-BulletGhostNode *BulletWorld::get_ghost(int idx) const
  BulletGhostNode *return_value = ((*(const BulletWorld*)local_this).get_ghost)(index);
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletGhostNode, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_ghost(BulletWorld self, index)\n");
  }
}

static PyObject *Dtool_BulletWorld_ghosts_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletWorld.ghosts");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletWorld_ghosts_Len;
    wrap->_getitem_func = &Dtool_BulletWorld_ghosts_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * sequence length function for property BulletWorld::rigid_bodies
 */
static Py_ssize_t Dtool_BulletWorld_rigid_bodies_Len(PyObject *self) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_rigid_bodies)();
}

/**
 * sequence getter for property BulletWorld::rigid_bodies
 */
static PyObject *Dtool_BulletWorld_rigid_bodies_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_rigid_bodies)()) {
    PyErr_SetString(PyExc_IndexError, "BulletWorld.rigid_bodies[] index out of range");
    return nullptr;
  }
  // 1-BulletRigidBodyNode *BulletWorld::get_rigid_body(int idx) const
  BulletRigidBodyNode *return_value = ((*(const BulletWorld*)local_this).get_rigid_body)(index);
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletRigidBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_rigid_body(BulletWorld self, index)\n");
  }
}

static PyObject *Dtool_BulletWorld_rigid_bodies_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletWorld.rigid_bodies");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletWorld_rigid_bodies_Len;
    wrap->_getitem_func = &Dtool_BulletWorld_rigid_bodies_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * sequence length function for property BulletWorld::soft_bodies
 */
static Py_ssize_t Dtool_BulletWorld_soft_bodies_Len(PyObject *self) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_soft_bodies)();
}

/**
 * sequence getter for property BulletWorld::soft_bodies
 */
static PyObject *Dtool_BulletWorld_soft_bodies_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_soft_bodies)()) {
    PyErr_SetString(PyExc_IndexError, "BulletWorld.soft_bodies[] index out of range");
    return nullptr;
  }
  // 1-BulletSoftBodyNode *BulletWorld::get_soft_body(int idx) const
  BulletSoftBodyNode *return_value = ((*(const BulletWorld*)local_this).get_soft_body)(index);
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_soft_body(BulletWorld self, index)\n");
  }
}

static PyObject *Dtool_BulletWorld_soft_bodies_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletWorld.soft_bodies");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletWorld_soft_bodies_Len;
    wrap->_getitem_func = &Dtool_BulletWorld_soft_bodies_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * sequence length function for property BulletWorld::characters
 */
static Py_ssize_t Dtool_BulletWorld_characters_Len(PyObject *self) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_characters)();
}

/**
 * sequence getter for property BulletWorld::characters
 */
static PyObject *Dtool_BulletWorld_characters_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_characters)()) {
    PyErr_SetString(PyExc_IndexError, "BulletWorld.characters[] index out of range");
    return nullptr;
  }
  // 1-BulletBaseCharacterControllerNode *BulletWorld::get_character(int idx) const
  BulletBaseCharacterControllerNode *return_value = ((*(const BulletWorld*)local_this).get_character)(index);
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletBaseCharacterControllerNode, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_character(BulletWorld self, index)\n");
  }
}

static PyObject *Dtool_BulletWorld_characters_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletWorld.characters");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletWorld_characters_Len;
    wrap->_getitem_func = &Dtool_BulletWorld_characters_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * sequence length function for property BulletWorld::vehicles
 */
static Py_ssize_t Dtool_BulletWorld_vehicles_Len(PyObject *self) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_vehicles)();
}

/**
 * sequence getter for property BulletWorld::vehicles
 */
static PyObject *Dtool_BulletWorld_vehicles_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_vehicles)()) {
    PyErr_SetString(PyExc_IndexError, "BulletWorld.vehicles[] index out of range");
    return nullptr;
  }
  // 1-BulletVehicle *BulletWorld::get_vehicle(int idx) const
  BulletVehicle *return_value = ((*(const BulletWorld*)local_this).get_vehicle)(index);
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletVehicle, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_vehicle(BulletWorld self, index)\n");
  }
}

static PyObject *Dtool_BulletWorld_vehicles_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletWorld.vehicles");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletWorld_vehicles_Len;
    wrap->_getitem_func = &Dtool_BulletWorld_vehicles_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * sequence length function for property BulletWorld::constraints
 */
static Py_ssize_t Dtool_BulletWorld_constraints_Len(PyObject *self) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_constraints)();
}

/**
 * sequence getter for property BulletWorld::constraints
 */
static PyObject *Dtool_BulletWorld_constraints_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_constraints)()) {
    PyErr_SetString(PyExc_IndexError, "BulletWorld.constraints[] index out of range");
    return nullptr;
  }
  // 1-BulletConstraint *BulletWorld::get_constraint(int idx) const
  BulletConstraint *return_value = ((*(const BulletWorld*)local_this).get_constraint)(index);
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletConstraint, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_constraint(BulletWorld self, index)\n");
  }
}

static PyObject *Dtool_BulletWorld_constraints_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletWorld.constraints");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletWorld_constraints_Len;
    wrap->_getitem_func = &Dtool_BulletWorld_constraints_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * sequence length function for property BulletWorld::manifolds
 */
static Py_ssize_t Dtool_BulletWorld_manifolds_Len(PyObject *self) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_manifolds)();
}

/**
 * sequence getter for property BulletWorld::manifolds
 */
static PyObject *Dtool_BulletWorld_manifolds_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_manifolds)()) {
    PyErr_SetString(PyExc_IndexError, "BulletWorld.manifolds[] index out of range");
    return nullptr;
  }
  // 1-BulletPersistentManifold *BulletWorld::get_manifold(int idx) const
  BulletPersistentManifold *return_value = ((*(const BulletWorld*)local_this).get_manifold)(index);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletPersistentManifold, false, false);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_manifold(BulletWorld self, index)\n");
  }
}

static PyObject *Dtool_BulletWorld_manifolds_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletWorld.manifolds");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletWorld_manifolds_Len;
    wrap->_getitem_func = &Dtool_BulletWorld_manifolds_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

static PyObject *Dtool_BulletWorld_force_update_all_aabbs_Getter(PyObject *self, void *) {
  const BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletWorld::get_force_update_all_aabbs(void) const
  bool return_value = ((*(const BulletWorld*)local_this).get_force_update_all_aabbs)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletWorld_force_update_all_aabbs_Setter(PyObject *self, PyObject *arg, void *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.force_update_all_aabbs")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete force_update_all_aabbs attribute");
    return -1;
  }
  // 1-void BulletWorld::set_force_update_all_aabbs(bool force)
  ((*local_this).set_force_update_all_aabbs)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_force_update_all_aabbs(const BulletWorld self, bool force)\n");
  }
  return -1;
}

/**
 * Python function wrapper for:
 * BulletWorld::BulletWorld(void)
 */
static int Dtool_Init_BulletWorld(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletWorld() takes no keyword arguments");
    return -1;
#endif
  }
  if (!Dtool_CheckNoArgs(args)) {
    const int parameter_count = (int)PyTuple_GET_SIZE(args);
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no arguments");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletWorld() takes no arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  // 1-BulletWorld::BulletWorld(void)
  BulletWorld *return_value = new BulletWorld();
  if (return_value == nullptr) {
    PyErr_NoMemory();
    return -1;
  }
  return_value->ref();
  if (Dtool_CheckErrorOccurred()) {
    unref_delete(return_value);
    return -1;
  }
  return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletWorld, true, false);
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletWorld()\n");
  }
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_ghosts(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_ghosts)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_ghost_801(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_rigid_bodies(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_rigid_bodies)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_rigid_body_804(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_soft_bodies(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_soft_bodies)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_soft_body_807(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_characters(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_characters)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_character_810(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_vehicles(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_vehicles)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_vehicle_813(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_constraints(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_constraints)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_constraint_816(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_manifolds(PyObject *self, PyObject *) {
  BulletWorld *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_manifolds)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_manifold_825(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletWorld(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletWorld) {
    printf("BulletWorld ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletWorld *local_this = (BulletWorld *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletWorld) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletWorld(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletWorld) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletWorld*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletWorld*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletWorld*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletPersistentManifold
 */
/**
 * Python function wrapper for:
 * PandaNode *BulletPersistentManifold::get_node0(void)
 */
static PyObject *Dtool_BulletPersistentManifold_get_node0_858(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletPersistentManifold, (void **)&local_this, "BulletPersistentManifold.get_node0")) {
    return nullptr;
  }
  // 1-PandaNode *BulletPersistentManifold::get_node0(void)
  PandaNode *return_value = ((*local_this).get_node0)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_get_node0_858_comment =
  "C++ Interface:\n"
  "get_node0(const BulletPersistentManifold self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_get_node0_858_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PandaNode *BulletPersistentManifold::get_node1(void)
 */
static PyObject *Dtool_BulletPersistentManifold_get_node1_859(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletPersistentManifold, (void **)&local_this, "BulletPersistentManifold.get_node1")) {
    return nullptr;
  }
  // 1-PandaNode *BulletPersistentManifold::get_node1(void)
  PandaNode *return_value = ((*local_this).get_node1)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_get_node1_859_comment =
  "C++ Interface:\n"
  "get_node1(const BulletPersistentManifold self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_get_node1_859_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletPersistentManifold::get_num_manifold_points(void) const
 */
static PyObject *Dtool_BulletPersistentManifold_get_num_manifold_points_860(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletPersistentManifold)) {
    return nullptr;
  }
  // 1-int BulletPersistentManifold::get_num_manifold_points(void) const
  int return_value = ((*(const BulletPersistentManifold*)local_this).get_num_manifold_points)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_get_num_manifold_points_860_comment =
  "C++ Interface:\n"
  "get_num_manifold_points(BulletPersistentManifold self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_get_num_manifold_points_860_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletManifoldPoint *BulletPersistentManifold::get_manifold_point(int idx) const
 */
static PyObject *Dtool_BulletPersistentManifold_get_manifold_point_861(PyObject *self, PyObject *arg) {
  BulletPersistentManifold *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletPersistentManifold)) {
    return nullptr;
  }
  // 1-BulletManifoldPoint *BulletPersistentManifold::get_manifold_point(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletManifoldPoint *return_value = ((*(const BulletPersistentManifold*)local_this).get_manifold_point)((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletManifoldPoint, false, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_manifold_point(BulletPersistentManifold self, int idx)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_get_manifold_point_861_comment =
  "C++ Interface:\n"
  "get_manifold_point(BulletPersistentManifold self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_get_manifold_point_861_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletPersistentManifold::get_contact_breaking_threshold(void) const
 */
static PyObject *Dtool_BulletPersistentManifold_get_contact_breaking_threshold_863(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletPersistentManifold)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletPersistentManifold::get_contact_breaking_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletPersistentManifold*)local_this).get_contact_breaking_threshold)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_get_contact_breaking_threshold_863_comment =
  "C++ Interface:\n"
  "get_contact_breaking_threshold(BulletPersistentManifold self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_get_contact_breaking_threshold_863_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletPersistentManifold::get_contact_processing_threshold(void) const
 */
static PyObject *Dtool_BulletPersistentManifold_get_contact_processing_threshold_864(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletPersistentManifold)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletPersistentManifold::get_contact_processing_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletPersistentManifold*)local_this).get_contact_processing_threshold)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_get_contact_processing_threshold_864_comment =
  "C++ Interface:\n"
  "get_contact_processing_threshold(BulletPersistentManifold self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_get_contact_processing_threshold_864_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletPersistentManifold::clear_manifold(void)
 */
static PyObject *Dtool_BulletPersistentManifold_clear_manifold_865(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletPersistentManifold, (void **)&local_this, "BulletPersistentManifold.clear_manifold")) {
    return nullptr;
  }
  // 1-void BulletPersistentManifold::clear_manifold(void)
  ((*local_this).clear_manifold)();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_clear_manifold_865_comment =
  "C++ Interface:\n"
  "clear_manifold(const BulletPersistentManifold self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_clear_manifold_865_comment = nullptr;
#endif

static PyObject *Dtool_BulletPersistentManifold_node0_Getter(PyObject *self, void *) {
  BulletPersistentManifold *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletPersistentManifold, (void **)&local_this, "BulletPersistentManifold.node0")) {
    return nullptr;
  }

  // 1-PandaNode *BulletPersistentManifold::get_node0(void)
  PandaNode *return_value = ((*local_this).get_node0)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletPersistentManifold_node1_Getter(PyObject *self, void *) {
  BulletPersistentManifold *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletPersistentManifold, (void **)&local_this, "BulletPersistentManifold.node1")) {
    return nullptr;
  }

  // 1-PandaNode *BulletPersistentManifold::get_node1(void)
  PandaNode *return_value = ((*local_this).get_node1)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

/**
 * sequence length function for property BulletPersistentManifold::manifold_points
 */
static Py_ssize_t Dtool_BulletPersistentManifold_manifold_points_Len(PyObject *self) {
  BulletPersistentManifold *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPersistentManifold, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_manifold_points)();
}

/**
 * sequence getter for property BulletPersistentManifold::manifold_points
 */
static PyObject *Dtool_BulletPersistentManifold_manifold_points_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletPersistentManifold *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPersistentManifold, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_manifold_points)()) {
    PyErr_SetString(PyExc_IndexError, "BulletPersistentManifold.manifold_points[] index out of range");
    return nullptr;
  }
  // 1-BulletManifoldPoint *BulletPersistentManifold::get_manifold_point(int idx) const
  BulletManifoldPoint *return_value = ((*(const BulletPersistentManifold*)local_this).get_manifold_point)(index);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletManifoldPoint, false, false);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_manifold_point(BulletPersistentManifold self, index)\n");
  }
}

static PyObject *Dtool_BulletPersistentManifold_manifold_points_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletPersistentManifold.manifold_points");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletPersistentManifold_manifold_points_Len;
    wrap->_getitem_func = &Dtool_BulletPersistentManifold_manifold_points_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

static PyObject *Dtool_BulletPersistentManifold_contact_breaking_threshold_Getter(PyObject *self, void *) {
  const BulletPersistentManifold *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPersistentManifold, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletPersistentManifold::get_contact_breaking_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletPersistentManifold*)local_this).get_contact_breaking_threshold)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletPersistentManifold_contact_processing_threshold_Getter(PyObject *self, void *) {
  const BulletPersistentManifold *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPersistentManifold, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletPersistentManifold::get_contact_processing_threshold(void) const
  PN_stdfloat return_value = ((*(const BulletPersistentManifold*)local_this).get_contact_processing_threshold)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * inline BulletPersistentManifold::BulletPersistentManifold(BulletPersistentManifold const &) = default
 */
static int Dtool_Init_BulletPersistentManifold(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletPersistentManifold() takes no keyword arguments");
    return -1;
#endif
  }
  // 1-inline BulletPersistentManifold::BulletPersistentManifold(BulletPersistentManifold const &) = default
  PyObject *param0;
  if (PyTuple_GET_SIZE(args) == 1) {
    param0 = PyTuple_GET_ITEM(args, 0);
    BulletPersistentManifold const *param0_this = (BulletPersistentManifold *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletPersistentManifold, 0, "BulletPersistentManifold.BulletPersistentManifold", true, true);
    if (param0_this != nullptr) {
      BulletPersistentManifold *return_value = new BulletPersistentManifold(*param0_this);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletPersistentManifold, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletPersistentManifold(const BulletPersistentManifold param0)\n");
  }
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletPersistentManifold_get_manifold_points(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPersistentManifold, (void **)&local_this)) {
    return nullptr;
  }
  Py_ssize_t count = (Py_ssize_t)((*local_this).get_num_manifold_points)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletPersistentManifold_get_manifold_point_861(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletPersistentManifold(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletPersistentManifold) {
    printf("BulletPersistentManifold ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletPersistentManifold *local_this = (BulletPersistentManifold *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletPersistentManifold) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletPersistentManifold(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletPersistentManifold) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletConvexHullShape
 */
/**
 * Python function wrapper for:
 * void BulletConvexHullShape::add_point(LPoint3 const &p)
 */
static PyObject *Dtool_BulletConvexHullShape_add_point_888(PyObject *self, PyObject *arg) {
  BulletConvexHullShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConvexHullShape, (void **)&local_this, "BulletConvexHullShape.add_point")) {
    return nullptr;
  }
  // 1-void BulletConvexHullShape::add_point(LPoint3 const &p)
  LPoint3f arg_local;
  LPoint3 const *arg_this = Dtool_Coerce_LPoint3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletConvexHullShape.add_point", "LPoint3f");
  }
  ((*local_this).add_point)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_point(const BulletConvexHullShape self, const LPoint3f p)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexHullShape_add_point_888_comment =
  "C++ Interface:\n"
  "add_point(const BulletConvexHullShape self, const LPoint3f p)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConvexHullShape_add_point_888_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletConvexHullShape::add_array(PTA_LVecBase3 const &points)
 */
static PyObject *Dtool_BulletConvexHullShape_add_array_889(PyObject *self, PyObject *arg) {
  BulletConvexHullShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConvexHullShape, (void **)&local_this, "BulletConvexHullShape.add_array")) {
    return nullptr;
  }
  // 1-void BulletConvexHullShape::add_array(PTA_LVecBase3 const &points)
  PointerToArray< LVecBase3f > arg_local;
  PTA_LVecBase3 const *arg_this = Dtool_Coerce_PointerToArray_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletConvexHullShape.add_array", "PointerToArray");
  }
  ((*local_this).add_array)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_array(const BulletConvexHullShape self, const PointerToArray points)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexHullShape_add_array_889_comment =
  "C++ Interface:\n"
  "add_array(const BulletConvexHullShape self, const PointerToArray points)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConvexHullShape_add_array_889_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletConvexHullShape::add_geom(Geom const *geom, TransformState const *ts = TransformState::make_identity())
 */
static PyObject *Dtool_BulletConvexHullShape_add_geom_890(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletConvexHullShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConvexHullShape, (void **)&local_this, "BulletConvexHullShape.add_geom")) {
    return nullptr;
  }
  // 1-void BulletConvexHullShape::add_geom(Geom const *geom, TransformState const *ts = TransformState::make_identity())
  PyObject *param1;
  PyObject *param2 = nullptr;
  static const char *keyword_list[] = {"geom", "ts", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:add_geom", (char **)keyword_list, &param1, &param2)) {
    Geom const *param1_this = (Geom *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_Geom, 1, "BulletConvexHullShape.add_geom", true, true);
    TransformState const *param2_this;
    if (param2 == nullptr) {
      param2_this = TransformState::make_identity();
    } else {
      param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletConvexHullShape.add_geom", true, true);
    }
    if (param1_this != nullptr && (param2 == nullptr || param2_this != nullptr)) {
      ((*local_this).add_geom)(param1_this, param2_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_geom(const BulletConvexHullShape self, const Geom geom, const TransformState ts)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexHullShape_add_geom_890_comment =
  "C++ Interface:\n"
  "add_geom(const BulletConvexHullShape self, const Geom geom, const TransformState ts)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConvexHullShape_add_geom_890_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletConvexHullShape::get_class_type(void)
 */
static PyObject *Dtool_BulletConvexHullShape_get_class_type_891(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletConvexHullShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletConvexHullShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexHullShape_get_class_type_891_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletConvexHullShape_get_class_type_891_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletConvexHullShape::BulletConvexHullShape(void)
 * BulletConvexHullShape::BulletConvexHullShape(BulletConvexHullShape const &copy)
 */
static int Dtool_Init_BulletConvexHullShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 0:
    {
      // 1-BulletConvexHullShape::BulletConvexHullShape(void)
      BulletConvexHullShape *return_value = new BulletConvexHullShape();
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexHullShape, true, false);
    }
    break;
  case 1:
    {
      PyObject *arg;
      if (Dtool_ExtractArg(&arg, args, kwds, "copy")) {
        // 1-BulletConvexHullShape::BulletConvexHullShape(BulletConvexHullShape const &copy)
        BulletConvexHullShape const *arg_this = (BulletConvexHullShape *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletConvexHullShape, 0, "BulletConvexHullShape.BulletConvexHullShape", true, true);
        if (arg_this != nullptr) {
          BulletConvexHullShape *return_value = new BulletConvexHullShape(*arg_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexHullShape, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletConvexHullShape() takes 0 or 1 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletConvexHullShape()\n"
      "BulletConvexHullShape(const BulletConvexHullShape copy)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletConvexHullShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletConvexHullShape) {
    printf("BulletConvexHullShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletConvexHullShape *local_this = (BulletConvexHullShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletConvexHullShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletConvexHullShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletConvexHullShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletConvexHullShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletConvexHullShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletConvexHullShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletConvexHullShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletConvexHullShape*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletConvexPointCloudShape
 */
/**
 * Python function wrapper for:
 * int BulletConvexPointCloudShape::get_num_points(void) const
 */
static PyObject *Dtool_BulletConvexPointCloudShape_get_num_points_894(PyObject *self, PyObject *) {
  BulletConvexPointCloudShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletConvexPointCloudShape)) {
    return nullptr;
  }
  // 1-int BulletConvexPointCloudShape::get_num_points(void) const
  int return_value = ((*(const BulletConvexPointCloudShape*)local_this).get_num_points)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexPointCloudShape_get_num_points_894_comment =
  "C++ Interface:\n"
  "get_num_points(BulletConvexPointCloudShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConvexPointCloudShape_get_num_points_894_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletConvexPointCloudShape::get_class_type(void)
 */
static PyObject *Dtool_BulletConvexPointCloudShape_get_class_type_896(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletConvexPointCloudShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletConvexPointCloudShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexPointCloudShape_get_class_type_896_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletConvexPointCloudShape_get_class_type_896_comment = nullptr;
#endif

static PyObject *Dtool_BulletConvexPointCloudShape_num_points_Getter(PyObject *self, void *) {
  const BulletConvexPointCloudShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConvexPointCloudShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletConvexPointCloudShape::get_num_points(void) const
  int return_value = ((*(const BulletConvexPointCloudShape*)local_this).get_num_points)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * BulletConvexPointCloudShape::BulletConvexPointCloudShape(BulletConvexPointCloudShape const &copy)
 * explicit BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale = LVecBase3(1.0))
 * explicit BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale = LVecBase3(1.0))
 */
static int Dtool_Init_BulletConvexPointCloudShape(PyObject *self, PyObject *args, PyObject *kwds) {
  {
    // -2 explicit BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale = LVecBase3(1.0))
    PyObject *param0;
    PyObject *param1 = nullptr;
    static const char *keyword_list[] = {"geom", "scale", nullptr};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:BulletConvexPointCloudShape", (char **)keyword_list, &param0, &param1)) {
      Geom const *param0_this = nullptr;
      DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_Geom);
      LVecBase3 *param1_this;
      LVecBase3f &&param1_ref = LVecBase3(1.0);
      if (param1 == nullptr) {
        param1_this = &param1_ref;
      } else {
        param1_this = nullptr;
        DtoolInstance_GetPointer(param1, param1_this, *Dtool_Ptr_LVecBase3f);
      }
      if (param0_this != nullptr && (param1 == nullptr || param1_this != nullptr)) {
        BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(param0_this, *param1_this);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
      }
    }
    PyErr_Clear();
  }

  {
    // -2 explicit BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale = LVecBase3(1.0))
    PyObject *param0;
    PyObject *param1 = nullptr;
    static const char *keyword_list[] = {"points", "scale", nullptr};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:BulletConvexPointCloudShape", (char **)keyword_list, &param0, &param1)) {
      PTA_LVecBase3 const *param0_this = nullptr;
      DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_PointerToArray_LVecBase3f);
      LVecBase3 *param1_this;
      LVecBase3f &&param1_ref = LVecBase3(1.0);
      if (param1 == nullptr) {
        param1_this = &param1_ref;
      } else {
        param1_this = nullptr;
        DtoolInstance_GetPointer(param1, param1_this, *Dtool_Ptr_LVecBase3f);
      }
      if (param0_this != nullptr && (param1 == nullptr || param1_this != nullptr)) {
        BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(*param0_this, *param1_this);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
      }
    }
    PyErr_Clear();
  }

  {
    // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(BulletConvexPointCloudShape const &copy)
    PyObject *param0;
    if (Dtool_ExtractArg(&param0, args, kwds, "copy")) {
      BulletConvexPointCloudShape const *param0_this = nullptr;
      DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_BulletConvexPointCloudShape);
      if (param0_this != nullptr) {
        BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(*param0_this);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
      }
    }
  }

  {
    // -2 explicit BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale = LVecBase3(1.0))
    PyObject *param0;
    PyObject *param1 = nullptr;
    static const char *keyword_list[] = {"geom", "scale", nullptr};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:BulletConvexPointCloudShape", (char **)keyword_list, &param0, &param1)) {
      Geom const *param0_this = nullptr;
      DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_Geom);
      LVecBase3f param1_local;
      LVecBase3 *param1_this;
      if (param1 != nullptr) {
        param1_this = Dtool_Coerce_LVecBase3f(param1, param1_local);
      } else {
        param1_local = LVecBase3(1.0);
        param1_this = &param1_local;
      }
      if (param0_this != nullptr && (param1 == nullptr || (param1_this != nullptr))) {
        BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(param0_this, *param1_this);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
      }
    }
    PyErr_Clear();
  }

  {
    // -2 explicit BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale = LVecBase3(1.0))
    PyObject *param0;
    PyObject *param1 = nullptr;
    static const char *keyword_list[] = {"points", "scale", nullptr};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:BulletConvexPointCloudShape", (char **)keyword_list, &param0, &param1)) {
      PointerToArray< LVecBase3f > param0_local;
      PTA_LVecBase3 const *param0_this = Dtool_Coerce_PointerToArray_LVecBase3f(param0, param0_local);
      LVecBase3f param1_local;
      LVecBase3 *param1_this;
      if (param1 != nullptr) {
        param1_this = Dtool_Coerce_LVecBase3f(param1, param1_local);
      } else {
        param1_local = LVecBase3(1.0);
        param1_this = &param1_local;
      }
      if ((param0_this != nullptr) && (param1 == nullptr || (param1_this != nullptr))) {
        BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(*param0_this, *param1_this);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
      }
    }
    PyErr_Clear();
  }

  // No coercion possible: BulletConvexPointCloudShape::BulletConvexPointCloudShape(BulletConvexPointCloudShape const &copy)
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletConvexPointCloudShape(const Geom geom, LVecBase3f scale)\n"
      "BulletConvexPointCloudShape(const PointerToArray points, LVecBase3f scale)\n"
      "BulletConvexPointCloudShape(const BulletConvexPointCloudShape copy)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletConvexPointCloudShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletConvexPointCloudShape) {
    printf("BulletConvexPointCloudShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletConvexPointCloudShape *local_this = (BulletConvexPointCloudShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletConvexPointCloudShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletConvexPointCloudShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletConvexPointCloudShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletConvexPointCloudShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletConvexPointCloudShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletConvexPointCloudShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletConvexPointCloudShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletConvexPointCloudShape*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletCylinderShape
 */
/**
 * Python function wrapper for:
 * PN_stdfloat BulletCylinderShape::get_radius(void) const
 */
static PyObject *Dtool_BulletCylinderShape_get_radius_899(PyObject *self, PyObject *) {
  BulletCylinderShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletCylinderShape)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletCylinderShape::get_radius(void) const
  PN_stdfloat return_value = ((*(const BulletCylinderShape*)local_this).get_radius)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCylinderShape_get_radius_899_comment =
  "C++ Interface:\n"
  "get_radius(BulletCylinderShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCylinderShape_get_radius_899_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVecBase3 BulletCylinderShape::get_half_extents_without_margin(void) const
 */
static PyObject *Dtool_BulletCylinderShape_get_half_extents_without_margin_900(PyObject *self, PyObject *) {
  BulletCylinderShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletCylinderShape)) {
    return nullptr;
  }
  // 1-LVecBase3 BulletCylinderShape::get_half_extents_without_margin(void) const
  LVecBase3 *return_value = new LVecBase3(((*(const BulletCylinderShape*)local_this).get_half_extents_without_margin)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletCylinderShape_get_half_extents_without_margin_900_comment =
  "C++ Interface:\n"
  "get_half_extents_without_margin(BulletCylinderShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCylinderShape_get_half_extents_without_margin_900_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVecBase3 BulletCylinderShape::get_half_extents_with_margin(void) const
 */
static PyObject *Dtool_BulletCylinderShape_get_half_extents_with_margin_901(PyObject *self, PyObject *) {
  BulletCylinderShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletCylinderShape)) {
    return nullptr;
  }
  // 1-LVecBase3 BulletCylinderShape::get_half_extents_with_margin(void) const
  LVecBase3 *return_value = new LVecBase3(((*(const BulletCylinderShape*)local_this).get_half_extents_with_margin)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletCylinderShape_get_half_extents_with_margin_901_comment =
  "C++ Interface:\n"
  "get_half_extents_with_margin(BulletCylinderShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCylinderShape_get_half_extents_with_margin_901_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletCylinderShape::get_class_type(void)
 */
static PyObject *Dtool_BulletCylinderShape_get_class_type_905(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletCylinderShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletCylinderShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletCylinderShape_get_class_type_905_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletCylinderShape_get_class_type_905_comment = nullptr;
#endif

static PyObject *Dtool_BulletCylinderShape_radius_Getter(PyObject *self, void *) {
  const BulletCylinderShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCylinderShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletCylinderShape::get_radius(void) const
  PN_stdfloat return_value = ((*(const BulletCylinderShape*)local_this).get_radius)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletCylinderShape_half_extents_without_margin_Getter(PyObject *self, void *) {
  const BulletCylinderShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCylinderShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVecBase3 BulletCylinderShape::get_half_extents_without_margin(void) const
  LVecBase3 *return_value = new LVecBase3(((*(const BulletCylinderShape*)local_this).get_half_extents_without_margin)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

static PyObject *Dtool_BulletCylinderShape_half_extents_with_margin_Getter(PyObject *self, void *) {
  const BulletCylinderShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCylinderShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVecBase3 BulletCylinderShape::get_half_extents_with_margin(void) const
  LVecBase3 *return_value = new LVecBase3(((*(const BulletCylinderShape*)local_this).get_half_extents_with_margin)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

/**
 * Python function wrapper for:
 * BulletCylinderShape::BulletCylinderShape(BulletCylinderShape const &copy)
 * explicit BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up = ::Z_up)
 * explicit BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
 */
static int Dtool_Init_BulletCylinderShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      {
        // -2 explicit BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up)
        PyObject *param0;
        if (Dtool_ExtractArg(&param0, args, kwds, "half_extents")) {
          LVector3 const *param0_this = nullptr;
          DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_LVector3f);
          if (param0_this != nullptr) {
            BulletCylinderShape *return_value = new BulletCylinderShape(*param0_this);
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCylinderShape, true, false);
          }
        }
      }

      {
        // -2 BulletCylinderShape::BulletCylinderShape(BulletCylinderShape const &copy)
        PyObject *param0;
        if (Dtool_ExtractArg(&param0, args, kwds, "copy")) {
          BulletCylinderShape const *param0_this = nullptr;
          DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_BulletCylinderShape);
          if (param0_this != nullptr) {
            BulletCylinderShape *return_value = new BulletCylinderShape(*param0_this);
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCylinderShape, true, false);
          }
        }
      }

      {
        // -2 explicit BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up)
        PyObject *param0;
        if (Dtool_ExtractArg(&param0, args, kwds, "half_extents")) {
          LVector3f param0_local;
          LVector3 const *param0_this = Dtool_Coerce_LVector3f(param0, param0_local);
          if ((param0_this != nullptr)) {
            BulletCylinderShape *return_value = new BulletCylinderShape(*param0_this);
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCylinderShape, true, false);
          }
        }
      }

      // No coercion possible: BulletCylinderShape::BulletCylinderShape(BulletCylinderShape const &copy)
    }
    break;
  case 2:
  case 3:
    {
      {
        // -2 explicit BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
        float param0;
        float param1;
        int param2 = ::Z_up;
        static const char *keyword_list[] = {"radius", "height", "up", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "ff|i:BulletCylinderShape", (char **)keyword_list, &param0, &param1, &param2)) {
          BulletCylinderShape *return_value = new BulletCylinderShape((PN_stdfloat)param0, (PN_stdfloat)param1, (BulletUpAxis)param2);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCylinderShape, true, false);
        }
        PyErr_Clear();
      }

      // No coercion possible: explicit BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
      {
        // -2 explicit BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up = ::Z_up)
        PyObject *param0;
        int param1;
        static const char *keyword_list[] = {"half_extents", "up", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "Oi:BulletCylinderShape", (char **)keyword_list, &param0, &param1)) {
          LVector3f param0_local;
          LVector3 const *param0_this = Dtool_Coerce_LVector3f(param0, param0_local);
          if ((param0_this != nullptr)) {
            BulletCylinderShape *return_value = new BulletCylinderShape(*param0_this, (BulletUpAxis)param1);
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCylinderShape, true, false);
          }
        }
        PyErr_Clear();
      }

    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletCylinderShape() takes 1, 2 or 3 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletCylinderShape(const LVector3f half_extents)\n"
      "BulletCylinderShape(const BulletCylinderShape copy)\n"
      "BulletCylinderShape(float radius, float height, int up)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletCylinderShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletCylinderShape) {
    printf("BulletCylinderShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletCylinderShape *local_this = (BulletCylinderShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletCylinderShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletCylinderShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletCylinderShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletCylinderShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletCylinderShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletCylinderShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletCylinderShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletCylinderShape*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletFilterCallbackData
 */
/**
 * Python function wrapper for:
 * inline PandaNode *BulletFilterCallbackData::get_node_0(void) const
 */
static PyObject *Dtool_BulletFilterCallbackData_get_node_0_908(PyObject *self, PyObject *) {
  BulletFilterCallbackData *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletFilterCallbackData)) {
    return nullptr;
  }
  // 1-inline PandaNode *BulletFilterCallbackData::get_node_0(void) const
  PandaNode *return_value = ((*(const BulletFilterCallbackData*)local_this).get_node_0)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletFilterCallbackData_get_node_0_908_comment =
  "C++ Interface:\n"
  "get_node_0(BulletFilterCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletFilterCallbackData_get_node_0_908_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline PandaNode *BulletFilterCallbackData::get_node_1(void) const
 */
static PyObject *Dtool_BulletFilterCallbackData_get_node_1_909(PyObject *self, PyObject *) {
  BulletFilterCallbackData *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletFilterCallbackData)) {
    return nullptr;
  }
  // 1-inline PandaNode *BulletFilterCallbackData::get_node_1(void) const
  PandaNode *return_value = ((*(const BulletFilterCallbackData*)local_this).get_node_1)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletFilterCallbackData_get_node_1_909_comment =
  "C++ Interface:\n"
  "get_node_1(BulletFilterCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletFilterCallbackData_get_node_1_909_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletFilterCallbackData::set_collide(bool collide)
 */
static PyObject *Dtool_BulletFilterCallbackData_set_collide_910(PyObject *self, PyObject *arg) {
  BulletFilterCallbackData *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletFilterCallbackData, (void **)&local_this, "BulletFilterCallbackData.set_collide")) {
    return nullptr;
  }
  // 1-inline void BulletFilterCallbackData::set_collide(bool collide)
  ((*local_this).set_collide)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_collide(const BulletFilterCallbackData self, bool collide)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletFilterCallbackData_set_collide_910_comment =
  "C++ Interface:\n"
  "set_collide(const BulletFilterCallbackData self, bool collide)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletFilterCallbackData_set_collide_910_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletFilterCallbackData::get_collide(void) const
 */
static PyObject *Dtool_BulletFilterCallbackData_get_collide_911(PyObject *self, PyObject *) {
  BulletFilterCallbackData *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletFilterCallbackData)) {
    return nullptr;
  }
  // 1-inline bool BulletFilterCallbackData::get_collide(void) const
  bool return_value = ((*(const BulletFilterCallbackData*)local_this).get_collide)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletFilterCallbackData_get_collide_911_comment =
  "C++ Interface:\n"
  "get_collide(BulletFilterCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletFilterCallbackData_get_collide_911_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletFilterCallbackData::get_class_type(void)
 */
static PyObject *Dtool_BulletFilterCallbackData_get_class_type_915(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletFilterCallbackData::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletFilterCallbackData::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletFilterCallbackData_get_class_type_915_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletFilterCallbackData_get_class_type_915_comment = nullptr;
#endif

static PyObject *Dtool_BulletFilterCallbackData_node_0_Getter(PyObject *self, void *) {
  const BulletFilterCallbackData *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletFilterCallbackData, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline PandaNode *BulletFilterCallbackData::get_node_0(void) const
  PandaNode *return_value = ((*(const BulletFilterCallbackData*)local_this).get_node_0)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletFilterCallbackData_node_1_Getter(PyObject *self, void *) {
  const BulletFilterCallbackData *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletFilterCallbackData, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline PandaNode *BulletFilterCallbackData::get_node_1(void) const
  PandaNode *return_value = ((*(const BulletFilterCallbackData*)local_this).get_node_1)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletFilterCallbackData_collide_Getter(PyObject *self, void *) {
  const BulletFilterCallbackData *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletFilterCallbackData, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline bool BulletFilterCallbackData::get_collide(void) const
  bool return_value = ((*(const BulletFilterCallbackData*)local_this).get_collide)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletFilterCallbackData_collide_Setter(PyObject *self, PyObject *arg, void *) {
  BulletFilterCallbackData *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletFilterCallbackData, (void **)&local_this, "BulletFilterCallbackData.collide")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete collide attribute");
    return -1;
  }
  // 1-inline void BulletFilterCallbackData::set_collide(bool collide)
  ((*local_this).set_collide)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_collide(const BulletFilterCallbackData self, bool collide)\n");
  }
  return -1;
}

/**
 * Python function wrapper for:
 * inline BulletFilterCallbackData::BulletFilterCallbackData(PandaNode *node0, PandaNode *node1)
 */
static int Dtool_Init_BulletFilterCallbackData(PyObject *self, PyObject *args, PyObject *kwds) {
  // 1-inline BulletFilterCallbackData::BulletFilterCallbackData(PandaNode *node0, PandaNode *node1)
  PyObject *param0;
  PyObject *param1;
  static const char *keyword_list[] = {"node0", "node1", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletFilterCallbackData", (char **)keyword_list, &param0, &param1)) {
    PandaNode *param0_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_PandaNode, 0, "BulletFilterCallbackData.BulletFilterCallbackData", false, true);
    PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletFilterCallbackData.BulletFilterCallbackData", false, true);
    if (param0_this != nullptr && param1_this != nullptr) {
      BulletFilterCallbackData *return_value = new BulletFilterCallbackData(param0_this, param1_this);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletFilterCallbackData, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletFilterCallbackData(PandaNode node0, PandaNode node1)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletFilterCallbackData(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletFilterCallbackData) {
    printf("BulletFilterCallbackData ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletFilterCallbackData *local_this = (BulletFilterCallbackData *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletFilterCallbackData) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_CallbackData) {
    return (CallbackData *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(CallbackData *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletFilterCallbackData(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletFilterCallbackData) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_CallbackData) {
    CallbackData* other_this = (CallbackData*)from_this;
    return (BulletFilterCallbackData*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletFilterCallbackData*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletRotationalLimitMotor
 */
/**
 * Python function wrapper for:
 * void BulletRotationalLimitMotor::set_motor_enabled(bool enable)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_motor_enabled_920(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_motor_enabled")) {
    return nullptr;
  }
  // 1-void BulletRotationalLimitMotor::set_motor_enabled(bool enable)
  ((*local_this).set_motor_enabled)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_motor_enabled(const BulletRotationalLimitMotor self, bool enable)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_motor_enabled_920_comment =
  "C++ Interface:\n"
  "set_motor_enabled(const BulletRotationalLimitMotor self, bool enable)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_motor_enabled_920_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRotationalLimitMotor::set_low_limit(PN_stdfloat limit)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_low_limit_921(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_low_limit")) {
    return nullptr;
  }
  // 1-void BulletRotationalLimitMotor::set_low_limit(PN_stdfloat limit)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_low_limit)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_low_limit(const BulletRotationalLimitMotor self, float limit)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_low_limit_921_comment =
  "C++ Interface:\n"
  "set_low_limit(const BulletRotationalLimitMotor self, float limit)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_low_limit_921_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRotationalLimitMotor::set_high_limit(PN_stdfloat limit)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_high_limit_922(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_high_limit")) {
    return nullptr;
  }
  // 1-void BulletRotationalLimitMotor::set_high_limit(PN_stdfloat limit)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_high_limit)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_high_limit(const BulletRotationalLimitMotor self, float limit)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_high_limit_922_comment =
  "C++ Interface:\n"
  "set_high_limit(const BulletRotationalLimitMotor self, float limit)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_high_limit_922_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRotationalLimitMotor::set_target_velocity(PN_stdfloat velocity)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_target_velocity_923(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_target_velocity")) {
    return nullptr;
  }
  // 1-void BulletRotationalLimitMotor::set_target_velocity(PN_stdfloat velocity)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_target_velocity)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_target_velocity(const BulletRotationalLimitMotor self, float velocity)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_target_velocity_923_comment =
  "C++ Interface:\n"
  "set_target_velocity(const BulletRotationalLimitMotor self, float velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_target_velocity_923_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRotationalLimitMotor::set_max_motor_force(PN_stdfloat force)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_max_motor_force_924(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_max_motor_force")) {
    return nullptr;
  }
  // 1-void BulletRotationalLimitMotor::set_max_motor_force(PN_stdfloat force)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_motor_force)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_motor_force(const BulletRotationalLimitMotor self, float force)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_max_motor_force_924_comment =
  "C++ Interface:\n"
  "set_max_motor_force(const BulletRotationalLimitMotor self, float force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_max_motor_force_924_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRotationalLimitMotor::set_max_limit_force(PN_stdfloat force)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_max_limit_force_925(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_max_limit_force")) {
    return nullptr;
  }
  // 1-void BulletRotationalLimitMotor::set_max_limit_force(PN_stdfloat force)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_limit_force)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_limit_force(const BulletRotationalLimitMotor self, float force)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_max_limit_force_925_comment =
  "C++ Interface:\n"
  "set_max_limit_force(const BulletRotationalLimitMotor self, float force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_max_limit_force_925_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRotationalLimitMotor::set_damping(PN_stdfloat damping)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_damping_926(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_damping")) {
    return nullptr;
  }
  // 1-void BulletRotationalLimitMotor::set_damping(PN_stdfloat damping)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_damping)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_damping(const BulletRotationalLimitMotor self, float damping)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_damping_926_comment =
  "C++ Interface:\n"
  "set_damping(const BulletRotationalLimitMotor self, float damping)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_damping_926_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRotationalLimitMotor::set_softness(PN_stdfloat softness)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_softness_927(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_softness")) {
    return nullptr;
  }
  // 1-void BulletRotationalLimitMotor::set_softness(PN_stdfloat softness)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_softness)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_softness(const BulletRotationalLimitMotor self, float softness)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_softness_927_comment =
  "C++ Interface:\n"
  "set_softness(const BulletRotationalLimitMotor self, float softness)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_softness_927_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRotationalLimitMotor::set_bounce(PN_stdfloat bounce)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_bounce_928(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_bounce")) {
    return nullptr;
  }
  // 1-void BulletRotationalLimitMotor::set_bounce(PN_stdfloat bounce)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_bounce)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_bounce(const BulletRotationalLimitMotor self, float bounce)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_bounce_928_comment =
  "C++ Interface:\n"
  "set_bounce(const BulletRotationalLimitMotor self, float bounce)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_bounce_928_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRotationalLimitMotor::set_normal_cfm(PN_stdfloat cfm)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_normal_cfm_929(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_normal_cfm")) {
    return nullptr;
  }
  // 1-void BulletRotationalLimitMotor::set_normal_cfm(PN_stdfloat cfm)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_normal_cfm)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_normal_cfm(const BulletRotationalLimitMotor self, float cfm)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_normal_cfm_929_comment =
  "C++ Interface:\n"
  "set_normal_cfm(const BulletRotationalLimitMotor self, float cfm)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_normal_cfm_929_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRotationalLimitMotor::set_stop_cfm(PN_stdfloat cfm)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_stop_cfm_930(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_stop_cfm")) {
    return nullptr;
  }
  // 1-void BulletRotationalLimitMotor::set_stop_cfm(PN_stdfloat cfm)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_stop_cfm)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_stop_cfm(const BulletRotationalLimitMotor self, float cfm)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_stop_cfm_930_comment =
  "C++ Interface:\n"
  "set_stop_cfm(const BulletRotationalLimitMotor self, float cfm)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_stop_cfm_930_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletRotationalLimitMotor::set_stop_erp(PN_stdfloat erp)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_stop_erp_931(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_stop_erp")) {
    return nullptr;
  }
  // 1-void BulletRotationalLimitMotor::set_stop_erp(PN_stdfloat erp)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_stop_erp)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_stop_erp(const BulletRotationalLimitMotor self, float erp)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_stop_erp_931_comment =
  "C++ Interface:\n"
  "set_stop_erp(const BulletRotationalLimitMotor self, float erp)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_stop_erp_931_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletRotationalLimitMotor::is_limited(void) const
 */
static PyObject *Dtool_BulletRotationalLimitMotor_is_limited_932(PyObject *self, PyObject *) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRotationalLimitMotor)) {
    return nullptr;
  }
  // 1-bool BulletRotationalLimitMotor::is_limited(void) const
  bool return_value = ((*(const BulletRotationalLimitMotor*)local_this).is_limited)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_is_limited_932_comment =
  "C++ Interface:\n"
  "is_limited(BulletRotationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_is_limited_932_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletRotationalLimitMotor::get_motor_enabled(void) const
 */
static PyObject *Dtool_BulletRotationalLimitMotor_get_motor_enabled_933(PyObject *self, PyObject *) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRotationalLimitMotor)) {
    return nullptr;
  }
  // 1-bool BulletRotationalLimitMotor::get_motor_enabled(void) const
  bool return_value = ((*(const BulletRotationalLimitMotor*)local_this).get_motor_enabled)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_get_motor_enabled_933_comment =
  "C++ Interface:\n"
  "get_motor_enabled(BulletRotationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_get_motor_enabled_933_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletRotationalLimitMotor::get_current_limit(void) const
 */
static PyObject *Dtool_BulletRotationalLimitMotor_get_current_limit_934(PyObject *self, PyObject *) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRotationalLimitMotor)) {
    return nullptr;
  }
  // 1-int BulletRotationalLimitMotor::get_current_limit(void) const
  int return_value = ((*(const BulletRotationalLimitMotor*)local_this).get_current_limit)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_get_current_limit_934_comment =
  "C++ Interface:\n"
  "get_current_limit(BulletRotationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at\n"
  " * high limit.\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_get_current_limit_934_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRotationalLimitMotor::get_current_error(void) const
 */
static PyObject *Dtool_BulletRotationalLimitMotor_get_current_error_935(PyObject *self, PyObject *) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRotationalLimitMotor)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletRotationalLimitMotor::get_current_error(void) const
  PN_stdfloat return_value = ((*(const BulletRotationalLimitMotor*)local_this).get_current_error)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_get_current_error_935_comment =
  "C++ Interface:\n"
  "get_current_error(BulletRotationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_get_current_error_935_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRotationalLimitMotor::get_current_position(void) const
 */
static PyObject *Dtool_BulletRotationalLimitMotor_get_current_position_936(PyObject *self, PyObject *) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRotationalLimitMotor)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletRotationalLimitMotor::get_current_position(void) const
  PN_stdfloat return_value = ((*(const BulletRotationalLimitMotor*)local_this).get_current_position)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_get_current_position_936_comment =
  "C++ Interface:\n"
  "get_current_position(BulletRotationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_get_current_position_936_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRotationalLimitMotor::get_accumulated_impulse(void) const
 */
static PyObject *Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_937(PyObject *self, PyObject *) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletRotationalLimitMotor)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletRotationalLimitMotor::get_accumulated_impulse(void) const
  PN_stdfloat return_value = ((*(const BulletRotationalLimitMotor*)local_this).get_accumulated_impulse)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_937_comment =
  "C++ Interface:\n"
  "get_accumulated_impulse(BulletRotationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_937_comment = nullptr;
#endif

static PyObject *Dtool_BulletRotationalLimitMotor_limited_Getter(PyObject *self, void *) {
  const BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletRotationalLimitMotor::is_limited(void) const
  bool return_value = ((*(const BulletRotationalLimitMotor*)local_this).is_limited)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletRotationalLimitMotor_motor_enabled_Getter(PyObject *self, void *) {
  const BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletRotationalLimitMotor::get_motor_enabled(void) const
  bool return_value = ((*(const BulletRotationalLimitMotor*)local_this).get_motor_enabled)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletRotationalLimitMotor_motor_enabled_Setter(PyObject *self, PyObject *arg, void *) {
  BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.motor_enabled")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete motor_enabled attribute");
    return -1;
  }
  // 1-void BulletRotationalLimitMotor::set_motor_enabled(bool enable)
  ((*local_this).set_motor_enabled)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_motor_enabled(const BulletRotationalLimitMotor self, bool enable)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletRotationalLimitMotor_current_limit_Getter(PyObject *self, void *) {
  const BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletRotationalLimitMotor::get_current_limit(void) const
  int return_value = ((*(const BulletRotationalLimitMotor*)local_this).get_current_limit)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletRotationalLimitMotor_current_error_Getter(PyObject *self, void *) {
  const BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletRotationalLimitMotor::get_current_error(void) const
  PN_stdfloat return_value = ((*(const BulletRotationalLimitMotor*)local_this).get_current_error)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletRotationalLimitMotor_current_position_Getter(PyObject *self, void *) {
  const BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletRotationalLimitMotor::get_current_position(void) const
  PN_stdfloat return_value = ((*(const BulletRotationalLimitMotor*)local_this).get_current_position)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletRotationalLimitMotor_accumulated_impulse_Getter(PyObject *self, void *) {
  const BulletRotationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletRotationalLimitMotor::get_accumulated_impulse(void) const
  PN_stdfloat return_value = ((*(const BulletRotationalLimitMotor*)local_this).get_accumulated_impulse)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * BulletRotationalLimitMotor::BulletRotationalLimitMotor(BulletRotationalLimitMotor const &copy)
 */
static int Dtool_Init_BulletRotationalLimitMotor(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletRotationalLimitMotor() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg;
  if (Dtool_ExtractArg(&arg, args, kwds, "copy")) {
    // 1-BulletRotationalLimitMotor::BulletRotationalLimitMotor(BulletRotationalLimitMotor const &copy)
    BulletRotationalLimitMotor const *arg_this = (BulletRotationalLimitMotor *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletRotationalLimitMotor, 0, "BulletRotationalLimitMotor.BulletRotationalLimitMotor", true, true);
    if (arg_this != nullptr) {
      BulletRotationalLimitMotor *return_value = new BulletRotationalLimitMotor(*arg_this);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletRotationalLimitMotor, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletRotationalLimitMotor(const BulletRotationalLimitMotor copy)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletRotationalLimitMotor(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletRotationalLimitMotor) {
    printf("BulletRotationalLimitMotor ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletRotationalLimitMotor *local_this = (BulletRotationalLimitMotor *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletRotationalLimitMotor) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletRotationalLimitMotor(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletRotationalLimitMotor) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletTranslationalLimitMotor
 */
/**
 * Python function wrapper for:
 * void BulletTranslationalLimitMotor::set_motor_enabled(int axis, bool enable)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_motor_enabled_947(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_motor_enabled")) {
    return nullptr;
  }
  // 1-void BulletTranslationalLimitMotor::set_motor_enabled(int axis, bool enable)
  int param1;
  PyObject *param2;
  static const char *keyword_list[] = {"axis", "enable", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "iO:set_motor_enabled", (char **)keyword_list, &param1, &param2)) {
    ((*local_this).set_motor_enabled)((int)param1, (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_motor_enabled(const BulletTranslationalLimitMotor self, int axis, bool enable)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_motor_enabled_947_comment =
  "C++ Interface:\n"
  "set_motor_enabled(const BulletTranslationalLimitMotor self, int axis, bool enable)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_motor_enabled_947_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTranslationalLimitMotor::set_low_limit(LVecBase3 const &limit)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_low_limit_948(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_low_limit")) {
    return nullptr;
  }
  // 1-void BulletTranslationalLimitMotor::set_low_limit(LVecBase3 const &limit)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_low_limit", "LVecBase3f");
  }
  ((*local_this).set_low_limit)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_low_limit(const BulletTranslationalLimitMotor self, const LVecBase3f limit)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_low_limit_948_comment =
  "C++ Interface:\n"
  "set_low_limit(const BulletTranslationalLimitMotor self, const LVecBase3f limit)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_low_limit_948_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTranslationalLimitMotor::set_high_limit(LVecBase3 const &limit)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_high_limit_949(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_high_limit")) {
    return nullptr;
  }
  // 1-void BulletTranslationalLimitMotor::set_high_limit(LVecBase3 const &limit)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_high_limit", "LVecBase3f");
  }
  ((*local_this).set_high_limit)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_high_limit(const BulletTranslationalLimitMotor self, const LVecBase3f limit)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_high_limit_949_comment =
  "C++ Interface:\n"
  "set_high_limit(const BulletTranslationalLimitMotor self, const LVecBase3f limit)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_high_limit_949_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTranslationalLimitMotor::set_target_velocity(LVecBase3 const &velocity)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_target_velocity_950(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_target_velocity")) {
    return nullptr;
  }
  // 1-void BulletTranslationalLimitMotor::set_target_velocity(LVecBase3 const &velocity)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_target_velocity", "LVecBase3f");
  }
  ((*local_this).set_target_velocity)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_target_velocity(const BulletTranslationalLimitMotor self, const LVecBase3f velocity)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_target_velocity_950_comment =
  "C++ Interface:\n"
  "set_target_velocity(const BulletTranslationalLimitMotor self, const LVecBase3f velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_target_velocity_950_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTranslationalLimitMotor::set_max_motor_force(LVecBase3 const &force)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_max_motor_force_951(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_max_motor_force")) {
    return nullptr;
  }
  // 1-void BulletTranslationalLimitMotor::set_max_motor_force(LVecBase3 const &force)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_max_motor_force", "LVecBase3f");
  }
  ((*local_this).set_max_motor_force)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_motor_force(const BulletTranslationalLimitMotor self, const LVecBase3f force)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_max_motor_force_951_comment =
  "C++ Interface:\n"
  "set_max_motor_force(const BulletTranslationalLimitMotor self, const LVecBase3f force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_max_motor_force_951_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTranslationalLimitMotor::set_damping(PN_stdfloat damping)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_damping_952(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_damping")) {
    return nullptr;
  }
  // 1-void BulletTranslationalLimitMotor::set_damping(PN_stdfloat damping)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_damping)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_damping(const BulletTranslationalLimitMotor self, float damping)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_damping_952_comment =
  "C++ Interface:\n"
  "set_damping(const BulletTranslationalLimitMotor self, float damping)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_damping_952_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTranslationalLimitMotor::set_softness(PN_stdfloat softness)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_softness_953(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_softness")) {
    return nullptr;
  }
  // 1-void BulletTranslationalLimitMotor::set_softness(PN_stdfloat softness)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_softness)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_softness(const BulletTranslationalLimitMotor self, float softness)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_softness_953_comment =
  "C++ Interface:\n"
  "set_softness(const BulletTranslationalLimitMotor self, float softness)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_softness_953_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTranslationalLimitMotor::set_restitution(PN_stdfloat restitution)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_restitution_954(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_restitution")) {
    return nullptr;
  }
  // 1-void BulletTranslationalLimitMotor::set_restitution(PN_stdfloat restitution)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_restitution)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_restitution(const BulletTranslationalLimitMotor self, float restitution)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_restitution_954_comment =
  "C++ Interface:\n"
  "set_restitution(const BulletTranslationalLimitMotor self, float restitution)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_restitution_954_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTranslationalLimitMotor::set_normal_cfm(LVecBase3 const &cfm)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_normal_cfm_955(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_normal_cfm")) {
    return nullptr;
  }
  // 1-void BulletTranslationalLimitMotor::set_normal_cfm(LVecBase3 const &cfm)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_normal_cfm", "LVecBase3f");
  }
  ((*local_this).set_normal_cfm)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_normal_cfm(const BulletTranslationalLimitMotor self, const LVecBase3f cfm)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_normal_cfm_955_comment =
  "C++ Interface:\n"
  "set_normal_cfm(const BulletTranslationalLimitMotor self, const LVecBase3f cfm)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_normal_cfm_955_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTranslationalLimitMotor::set_stop_erp(LVecBase3 const &erp)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_stop_erp_956(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_stop_erp")) {
    return nullptr;
  }
  // 1-void BulletTranslationalLimitMotor::set_stop_erp(LVecBase3 const &erp)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_stop_erp", "LVecBase3f");
  }
  ((*local_this).set_stop_erp)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_stop_erp(const BulletTranslationalLimitMotor self, const LVecBase3f erp)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_stop_erp_956_comment =
  "C++ Interface:\n"
  "set_stop_erp(const BulletTranslationalLimitMotor self, const LVecBase3f erp)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_stop_erp_956_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTranslationalLimitMotor::set_stop_cfm(LVecBase3 const &cfm)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_stop_cfm_957(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_stop_cfm")) {
    return nullptr;
  }
  // 1-void BulletTranslationalLimitMotor::set_stop_cfm(LVecBase3 const &cfm)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_stop_cfm", "LVecBase3f");
  }
  ((*local_this).set_stop_cfm)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_stop_cfm(const BulletTranslationalLimitMotor self, const LVecBase3f cfm)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_stop_cfm_957_comment =
  "C++ Interface:\n"
  "set_stop_cfm(const BulletTranslationalLimitMotor self, const LVecBase3f cfm)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_stop_cfm_957_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletTranslationalLimitMotor::is_limited(int axis) const
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_is_limited_958(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletTranslationalLimitMotor)) {
    return nullptr;
  }
  // 1-bool BulletTranslationalLimitMotor::is_limited(int axis) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    bool return_value = ((*(const BulletTranslationalLimitMotor*)local_this).is_limited)((int)arg_val);
    return Dtool_Return_Bool(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "is_limited(BulletTranslationalLimitMotor self, int axis)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_is_limited_958_comment =
  "C++ Interface:\n"
  "is_limited(BulletTranslationalLimitMotor self, int axis)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_is_limited_958_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletTranslationalLimitMotor::get_motor_enabled(int axis) const
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_get_motor_enabled_959(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletTranslationalLimitMotor)) {
    return nullptr;
  }
  // 1-bool BulletTranslationalLimitMotor::get_motor_enabled(int axis) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    bool return_value = ((*(const BulletTranslationalLimitMotor*)local_this).get_motor_enabled)((int)arg_val);
    return Dtool_Return_Bool(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_motor_enabled(BulletTranslationalLimitMotor self, int axis)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_get_motor_enabled_959_comment =
  "C++ Interface:\n"
  "get_motor_enabled(BulletTranslationalLimitMotor self, int axis)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_get_motor_enabled_959_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletTranslationalLimitMotor::get_current_limit(int axis) const
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_get_current_limit_960(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletTranslationalLimitMotor)) {
    return nullptr;
  }
  // 1-int BulletTranslationalLimitMotor::get_current_limit(int axis) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    int return_value = ((*(const BulletTranslationalLimitMotor*)local_this).get_current_limit)((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return nullptr;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_current_limit(BulletTranslationalLimitMotor self, int axis)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_get_current_limit_960_comment =
  "C++ Interface:\n"
  "get_current_limit(BulletTranslationalLimitMotor self, int axis)\n"
  "\n"
  "/**\n"
  " * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at\n"
  " * high limit.\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_get_current_limit_960_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletTranslationalLimitMotor::get_current_error(void) const
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_get_current_error_961(PyObject *self, PyObject *) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletTranslationalLimitMotor)) {
    return nullptr;
  }
  // 1-LVector3 BulletTranslationalLimitMotor::get_current_error(void) const
  LVector3 *return_value = new LVector3(((*(const BulletTranslationalLimitMotor*)local_this).get_current_error)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_get_current_error_961_comment =
  "C++ Interface:\n"
  "get_current_error(BulletTranslationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_get_current_error_961_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletTranslationalLimitMotor::get_current_diff(void) const
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_get_current_diff_962(PyObject *self, PyObject *) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletTranslationalLimitMotor)) {
    return nullptr;
  }
  // 1-LPoint3 BulletTranslationalLimitMotor::get_current_diff(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletTranslationalLimitMotor*)local_this).get_current_diff)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_get_current_diff_962_comment =
  "C++ Interface:\n"
  "get_current_diff(BulletTranslationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_get_current_diff_962_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletTranslationalLimitMotor::get_accumulated_impulse(void) const
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_963(PyObject *self, PyObject *) {
  BulletTranslationalLimitMotor *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletTranslationalLimitMotor)) {
    return nullptr;
  }
  // 1-LVector3 BulletTranslationalLimitMotor::get_accumulated_impulse(void) const
  LVector3 *return_value = new LVector3(((*(const BulletTranslationalLimitMotor*)local_this).get_accumulated_impulse)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_963_comment =
  "C++ Interface:\n"
  "get_accumulated_impulse(BulletTranslationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_963_comment = nullptr;
#endif

static PyObject *Dtool_BulletTranslationalLimitMotor_current_error_Getter(PyObject *self, void *) {
  const BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletTranslationalLimitMotor::get_current_error(void) const
  LVector3 *return_value = new LVector3(((*(const BulletTranslationalLimitMotor*)local_this).get_current_error)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletTranslationalLimitMotor_current_diff_Getter(PyObject *self, void *) {
  const BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletTranslationalLimitMotor::get_current_diff(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletTranslationalLimitMotor*)local_this).get_current_diff)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static PyObject *Dtool_BulletTranslationalLimitMotor_accumulated_impulse_Getter(PyObject *self, void *) {
  const BulletTranslationalLimitMotor *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletTranslationalLimitMotor::get_accumulated_impulse(void) const
  LVector3 *return_value = new LVector3(((*(const BulletTranslationalLimitMotor*)local_this).get_accumulated_impulse)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

/**
 * Python function wrapper for:
 * BulletTranslationalLimitMotor::BulletTranslationalLimitMotor(BulletTranslationalLimitMotor const &copy)
 */
static int Dtool_Init_BulletTranslationalLimitMotor(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletTranslationalLimitMotor() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg;
  if (Dtool_ExtractArg(&arg, args, kwds, "copy")) {
    // 1-BulletTranslationalLimitMotor::BulletTranslationalLimitMotor(BulletTranslationalLimitMotor const &copy)
    BulletTranslationalLimitMotor const *arg_this = (BulletTranslationalLimitMotor *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletTranslationalLimitMotor, 0, "BulletTranslationalLimitMotor.BulletTranslationalLimitMotor", true, true);
    if (arg_this != nullptr) {
      BulletTranslationalLimitMotor *return_value = new BulletTranslationalLimitMotor(*arg_this);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletTranslationalLimitMotor, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletTranslationalLimitMotor(const BulletTranslationalLimitMotor copy)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletTranslationalLimitMotor(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletTranslationalLimitMotor) {
    printf("BulletTranslationalLimitMotor ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletTranslationalLimitMotor *local_this = (BulletTranslationalLimitMotor *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletTranslationalLimitMotor) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletTranslationalLimitMotor(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletTranslationalLimitMotor) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletGenericConstraint
 */
/**
 * Python function wrapper for:
 * LVector3 BulletGenericConstraint::get_axis(int axis) const
 */
static PyObject *Dtool_BulletGenericConstraint_get_axis_969(PyObject *self, PyObject *arg) {
  BulletGenericConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletGenericConstraint)) {
    return nullptr;
  }
  // 1-LVector3 BulletGenericConstraint::get_axis(int axis) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    LVector3 *return_value = new LVector3(((*(const BulletGenericConstraint*)local_this).get_axis)((int)arg_val));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_axis(BulletGenericConstraint self, int axis)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_axis_969_comment =
  "C++ Interface:\n"
  "get_axis(BulletGenericConstraint self, int axis)\n"
  "\n"
  "// Geometry\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_axis_969_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletGenericConstraint::get_pivot(int axis) const
 */
static PyObject *Dtool_BulletGenericConstraint_get_pivot_970(PyObject *self, PyObject *arg) {
  BulletGenericConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletGenericConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletGenericConstraint::get_pivot(int axis) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    PN_stdfloat return_value = ((*(const BulletGenericConstraint*)local_this).get_pivot)((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return nullptr;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_pivot(BulletGenericConstraint self, int axis)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_pivot_970_comment =
  "C++ Interface:\n"
  "get_pivot(BulletGenericConstraint self, int axis)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_pivot_970_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletGenericConstraint::get_angle(int axis) const
 */
static PyObject *Dtool_BulletGenericConstraint_get_angle_971(PyObject *self, PyObject *arg) {
  BulletGenericConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletGenericConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletGenericConstraint::get_angle(int axis) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    PN_stdfloat return_value = ((*(const BulletGenericConstraint*)local_this).get_angle)((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return nullptr;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_angle(BulletGenericConstraint self, int axis)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_angle_971_comment =
  "C++ Interface:\n"
  "get_angle(BulletGenericConstraint self, int axis)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_angle_971_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletGenericConstraint::set_linear_limit(int axis, PN_stdfloat low, PN_stdfloat high)
 */
static PyObject *Dtool_BulletGenericConstraint_set_linear_limit_972(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletGenericConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletGenericConstraint, (void **)&local_this, "BulletGenericConstraint.set_linear_limit")) {
    return nullptr;
  }
  // 1-void BulletGenericConstraint::set_linear_limit(int axis, PN_stdfloat low, PN_stdfloat high)
  int param1;
  float param2;
  float param3;
  static const char *keyword_list[] = {"axis", "low", "high", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "iff:set_linear_limit", (char **)keyword_list, &param1, &param2, &param3)) {
    ((*local_this).set_linear_limit)((int)param1, (PN_stdfloat)param2, (PN_stdfloat)param3);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_limit(const BulletGenericConstraint self, int axis, float low, float high)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_set_linear_limit_972_comment =
  "C++ Interface:\n"
  "set_linear_limit(const BulletGenericConstraint self, int axis, float low, float high)\n"
  "\n"
  "// Limit\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_set_linear_limit_972_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletGenericConstraint::set_angular_limit(int axis, PN_stdfloat low, PN_stdfloat high)
 */
static PyObject *Dtool_BulletGenericConstraint_set_angular_limit_973(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletGenericConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletGenericConstraint, (void **)&local_this, "BulletGenericConstraint.set_angular_limit")) {
    return nullptr;
  }
  // 1-void BulletGenericConstraint::set_angular_limit(int axis, PN_stdfloat low, PN_stdfloat high)
  int param1;
  float param2;
  float param3;
  static const char *keyword_list[] = {"axis", "low", "high", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "iff:set_angular_limit", (char **)keyword_list, &param1, &param2, &param3)) {
    ((*local_this).set_angular_limit)((int)param1, (PN_stdfloat)param2, (PN_stdfloat)param3);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_limit(const BulletGenericConstraint self, int axis, float low, float high)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_set_angular_limit_973_comment =
  "C++ Interface:\n"
  "set_angular_limit(const BulletGenericConstraint self, int axis, float low, float high)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_set_angular_limit_973_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletRotationalLimitMotor BulletGenericConstraint::get_rotational_limit_motor(int axis)
 */
static PyObject *Dtool_BulletGenericConstraint_get_rotational_limit_motor_974(PyObject *self, PyObject *arg) {
  BulletGenericConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletGenericConstraint, (void **)&local_this, "BulletGenericConstraint.get_rotational_limit_motor")) {
    return nullptr;
  }
  // 1-BulletRotationalLimitMotor BulletGenericConstraint::get_rotational_limit_motor(int axis)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletRotationalLimitMotor *return_value = new BulletRotationalLimitMotor(((*local_this).get_rotational_limit_motor)((int)arg_val));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletRotationalLimitMotor, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_rotational_limit_motor(const BulletGenericConstraint self, int axis)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_rotational_limit_motor_974_comment =
  "C++ Interface:\n"
  "get_rotational_limit_motor(const BulletGenericConstraint self, int axis)\n"
  "\n"
  "// Motors\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_rotational_limit_motor_974_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletTranslationalLimitMotor BulletGenericConstraint::get_translational_limit_motor(void)
 */
static PyObject *Dtool_BulletGenericConstraint_get_translational_limit_motor_975(PyObject *self, PyObject *) {
  BulletGenericConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletGenericConstraint, (void **)&local_this, "BulletGenericConstraint.get_translational_limit_motor")) {
    return nullptr;
  }
  // 1-BulletTranslationalLimitMotor BulletGenericConstraint::get_translational_limit_motor(void)
  BulletTranslationalLimitMotor *return_value = new BulletTranslationalLimitMotor(((*local_this).get_translational_limit_motor)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletTranslationalLimitMotor, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_translational_limit_motor_975_comment =
  "C++ Interface:\n"
  "get_translational_limit_motor(const BulletGenericConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_translational_limit_motor_975_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletGenericConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
 */
static PyObject *Dtool_BulletGenericConstraint_set_frames_976(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletGenericConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletGenericConstraint, (void **)&local_this, "BulletGenericConstraint.set_frames")) {
    return nullptr;
  }
  // 1-void BulletGenericConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"ts_a", "ts_b", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:set_frames", (char **)keyword_list, &param1, &param2)) {
    TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletGenericConstraint.set_frames", true, true);
    TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletGenericConstraint.set_frames", true, true);
    if (param1_this != nullptr && param2_this != nullptr) {
      ((*local_this).set_frames)(param1_this, param2_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_frames(const BulletGenericConstraint self, const TransformState ts_a, const TransformState ts_b)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_set_frames_976_comment =
  "C++ Interface:\n"
  "set_frames(const BulletGenericConstraint self, const TransformState ts_a, const TransformState ts_b)\n"
  "\n"
  "// Frames\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_set_frames_976_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_a(void) const
 */
static PyObject *Dtool_BulletGenericConstraint_get_frame_a_977(PyObject *self, PyObject *) {
  BulletGenericConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletGenericConstraint)) {
    return nullptr;
  }
  // 1-ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_a(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletGenericConstraint*)local_this).get_frame_a)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_frame_a_977_comment =
  "C++ Interface:\n"
  "get_frame_a(BulletGenericConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_frame_a_977_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_b(void) const
 */
static PyObject *Dtool_BulletGenericConstraint_get_frame_b_978(PyObject *self, PyObject *) {
  BulletGenericConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletGenericConstraint)) {
    return nullptr;
  }
  // 1-ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_b(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletGenericConstraint*)local_this).get_frame_b)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_frame_b_978_comment =
  "C++ Interface:\n"
  "get_frame_b(BulletGenericConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_frame_b_978_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletGenericConstraint::get_class_type(void)
 */
static PyObject *Dtool_BulletGenericConstraint_get_class_type_982(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletGenericConstraint::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletGenericConstraint::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_class_type_982_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletGenericConstraint_get_class_type_982_comment = nullptr;
#endif

static PyObject *Dtool_BulletGenericConstraint_translational_limit_motor_Getter(PyObject *self, void *) {
  BulletGenericConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletGenericConstraint, (void **)&local_this, "BulletGenericConstraint.translational_limit_motor")) {
    return nullptr;
  }

  // 1-BulletTranslationalLimitMotor BulletGenericConstraint::get_translational_limit_motor(void)
  BulletTranslationalLimitMotor *return_value = new BulletTranslationalLimitMotor(((*local_this).get_translational_limit_motor)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletTranslationalLimitMotor, true, false);
}

static PyObject *Dtool_BulletGenericConstraint_frame_a_Getter(PyObject *self, void *) {
  const BulletGenericConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletGenericConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_a(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletGenericConstraint*)local_this).get_frame_a)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

static PyObject *Dtool_BulletGenericConstraint_frame_b_Getter(PyObject *self, void *) {
  const BulletGenericConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletGenericConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_b(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletGenericConstraint*)local_this).get_frame_b)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

/**
 * Python function wrapper for:
 * explicit BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a)
 * explicit BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool use_frame_a)
 */
static int Dtool_Init_BulletGenericConstraint(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 3:
    {
      // 1-explicit BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool use_frame_a)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      static const char *keyword_list[] = {"node_a", "frame_a", "use_frame_a", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:BulletGenericConstraint", (char **)keyword_list, &param0, &param1, &param2)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletGenericConstraint.BulletGenericConstraint", true, true);
        TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletGenericConstraint.BulletGenericConstraint", true, true);
        if (param0_this != nullptr && param1_this != nullptr) {
          BulletGenericConstraint *return_value = new BulletGenericConstraint(param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletGenericConstraint, true, false);
        }
      }
    }
    break;
  case 5:
    {
      // 1-explicit BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      PyObject *param4;
      static const char *keyword_list[] = {"node_a", "node_b", "frame_a", "frame_b", "use_frame_a", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOOO:BulletGenericConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletGenericConstraint.BulletGenericConstraint", true, true);
        BulletRigidBodyNode const *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletGenericConstraint.BulletGenericConstraint", true, true);
        TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletGenericConstraint.BulletGenericConstraint", true, true);
        TransformState const *param3_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param3, Dtool_Ptr_TransformState, 3, "BulletGenericConstraint.BulletGenericConstraint", true, true);
        if (param0_this != nullptr && param1_this != nullptr && param2_this != nullptr && param3_this != nullptr) {
          BulletGenericConstraint *return_value = new BulletGenericConstraint(param0_this, param1_this, param2_this, param3_this, (PyObject_IsTrue(param4) != 0));
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletGenericConstraint, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletGenericConstraint() takes 3 or 5 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletGenericConstraint(const BulletRigidBodyNode node_a, const TransformState frame_a, bool use_frame_a)\n"
      "BulletGenericConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const TransformState frame_a, const TransformState frame_b, bool use_frame_a)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletGenericConstraint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletGenericConstraint) {
    printf("BulletGenericConstraint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletGenericConstraint *local_this = (BulletGenericConstraint *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletGenericConstraint) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletConstraint) {
    return (BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletGenericConstraint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletGenericConstraint) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletConstraint) {
    BulletConstraint* other_this = (BulletConstraint*)from_this;
    return (BulletGenericConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletGenericConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletGenericConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletGenericConstraint*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletHeightfieldShape
 */
/**
 * Python function wrapper for:
 * void BulletHeightfieldShape::set_use_diamond_subdivision(bool flag = true)
 */
static PyObject *Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_985(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletHeightfieldShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHeightfieldShape, (void **)&local_this, "BulletHeightfieldShape.set_use_diamond_subdivision")) {
    return nullptr;
  }
  // 1-void BulletHeightfieldShape::set_use_diamond_subdivision(bool flag = true)
  PyObject *param1 = Py_True;
  if (Dtool_ExtractOptionalArg(&param1, args, kwds, "flag")) {
    ((*local_this).set_use_diamond_subdivision)((PyObject_IsTrue(param1) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_use_diamond_subdivision(const BulletHeightfieldShape self, bool flag)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_985_comment =
  "C++ Interface:\n"
  "set_use_diamond_subdivision(const BulletHeightfieldShape self, bool flag)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_985_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletHeightfieldShape::get_class_type(void)
 */
static PyObject *Dtool_BulletHeightfieldShape_get_class_type_986(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletHeightfieldShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletHeightfieldShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletHeightfieldShape_get_class_type_986_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletHeightfieldShape_get_class_type_986_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletHeightfieldShape::BulletHeightfieldShape(BulletHeightfieldShape const &copy)
 * explicit BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
 * explicit BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
 */
static int Dtool_Init_BulletHeightfieldShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg;
      if (Dtool_ExtractArg(&arg, args, kwds, "copy")) {
        // 1-BulletHeightfieldShape::BulletHeightfieldShape(BulletHeightfieldShape const &copy)
        BulletHeightfieldShape const *arg_this = (BulletHeightfieldShape *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletHeightfieldShape, 0, "BulletHeightfieldShape.BulletHeightfieldShape", true, true);
        if (arg_this != nullptr) {
          BulletHeightfieldShape *return_value = new BulletHeightfieldShape(*arg_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHeightfieldShape, true, false);
        }
      }
    }
    break;
  case 2:
  case 3:
    {
      {
        // -2 explicit BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
        PyObject *param0;
        float param1;
        int param2 = ::Z_up;
        static const char *keyword_list[] = {"image", "max_height", "up", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "Of|i:BulletHeightfieldShape", (char **)keyword_list, &param0, &param1, &param2)) {
          PNMImage const *param0_this = nullptr;
          DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_PNMImage);
          if (param0_this != nullptr) {
            BulletHeightfieldShape *return_value = new BulletHeightfieldShape(*param0_this, (PN_stdfloat)param1, (BulletUpAxis)param2);
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHeightfieldShape, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 explicit BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
        PyObject *param0;
        float param1;
        int param2 = ::Z_up;
        static const char *keyword_list[] = {"tex", "max_height", "up", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "Of|i:BulletHeightfieldShape", (char **)keyword_list, &param0, &param1, &param2)) {
          Texture *param0_this = (Texture *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_Texture, 0, "BulletHeightfieldShape.BulletHeightfieldShape", false, false);
          if (param0_this != nullptr) {
            BulletHeightfieldShape *return_value = new BulletHeightfieldShape(param0_this, (PN_stdfloat)param1, (BulletUpAxis)param2);
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHeightfieldShape, true, false);
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: explicit BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
      // No coercion possible: explicit BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletHeightfieldShape() takes 1, 2 or 3 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletHeightfieldShape(const BulletHeightfieldShape copy)\n"
      "BulletHeightfieldShape(const PNMImage image, float max_height, int up)\n"
      "BulletHeightfieldShape(Texture tex, float max_height, int up)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletHeightfieldShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletHeightfieldShape) {
    printf("BulletHeightfieldShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletHeightfieldShape *local_this = (BulletHeightfieldShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletHeightfieldShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletHeightfieldShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletHeightfieldShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletHeightfieldShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletHeightfieldShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletHeightfieldShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletHeightfieldShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletHeightfieldShape*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletHelper
 */
/**
 * Python function wrapper for:
 * static NodePathCollection BulletHelper::from_collision_solids(NodePath &np, bool clear = false)
 */
static PyObject *Dtool_BulletHelper_from_collision_solids_988(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static NodePathCollection BulletHelper::from_collision_solids(NodePath &np, bool clear = false)
  PyObject *param0;
  PyObject *param1 = Py_False;
  static const char *keyword_list[] = {"np", "clear", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:from_collision_solids", (char **)keyword_list, &param0, &param1)) {
    NodePath *param0_this = (NodePath *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_NodePath, 0, "BulletHelper.from_collision_solids", false, true);
    if (param0_this != nullptr) {
      NodePathCollection *return_value = new NodePathCollection((BulletHelper::from_collision_solids)(*param0_this, (PyObject_IsTrue(param1) != 0)));
      if (return_value == nullptr) {
        return PyErr_NoMemory();
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return nullptr;
      }
      return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_NodePathCollection, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "from_collision_solids(NodePath np, bool clear)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_from_collision_solids_988_comment =
  "C++ Interface:\n"
  "from_collision_solids(NodePath np, bool clear)\n"
  "\n"
  "// Collision shapes\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_from_collision_solids_988_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static inline PointerTo< InternalName > BulletHelper::get_sb_index(void)
 */
static PyObject *Dtool_BulletHelper_get_sb_index_989(PyObject *, PyObject *) {
  // 1-static inline PointerTo< InternalName > BulletHelper::get_sb_index(void)
  PointerTo< InternalName > return_value = (BulletHelper::get_sb_index)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  InternalName *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_InternalName, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_get_sb_index_989_comment =
  "C++ Interface:\n"
  "get_sb_index()\n"
  "\n"
  "// Internal names\n"
  "\n"
  "// Internal names\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_get_sb_index_989_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static inline PointerTo< InternalName > BulletHelper::get_sb_flip(void)
 */
static PyObject *Dtool_BulletHelper_get_sb_flip_990(PyObject *, PyObject *) {
  // 1-static inline PointerTo< InternalName > BulletHelper::get_sb_flip(void)
  PointerTo< InternalName > return_value = (BulletHelper::get_sb_flip)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  InternalName *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_InternalName, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_get_sb_flip_990_comment =
  "C++ Interface:\n"
  "get_sb_flip()\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_get_sb_flip_990_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_index_column(GeomVertexFormat const *format)
 */
static PyObject *Dtool_BulletHelper_add_sb_index_column_991(PyObject *, PyObject *arg) {
  // 1-static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_index_column(GeomVertexFormat const *format)
  CPT(GeomVertexFormat) arg_this;
  if (!Dtool_ConstCoerce_GeomVertexFormat(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 0, "BulletHelper.add_sb_index_column", "GeomVertexFormat");
  }
  ConstPointerTo< GeomVertexFormat > return_value = (BulletHelper::add_sb_index_column)(std::move(arg_this));
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  GeomVertexFormat const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_GeomVertexFormat, true, true);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_sb_index_column(const GeomVertexFormat format)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_add_sb_index_column_991_comment =
  "C++ Interface:\n"
  "add_sb_index_column(const GeomVertexFormat format)\n"
  "\n"
  "// Geom vertex data\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_add_sb_index_column_991_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_flip_column(GeomVertexFormat const *format)
 */
static PyObject *Dtool_BulletHelper_add_sb_flip_column_992(PyObject *, PyObject *arg) {
  // 1-static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_flip_column(GeomVertexFormat const *format)
  CPT(GeomVertexFormat) arg_this;
  if (!Dtool_ConstCoerce_GeomVertexFormat(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 0, "BulletHelper.add_sb_flip_column", "GeomVertexFormat");
  }
  ConstPointerTo< GeomVertexFormat > return_value = (BulletHelper::add_sb_flip_column)(std::move(arg_this));
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  GeomVertexFormat const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_GeomVertexFormat, true, true);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_sb_flip_column(const GeomVertexFormat format)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_add_sb_flip_column_992_comment =
  "C++ Interface:\n"
  "add_sb_flip_column(const GeomVertexFormat format)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_add_sb_flip_column_992_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< Geom > BulletHelper::make_geom_from_faces(BulletSoftBodyNode *node, GeomVertexFormat const *format = nullptr, bool two_sided = false)
 */
static PyObject *Dtool_BulletHelper_make_geom_from_faces_993(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static PointerTo< Geom > BulletHelper::make_geom_from_faces(BulletSoftBodyNode *node, GeomVertexFormat const *format = nullptr, bool two_sided = false)
  PyObject *param0;
  PyObject *param1 = nullptr;
  PyObject *param2 = Py_False;
  static const char *keyword_list[] = {"node", "format", "two_sided", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|OO:make_geom_from_faces", (char **)keyword_list, &param0, &param1, &param2)) {
    BulletSoftBodyNode *param0_this = (BulletSoftBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyNode, 0, "BulletHelper.make_geom_from_faces", false, true);
    CPT(GeomVertexFormat) param1_this;
    if (param1 != nullptr && param1 != Py_None && !Dtool_ConstCoerce_GeomVertexFormat(param1, param1_this)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletHelper.make_geom_from_faces", "GeomVertexFormat");
    }
    if (param0_this != nullptr) {
      PointerTo< Geom > return_value = (BulletHelper::make_geom_from_faces)(param0_this, std::move(param1_this), (PyObject_IsTrue(param2) != 0));
      if (Dtool_CheckErrorOccurred()) {
        return nullptr;
      }
      // Transfer ownership of return_value.
      Geom *return_ptr = return_value.p();
      return_value.cheat() = nullptr;
      if (return_ptr == nullptr) {
        Py_INCREF(Py_None);
        return Py_None;
      } else {
        return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_Geom, true, false, return_ptr->as_typed_object()->get_type_index());
      }
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_geom_from_faces(BulletSoftBodyNode node, const GeomVertexFormat format, bool two_sided)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_make_geom_from_faces_993_comment =
  "C++ Interface:\n"
  "make_geom_from_faces(BulletSoftBodyNode node, const GeomVertexFormat format, bool two_sided)\n"
  "\n"
  "// Geom utils\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_make_geom_from_faces_993_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< Geom > BulletHelper::make_geom_from_links(BulletSoftBodyNode *node, GeomVertexFormat const *format = nullptr)
 */
static PyObject *Dtool_BulletHelper_make_geom_from_links_994(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static PointerTo< Geom > BulletHelper::make_geom_from_links(BulletSoftBodyNode *node, GeomVertexFormat const *format = nullptr)
  PyObject *param0;
  PyObject *param1 = nullptr;
  static const char *keyword_list[] = {"node", "format", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:make_geom_from_links", (char **)keyword_list, &param0, &param1)) {
    BulletSoftBodyNode *param0_this = (BulletSoftBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyNode, 0, "BulletHelper.make_geom_from_links", false, true);
    CPT(GeomVertexFormat) param1_this;
    if (param1 != nullptr && param1 != Py_None && !Dtool_ConstCoerce_GeomVertexFormat(param1, param1_this)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletHelper.make_geom_from_links", "GeomVertexFormat");
    }
    if (param0_this != nullptr) {
      PointerTo< Geom > return_value = (BulletHelper::make_geom_from_links)(param0_this, std::move(param1_this));
      if (Dtool_CheckErrorOccurred()) {
        return nullptr;
      }
      // Transfer ownership of return_value.
      Geom *return_ptr = return_value.p();
      return_value.cheat() = nullptr;
      if (return_ptr == nullptr) {
        Py_INCREF(Py_None);
        return Py_None;
      } else {
        return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_Geom, true, false, return_ptr->as_typed_object()->get_type_index());
      }
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_geom_from_links(BulletSoftBodyNode node, const GeomVertexFormat format)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_make_geom_from_links_994_comment =
  "C++ Interface:\n"
  "make_geom_from_links(BulletSoftBodyNode node, const GeomVertexFormat format)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_make_geom_from_links_994_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static void BulletHelper::make_texcoords_for_patch(Geom *geom, int resx, int resy)
 */
static PyObject *Dtool_BulletHelper_make_texcoords_for_patch_995(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static void BulletHelper::make_texcoords_for_patch(Geom *geom, int resx, int resy)
  PyObject *param0;
  int param1;
  int param2;
  static const char *keyword_list[] = {"geom", "resx", "resy", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "Oii:make_texcoords_for_patch", (char **)keyword_list, &param0, &param1, &param2)) {
    Geom *param0_this = (Geom *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_Geom, 0, "BulletHelper.make_texcoords_for_patch", false, true);
    if (param0_this != nullptr) {
      (BulletHelper::make_texcoords_for_patch)(param0_this, (int)param1, (int)param2);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_texcoords_for_patch(Geom geom, int resx, int resy)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_make_texcoords_for_patch_995_comment =
  "C++ Interface:\n"
  "make_texcoords_for_patch(Geom geom, int resx, int resy)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_make_texcoords_for_patch_995_comment = nullptr;
#endif

static PyObject *Dtool_BulletHelper_sb_index_Getter(PyObject *self, void *) {
  // 1-static inline PointerTo< InternalName > BulletHelper::get_sb_index(void)
  PointerTo< InternalName > return_value = (BulletHelper::get_sb_index)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  // Transfer ownership of return_value.
  InternalName *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_InternalName, true, false);
}

static PyObject *Dtool_BulletHelper_sb_flip_Getter(PyObject *self, void *) {
  // 1-static inline PointerTo< InternalName > BulletHelper::get_sb_flip(void)
  PointerTo< InternalName > return_value = (BulletHelper::get_sb_flip)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  // Transfer ownership of return_value.
  InternalName *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_InternalName, true, false);
}

/**
 * Python function wrapper for:
 * inline BulletHelper::BulletHelper(void) = default
 * inline BulletHelper::BulletHelper(BulletHelper const &) = default
 */
static int Dtool_Init_BulletHelper(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletHelper() takes no keyword arguments");
    return -1;
#endif
  }
  int parameter_count = (int)PyTuple_Size(args);
  switch (parameter_count) {
  case 0:
    {
      // 1-inline BulletHelper::BulletHelper(void) = default
      BulletHelper *return_value = new BulletHelper();
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHelper, true, false);
    }
    break;
  case 1:
    {
      PyObject *arg = PyTuple_GET_ITEM(args, 0);
      // 1-inline BulletHelper::BulletHelper(BulletHelper const &) = default
      BulletHelper const *arg_this = (BulletHelper *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletHelper, 0, "BulletHelper.BulletHelper", true, true);
      if (arg_this != nullptr) {
        BulletHelper *return_value = new BulletHelper(*arg_this);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        if (Dtool_CheckErrorOccurred()) {
          delete return_value;
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHelper, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletHelper() takes 0 or 1 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletHelper()\n"
      "BulletHelper(const BulletHelper param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletHelper(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletHelper) {
    printf("BulletHelper ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletHelper *local_this = (BulletHelper *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletHelper) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletHelper(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletHelper) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletHingeConstraint
 */
/**
 * Python function wrapper for:
 * PN_stdfloat BulletHingeConstraint::get_hinge_angle(void)
 */
static PyObject *Dtool_BulletHingeConstraint_get_hinge_angle_1003(PyObject *self, PyObject *) {
  BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.get_hinge_angle")) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletHingeConstraint::get_hinge_angle(void)
  PN_stdfloat return_value = ((*local_this).get_hinge_angle)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_hinge_angle_1003_comment =
  "C++ Interface:\n"
  "get_hinge_angle(const BulletHingeConstraint self)\n"
  "\n"
  "/**\n"
  " * Returns the angle between node_a and node_b in degrees.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_get_hinge_angle_1003_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletHingeConstraint::get_lower_limit(void) const
 */
static PyObject *Dtool_BulletHingeConstraint_get_lower_limit_1004(PyObject *self, PyObject *) {
  BulletHingeConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletHingeConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletHingeConstraint::get_lower_limit(void) const
  PN_stdfloat return_value = ((*(const BulletHingeConstraint*)local_this).get_lower_limit)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_lower_limit_1004_comment =
  "C++ Interface:\n"
  "get_lower_limit(BulletHingeConstraint self)\n"
  "\n"
  "/**\n"
  " * Returns the lower angular limit in degrees.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_get_lower_limit_1004_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletHingeConstraint::get_upper_limit(void) const
 */
static PyObject *Dtool_BulletHingeConstraint_get_upper_limit_1005(PyObject *self, PyObject *) {
  BulletHingeConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletHingeConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletHingeConstraint::get_upper_limit(void) const
  PN_stdfloat return_value = ((*(const BulletHingeConstraint*)local_this).get_upper_limit)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_upper_limit_1005_comment =
  "C++ Interface:\n"
  "get_upper_limit(BulletHingeConstraint self)\n"
  "\n"
  "/**\n"
  " * Returns the upper angular limit in degrees.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_get_upper_limit_1005_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletHingeConstraint::get_angular_only(void) const
 */
static PyObject *Dtool_BulletHingeConstraint_get_angular_only_1006(PyObject *self, PyObject *) {
  BulletHingeConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletHingeConstraint)) {
    return nullptr;
  }
  // 1-bool BulletHingeConstraint::get_angular_only(void) const
  bool return_value = ((*(const BulletHingeConstraint*)local_this).get_angular_only)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_angular_only_1006_comment =
  "C++ Interface:\n"
  "get_angular_only(BulletHingeConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_get_angular_only_1006_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::set_angular_only(bool value)
 */
static PyObject *Dtool_BulletHingeConstraint_set_angular_only_1007(PyObject *self, PyObject *arg) {
  BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.set_angular_only")) {
    return nullptr;
  }
  // 1-void BulletHingeConstraint::set_angular_only(bool value)
  ((*local_this).set_angular_only)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_only(const BulletHingeConstraint self, bool value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_set_angular_only_1007_comment =
  "C++ Interface:\n"
  "set_angular_only(const BulletHingeConstraint self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_set_angular_only_1007_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::set_limit(PN_stdfloat low, PN_stdfloat high, PN_stdfloat softness = 0.9, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0)
 */
static PyObject *Dtool_BulletHingeConstraint_set_limit_1008(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.set_limit")) {
    return nullptr;
  }
  // 1-void BulletHingeConstraint::set_limit(PN_stdfloat low, PN_stdfloat high, PN_stdfloat softness = 0.9, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0)
  float param1;
  float param2;
  float param3 = 0.9;
  float param4 = 0.30000000000000007;
  float param5 = 1.0;
  static const char *keyword_list[] = {"low", "high", "softness", "bias", "relaxation", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "ff|fff:set_limit", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5)) {
    ((*local_this).set_limit)((PN_stdfloat)param1, (PN_stdfloat)param2, (PN_stdfloat)param3, (PN_stdfloat)param4, (PN_stdfloat)param5);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_limit(const BulletHingeConstraint self, float low, float high, float softness, float bias, float relaxation)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_set_limit_1008_comment =
  "C++ Interface:\n"
  "set_limit(const BulletHingeConstraint self, float low, float high, float softness, float bias, float relaxation)\n"
  "\n"
  "/**\n"
  " * Sets the lower and upper rotational limits in degrees.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_set_limit_1008_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::set_axis(LVector3 const &axis)
 */
static PyObject *Dtool_BulletHingeConstraint_set_axis_1009(PyObject *self, PyObject *arg) {
  BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.set_axis")) {
    return nullptr;
  }
  // 1-void BulletHingeConstraint::set_axis(LVector3 const &axis)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletHingeConstraint.set_axis", "LVector3f");
  }
  ((*local_this).set_axis)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_axis(const BulletHingeConstraint self, const LVector3f axis)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_set_axis_1009_comment =
  "C++ Interface:\n"
  "set_axis(const BulletHingeConstraint self, const LVector3f axis)\n"
  "\n"
  "/**\n"
  " * Sets the hinge's rotation axis in world coordinates.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_set_axis_1009_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::enable_angular_motor(bool enable, PN_stdfloat target_velocity, PN_stdfloat max_impulse)
 */
static PyObject *Dtool_BulletHingeConstraint_enable_angular_motor_1010(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.enable_angular_motor")) {
    return nullptr;
  }
  // 1-void BulletHingeConstraint::enable_angular_motor(bool enable, PN_stdfloat target_velocity, PN_stdfloat max_impulse)
  PyObject *param1;
  float param2;
  float param3;
  static const char *keyword_list[] = {"enable", "target_velocity", "max_impulse", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "Off:enable_angular_motor", (char **)keyword_list, &param1, &param2, &param3)) {
    ((*local_this).enable_angular_motor)((PyObject_IsTrue(param1) != 0), (PN_stdfloat)param2, (PN_stdfloat)param3);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "enable_angular_motor(const BulletHingeConstraint self, bool enable, float target_velocity, float max_impulse)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_enable_angular_motor_1010_comment =
  "C++ Interface:\n"
  "enable_angular_motor(const BulletHingeConstraint self, bool enable, float target_velocity, float max_impulse)\n"
  "\n"
  "/**\n"
  " * Applies an impulse to the constraint so that the angle changes at\n"
  " * target_velocity where max_impulse is the maximum impulse that is used for\n"
  " * achieving the specified velocity.\n"
  " *\n"
  " * Note that the target_velocity is in radians/second, not degrees.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_enable_angular_motor_1010_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::enable_motor(bool enable)
 */
static PyObject *Dtool_BulletHingeConstraint_enable_motor_1011(PyObject *self, PyObject *arg) {
  BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.enable_motor")) {
    return nullptr;
  }
  // 1-void BulletHingeConstraint::enable_motor(bool enable)
  ((*local_this).enable_motor)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "enable_motor(const BulletHingeConstraint self, bool enable)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_enable_motor_1011_comment =
  "C++ Interface:\n"
  "enable_motor(const BulletHingeConstraint self, bool enable)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_enable_motor_1011_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::set_max_motor_impulse(PN_stdfloat max_impulse)
 */
static PyObject *Dtool_BulletHingeConstraint_set_max_motor_impulse_1012(PyObject *self, PyObject *arg) {
  BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.set_max_motor_impulse")) {
    return nullptr;
  }
  // 1-void BulletHingeConstraint::set_max_motor_impulse(PN_stdfloat max_impulse)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_motor_impulse)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_motor_impulse(const BulletHingeConstraint self, float max_impulse)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_set_max_motor_impulse_1012_comment =
  "C++ Interface:\n"
  "set_max_motor_impulse(const BulletHingeConstraint self, float max_impulse)\n"
  "\n"
  "/**\n"
  " * Sets the maximum impulse used to achieve the velocity set in\n"
  " * enable_angular_motor.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_set_max_motor_impulse_1012_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::set_motor_target(LQuaternion const &quat, PN_stdfloat dt)
 * void BulletHingeConstraint::set_motor_target(PN_stdfloat target_angle, PN_stdfloat dt)
 */
static PyObject *Dtool_BulletHingeConstraint_set_motor_target_1013(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.set_motor_target")) {
    return nullptr;
  }
  {
    // -2 void BulletHingeConstraint::set_motor_target(LQuaternion const &quat, PN_stdfloat dt)
    PyObject *param1;
    float param2;
    static const char *keyword_list[] = {"quat", "dt", nullptr};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "Of:set_motor_target", (char **)keyword_list, &param1, &param2)) {
      LQuaternion const *param1_this = nullptr;
      DtoolInstance_GetPointer(param1, param1_this, *Dtool_Ptr_LQuaternionf);
      if (param1_this != nullptr) {
        ((*local_this).set_motor_target)(*param1_this, (PN_stdfloat)param2);
        return Dtool_Return_None();
      }
    }
    PyErr_Clear();
  }

  {
    // -2 void BulletHingeConstraint::set_motor_target(PN_stdfloat target_angle, PN_stdfloat dt)
    float param1;
    float param2;
    static const char *keyword_list[] = {"target_angle", "dt", nullptr};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "ff:set_motor_target", (char **)keyword_list, &param1, &param2)) {
      ((*local_this).set_motor_target)((PN_stdfloat)param1, (PN_stdfloat)param2);
      return Dtool_Return_None();
    }
    PyErr_Clear();
  }

  {
    // -2 void BulletHingeConstraint::set_motor_target(LQuaternion const &quat, PN_stdfloat dt)
    PyObject *param1;
    float param2;
    static const char *keyword_list[] = {"quat", "dt", nullptr};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "Of:set_motor_target", (char **)keyword_list, &param1, &param2)) {
      LQuaternionf param1_local;
      LQuaternion const *param1_this = Dtool_Coerce_LQuaternionf(param1, param1_local);
      if ((param1_this != nullptr)) {
        ((*local_this).set_motor_target)(*param1_this, (PN_stdfloat)param2);
        return Dtool_Return_None();
      }
    }
    PyErr_Clear();
  }

  // No coercion possible: void BulletHingeConstraint::set_motor_target(PN_stdfloat target_angle, PN_stdfloat dt)
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_motor_target(const BulletHingeConstraint self, const LQuaternionf quat, float dt)\n"
      "set_motor_target(const BulletHingeConstraint self, float target_angle, float dt)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_set_motor_target_1013_comment =
  "C++ Interface:\n"
  "set_motor_target(const BulletHingeConstraint self, const LQuaternionf quat, float dt)\n"
  "set_motor_target(const BulletHingeConstraint self, float target_angle, float dt)\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_set_motor_target_1013_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
 */
static PyObject *Dtool_BulletHingeConstraint_set_frames_1014(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.set_frames")) {
    return nullptr;
  }
  // 1-void BulletHingeConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"ts_a", "ts_b", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:set_frames", (char **)keyword_list, &param1, &param2)) {
    TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletHingeConstraint.set_frames", true, true);
    TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletHingeConstraint.set_frames", true, true);
    if (param1_this != nullptr && param2_this != nullptr) {
      ((*local_this).set_frames)(param1_this, param2_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_frames(const BulletHingeConstraint self, const TransformState ts_a, const TransformState ts_b)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_set_frames_1014_comment =
  "C++ Interface:\n"
  "set_frames(const BulletHingeConstraint self, const TransformState ts_a, const TransformState ts_b)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_set_frames_1014_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_a(void) const
 */
static PyObject *Dtool_BulletHingeConstraint_get_frame_a_1015(PyObject *self, PyObject *) {
  BulletHingeConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletHingeConstraint)) {
    return nullptr;
  }
  // 1-ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_a(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletHingeConstraint*)local_this).get_frame_a)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_frame_a_1015_comment =
  "C++ Interface:\n"
  "get_frame_a(BulletHingeConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_get_frame_a_1015_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_b(void) const
 */
static PyObject *Dtool_BulletHingeConstraint_get_frame_b_1016(PyObject *self, PyObject *) {
  BulletHingeConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletHingeConstraint)) {
    return nullptr;
  }
  // 1-ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_b(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletHingeConstraint*)local_this).get_frame_b)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_frame_b_1016_comment =
  "C++ Interface:\n"
  "get_frame_b(BulletHingeConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_get_frame_b_1016_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletHingeConstraint::get_class_type(void)
 */
static PyObject *Dtool_BulletHingeConstraint_get_class_type_1023(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletHingeConstraint::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletHingeConstraint::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_class_type_1023_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletHingeConstraint_get_class_type_1023_comment = nullptr;
#endif

static PyObject *Dtool_BulletHingeConstraint_hinge_angle_Getter(PyObject *self, void *) {
  BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.hinge_angle")) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletHingeConstraint::get_hinge_angle(void)
  PN_stdfloat return_value = ((*local_this).get_hinge_angle)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletHingeConstraint_lower_limit_Getter(PyObject *self, void *) {
  const BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletHingeConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletHingeConstraint::get_lower_limit(void) const
  PN_stdfloat return_value = ((*(const BulletHingeConstraint*)local_this).get_lower_limit)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletHingeConstraint_upper_limit_Getter(PyObject *self, void *) {
  const BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletHingeConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletHingeConstraint::get_upper_limit(void) const
  PN_stdfloat return_value = ((*(const BulletHingeConstraint*)local_this).get_upper_limit)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletHingeConstraint_angular_only_Getter(PyObject *self, void *) {
  const BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletHingeConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletHingeConstraint::get_angular_only(void) const
  bool return_value = ((*(const BulletHingeConstraint*)local_this).get_angular_only)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletHingeConstraint_angular_only_Setter(PyObject *self, PyObject *arg, void *) {
  BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.angular_only")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete angular_only attribute");
    return -1;
  }
  // 1-void BulletHingeConstraint::set_angular_only(bool value)
  ((*local_this).set_angular_only)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_angular_only(const BulletHingeConstraint self, bool value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletHingeConstraint_frame_a_Getter(PyObject *self, void *) {
  const BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletHingeConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_a(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletHingeConstraint*)local_this).get_frame_a)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

static PyObject *Dtool_BulletHingeConstraint_frame_b_Getter(PyObject *self, void *) {
  const BulletHingeConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletHingeConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_b(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletHingeConstraint*)local_this).get_frame_b)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

/**
 * Python function wrapper for:
 * explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b, LVector3 const &axis_a, LVector3 const &axis_b, bool use_frame_a = false)
 * explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a = false)
 * explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a = false)
 * explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a = false)
 */
static int Dtool_Init_BulletHingeConstraint(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a)
      PyObject *param0;
      PyObject *param1;
      static const char *keyword_list[] = {"node_a", "ts_a", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        if (param0_this != nullptr && param1_this != nullptr) {
          BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
        }
      }
    }
    break;
  case 3:
    {
      {
        // -2 explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        static const char *keyword_list[] = {"node_a", "pivot_a", "axis_a", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2)) {
          BulletRigidBodyNode const *param0_this = nullptr;
          DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_BulletRigidBodyNode);
          LPoint3 const *param1_this = nullptr;
          DtoolInstance_GetPointer(param1, param1_this, *Dtool_Ptr_LPoint3f);
          LVector3 const *param2_this = nullptr;
          DtoolInstance_GetPointer(param2, param2_this, *Dtool_Ptr_LVector3f);
          if (param0_this != nullptr && param1_this != nullptr && param2_this != nullptr) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, *param1_this, *param2_this);
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        static const char *keyword_list[] = {"node_a", "ts_a", "use_frame_a", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2)) {
          BulletRigidBodyNode const *param0_this = nullptr;
          DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_BulletRigidBodyNode);
          TransformState const *param1_this = nullptr;
          DtoolInstance_GetPointer(param1, param1_this, *Dtool_Ptr_TransformState);
          if (param0_this != nullptr && param1_this != nullptr) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        static const char *keyword_list[] = {"node_a", "pivot_a", "axis_a", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2)) {
          BulletRigidBodyNode const *param0_this = nullptr;
          DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_BulletRigidBodyNode);
          LPoint3f param1_local;
          LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
          LVector3f param2_local;
          LVector3 const *param2_this = Dtool_Coerce_LVector3f(param2, param2_local);
          if (param0_this != nullptr && (param1_this != nullptr) && (param2_this != nullptr)) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, *param1_this, *param2_this);
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a)
    }
    break;
  case 4:
    {
      {
        // -2 explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        static const char *keyword_list[] = {"node_a", "node_b", "ts_a", "ts_b", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletRigidBodyNode const *param0_this = nullptr;
          DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_BulletRigidBodyNode);
          BulletRigidBodyNode const *param1_this = nullptr;
          DtoolInstance_GetPointer(param1, param1_this, *Dtool_Ptr_BulletRigidBodyNode);
          TransformState const *param2_this = nullptr;
          DtoolInstance_GetPointer(param2, param2_this, *Dtool_Ptr_TransformState);
          TransformState const *param3_this = nullptr;
          DtoolInstance_GetPointer(param3, param3_this, *Dtool_Ptr_TransformState);
          if (param0_this != nullptr && param1_this != nullptr && param2_this != nullptr && param3_this != nullptr) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, param2_this, param3_this);
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a)
      {
        // -2 explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        static const char *keyword_list[] = {"node_a", "pivot_a", "axis_a", "use_frame_a", nullptr};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletRigidBodyNode const *param0_this = nullptr;
          DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_BulletRigidBodyNode);
          LPoint3f param1_local;
          LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
          LVector3f param2_local;
          LVector3 const *param2_this = Dtool_Coerce_LVector3f(param2, param2_local);
          if (param0_this != nullptr && (param1_this != nullptr) && (param2_this != nullptr)) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, *param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
          }
        }
        PyErr_Clear();
      }

    }
    break;
  case 5:
    {
      // 1-explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      PyObject *param4;
      static const char *keyword_list[] = {"node_a", "node_b", "ts_a", "ts_b", "use_frame_a", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOOO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        BulletRigidBodyNode const *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        TransformState const *param3_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param3, Dtool_Ptr_TransformState, 3, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        if (param0_this != nullptr && param1_this != nullptr && param2_this != nullptr && param3_this != nullptr) {
          BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, param2_this, param3_this, (PyObject_IsTrue(param4) != 0));
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
        }
      }
    }
    break;
  case 6:
  case 7:
    {
      // 1-explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b, LVector3 const &axis_a, LVector3 const &axis_b, bool use_frame_a = false)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      PyObject *param4;
      PyObject *param5;
      PyObject *param6 = Py_False;
      static const char *keyword_list[] = {"node_a", "node_b", "pivot_a", "pivot_b", "axis_a", "axis_b", "use_frame_a", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOO|O:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4, &param5, &param6)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        BulletRigidBodyNode const *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        LPoint3f param2_local;
        LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
        if (!(param2_this != nullptr)) {
          Dtool_Raise_ArgTypeError(param2, 2, "BulletHingeConstraint.BulletHingeConstraint", "LPoint3f");
          return -1;
        }
        LPoint3f param3_local;
        LPoint3 const *param3_this = Dtool_Coerce_LPoint3f(param3, param3_local);
        if (!(param3_this != nullptr)) {
          Dtool_Raise_ArgTypeError(param3, 3, "BulletHingeConstraint.BulletHingeConstraint", "LPoint3f");
          return -1;
        }
        LVector3f param4_local;
        LVector3 const *param4_this = Dtool_Coerce_LVector3f(param4, param4_local);
        if (!(param4_this != nullptr)) {
          Dtool_Raise_ArgTypeError(param4, 4, "BulletHingeConstraint.BulletHingeConstraint", "LVector3f");
          return -1;
        }
        LVector3f param5_local;
        LVector3 const *param5_this = Dtool_Coerce_LVector3f(param5, param5_local);
        if (!(param5_this != nullptr)) {
          Dtool_Raise_ArgTypeError(param5, 5, "BulletHingeConstraint.BulletHingeConstraint", "LVector3f");
          return -1;
        }
        if (param0_this != nullptr && param1_this != nullptr) {
          BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, *param2_this, *param3_this, *param4_this, *param5_this, (PyObject_IsTrue(param6) != 0));
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletHingeConstraint() takes 2, 3, 4, 5, 6 or 7 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletHingeConstraint(const BulletRigidBodyNode node_a, const TransformState ts_a)\n"
      "BulletHingeConstraint(const BulletRigidBodyNode node_a, const LPoint3f pivot_a, const LVector3f axis_a)\n"
      "BulletHingeConstraint(const BulletRigidBodyNode node_a, const TransformState ts_a, bool use_frame_a)\n"
      "BulletHingeConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const TransformState ts_a, const TransformState ts_b)\n"
      "BulletHingeConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const TransformState ts_a, const TransformState ts_b, bool use_frame_a)\n"
      "BulletHingeConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const LPoint3f pivot_a, const LPoint3f pivot_b, const LVector3f axis_a, const LVector3f axis_b, bool use_frame_a)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletHingeConstraint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletHingeConstraint) {
    printf("BulletHingeConstraint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletHingeConstraint *local_this = (BulletHingeConstraint *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletHingeConstraint) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletConstraint) {
    return (BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletHingeConstraint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletHingeConstraint) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletConstraint) {
    BulletConstraint* other_this = (BulletConstraint*)from_this;
    return (BulletHingeConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletHingeConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletHingeConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletHingeConstraint*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletMinkowskiSumShape
 */
/**
 * Python function wrapper for:
 * void BulletMinkowskiSumShape::set_transform_a(TransformState const *ts)
 */
static PyObject *Dtool_BulletMinkowskiSumShape_set_transform_a_1026(PyObject *self, PyObject *arg) {
  BulletMinkowskiSumShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this, "BulletMinkowskiSumShape.set_transform_a")) {
    return nullptr;
  }
  // 1-void BulletMinkowskiSumShape::set_transform_a(TransformState const *ts)
  TransformState const *arg_this = (TransformState *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_TransformState, 1, "BulletMinkowskiSumShape.set_transform_a", true, true);
  if (arg_this != nullptr) {
    ((*local_this).set_transform_a)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_transform_a(const BulletMinkowskiSumShape self, const TransformState ts)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_set_transform_a_1026_comment =
  "C++ Interface:\n"
  "set_transform_a(const BulletMinkowskiSumShape self, const TransformState ts)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMinkowskiSumShape_set_transform_a_1026_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletMinkowskiSumShape::set_transform_b(TransformState const *ts)
 */
static PyObject *Dtool_BulletMinkowskiSumShape_set_transform_b_1027(PyObject *self, PyObject *arg) {
  BulletMinkowskiSumShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this, "BulletMinkowskiSumShape.set_transform_b")) {
    return nullptr;
  }
  // 1-void BulletMinkowskiSumShape::set_transform_b(TransformState const *ts)
  TransformState const *arg_this = (TransformState *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_TransformState, 1, "BulletMinkowskiSumShape.set_transform_b", true, true);
  if (arg_this != nullptr) {
    ((*local_this).set_transform_b)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_transform_b(const BulletMinkowskiSumShape self, const TransformState ts)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_set_transform_b_1027_comment =
  "C++ Interface:\n"
  "set_transform_b(const BulletMinkowskiSumShape self, const TransformState ts)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMinkowskiSumShape_set_transform_b_1027_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_a(void) const
 */
static PyObject *Dtool_BulletMinkowskiSumShape_get_transform_a_1028(PyObject *self, PyObject *) {
  BulletMinkowskiSumShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletMinkowskiSumShape)) {
    return nullptr;
  }
  // 1-ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_a(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletMinkowskiSumShape*)local_this).get_transform_a)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_get_transform_a_1028_comment =
  "C++ Interface:\n"
  "get_transform_a(BulletMinkowskiSumShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMinkowskiSumShape_get_transform_a_1028_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_b(void) const
 */
static PyObject *Dtool_BulletMinkowskiSumShape_get_transform_b_1029(PyObject *self, PyObject *) {
  BulletMinkowskiSumShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletMinkowskiSumShape)) {
    return nullptr;
  }
  // 1-ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_b(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletMinkowskiSumShape*)local_this).get_transform_b)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_get_transform_b_1029_comment =
  "C++ Interface:\n"
  "get_transform_b(BulletMinkowskiSumShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMinkowskiSumShape_get_transform_b_1029_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline BulletShape const *BulletMinkowskiSumShape::get_shape_a(void) const
 */
static PyObject *Dtool_BulletMinkowskiSumShape_get_shape_a_1030(PyObject *self, PyObject *) {
  BulletMinkowskiSumShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletMinkowskiSumShape)) {
    return nullptr;
  }
  // 1-inline BulletShape const *BulletMinkowskiSumShape::get_shape_a(void) const
  BulletShape const *return_value = ((*(const BulletMinkowskiSumShape*)local_this).get_shape_a)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletShape, true, true, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_get_shape_a_1030_comment =
  "C++ Interface:\n"
  "get_shape_a(BulletMinkowskiSumShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMinkowskiSumShape_get_shape_a_1030_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline BulletShape const *BulletMinkowskiSumShape::get_shape_b(void) const
 */
static PyObject *Dtool_BulletMinkowskiSumShape_get_shape_b_1031(PyObject *self, PyObject *) {
  BulletMinkowskiSumShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletMinkowskiSumShape)) {
    return nullptr;
  }
  // 1-inline BulletShape const *BulletMinkowskiSumShape::get_shape_b(void) const
  BulletShape const *return_value = ((*(const BulletMinkowskiSumShape*)local_this).get_shape_b)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletShape, true, true, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_get_shape_b_1031_comment =
  "C++ Interface:\n"
  "get_shape_b(BulletMinkowskiSumShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMinkowskiSumShape_get_shape_b_1031_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletMinkowskiSumShape::get_class_type(void)
 */
static PyObject *Dtool_BulletMinkowskiSumShape_get_class_type_1038(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletMinkowskiSumShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletMinkowskiSumShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_get_class_type_1038_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletMinkowskiSumShape_get_class_type_1038_comment = nullptr;
#endif

static PyObject *Dtool_BulletMinkowskiSumShape_transform_a_Getter(PyObject *self, void *) {
  const BulletMinkowskiSumShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_a(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletMinkowskiSumShape*)local_this).get_transform_a)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

static int Dtool_BulletMinkowskiSumShape_transform_a_Setter(PyObject *self, PyObject *arg, void *) {
  BulletMinkowskiSumShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this, "BulletMinkowskiSumShape.transform_a")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete transform_a attribute");
    return -1;
  }
  // 1-void BulletMinkowskiSumShape::set_transform_a(TransformState const *ts)
  TransformState const *arg_this = (TransformState *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_TransformState, 1, "BulletMinkowskiSumShape.set_transform_a", true, true);
  if (arg_this != nullptr) {
    ((*local_this).set_transform_a)(arg_this);
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_transform_a(const BulletMinkowskiSumShape self, const TransformState ts)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletMinkowskiSumShape_transform_b_Getter(PyObject *self, void *) {
  const BulletMinkowskiSumShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_b(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletMinkowskiSumShape*)local_this).get_transform_b)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

static int Dtool_BulletMinkowskiSumShape_transform_b_Setter(PyObject *self, PyObject *arg, void *) {
  BulletMinkowskiSumShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this, "BulletMinkowskiSumShape.transform_b")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete transform_b attribute");
    return -1;
  }
  // 1-void BulletMinkowskiSumShape::set_transform_b(TransformState const *ts)
  TransformState const *arg_this = (TransformState *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_TransformState, 1, "BulletMinkowskiSumShape.set_transform_b", true, true);
  if (arg_this != nullptr) {
    ((*local_this).set_transform_b)(arg_this);
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_transform_b(const BulletMinkowskiSumShape self, const TransformState ts)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletMinkowskiSumShape_shape_a_Getter(PyObject *self, void *) {
  const BulletMinkowskiSumShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline BulletShape const *BulletMinkowskiSumShape::get_shape_a(void) const
  BulletShape const *return_value = ((*(const BulletMinkowskiSumShape*)local_this).get_shape_a)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletShape, true, true, return_value->as_typed_object()->get_type_index());
  }
}

static PyObject *Dtool_BulletMinkowskiSumShape_shape_b_Getter(PyObject *self, void *) {
  const BulletMinkowskiSumShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline BulletShape const *BulletMinkowskiSumShape::get_shape_b(void) const
  BulletShape const *return_value = ((*(const BulletMinkowskiSumShape*)local_this).get_shape_b)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletShape, true, true, return_value->as_typed_object()->get_type_index());
  }
}

/**
 * Python function wrapper for:
 * BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletMinkowskiSumShape const &copy)
 * explicit BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletShape const *shape_a, BulletShape const *shape_b)
 */
static int Dtool_Init_BulletMinkowskiSumShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg;
      if (Dtool_ExtractArg(&arg, args, kwds, "copy")) {
        // 1-BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletMinkowskiSumShape const &copy)
        BulletMinkowskiSumShape const *arg_this = (BulletMinkowskiSumShape *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletMinkowskiSumShape, 0, "BulletMinkowskiSumShape.BulletMinkowskiSumShape", true, true);
        if (arg_this != nullptr) {
          BulletMinkowskiSumShape *return_value = new BulletMinkowskiSumShape(*arg_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletMinkowskiSumShape, true, false);
        }
      }
    }
    break;
  case 2:
    {
      // 1-explicit BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletShape const *shape_a, BulletShape const *shape_b)
      PyObject *param0;
      PyObject *param1;
      static const char *keyword_list[] = {"shape_a", "shape_b", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletMinkowskiSumShape", (char **)keyword_list, &param0, &param1)) {
        BulletShape const *param0_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletShape, 0, "BulletMinkowskiSumShape.BulletMinkowskiSumShape", true, true);
        BulletShape const *param1_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletShape, 1, "BulletMinkowskiSumShape.BulletMinkowskiSumShape", true, true);
        if (param0_this != nullptr && param1_this != nullptr) {
          BulletMinkowskiSumShape *return_value = new BulletMinkowskiSumShape(param0_this, param1_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletMinkowskiSumShape, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletMinkowskiSumShape() takes 1 or 2 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletMinkowskiSumShape(const BulletMinkowskiSumShape copy)\n"
      "BulletMinkowskiSumShape(const BulletShape shape_a, const BulletShape shape_b)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletMinkowskiSumShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletMinkowskiSumShape) {
    printf("BulletMinkowskiSumShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletMinkowskiSumShape *local_this = (BulletMinkowskiSumShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletMinkowskiSumShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletMinkowskiSumShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletMinkowskiSumShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletMinkowskiSumShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletMinkowskiSumShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletMinkowskiSumShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletMinkowskiSumShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletMinkowskiSumShape*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletMultiSphereShape
 */
/**
 * Python function wrapper for:
 * void BulletMultiSphereShape::operator =(BulletMultiSphereShape const &copy)
 */
static PyObject *Dtool_BulletMultiSphereShape_operator_1041(PyObject *self, PyObject *arg) {
  BulletMultiSphereShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletMultiSphereShape, (void **)&local_this, "BulletMultiSphereShape.assign")) {
    return nullptr;
  }
  // 1-void BulletMultiSphereShape::operator =(BulletMultiSphereShape const &copy)
  BulletMultiSphereShape const *arg_this = (BulletMultiSphereShape *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletMultiSphereShape, 1, "BulletMultiSphereShape.assign", true, true);
  if (arg_this != nullptr) {
    ((*local_this).operator =)(*arg_this);
    BulletMultiSphereShape *return_value = local_this;
    if (return_value != nullptr) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != nullptr) {
        unref_delete(return_value);
      }
      return nullptr;
    }
    if (return_value == nullptr) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletMultiSphereShape, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "assign(const BulletMultiSphereShape self, const BulletMultiSphereShape copy)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletMultiSphereShape_operator_1041_comment =
  "C++ Interface:\n"
  "assign(const BulletMultiSphereShape self, const BulletMultiSphereShape copy)\n";
#else
static const char *Dtool_BulletMultiSphereShape_operator_1041_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * int BulletMultiSphereShape::get_sphere_count(void) const
 */
static PyObject *Dtool_BulletMultiSphereShape_get_sphere_count_1042(PyObject *self, PyObject *) {
  BulletMultiSphereShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletMultiSphereShape)) {
    return nullptr;
  }
  // 1-int BulletMultiSphereShape::get_sphere_count(void) const
  int return_value = ((*(const BulletMultiSphereShape*)local_this).get_sphere_count)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletMultiSphereShape_get_sphere_count_1042_comment =
  "C++ Interface:\n"
  "get_sphere_count(BulletMultiSphereShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMultiSphereShape_get_sphere_count_1042_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletMultiSphereShape::get_sphere_pos(int index) const
 */
static PyObject *Dtool_BulletMultiSphereShape_get_sphere_pos_1043(PyObject *self, PyObject *arg) {
  BulletMultiSphereShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletMultiSphereShape)) {
    return nullptr;
  }
  // 1-LPoint3 BulletMultiSphereShape::get_sphere_pos(int index) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    LPoint3 *return_value = new LPoint3(((*(const BulletMultiSphereShape*)local_this).get_sphere_pos)((int)arg_val));
    if (return_value == nullptr) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return nullptr;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_sphere_pos(BulletMultiSphereShape self, int index)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletMultiSphereShape_get_sphere_pos_1043_comment =
  "C++ Interface:\n"
  "get_sphere_pos(BulletMultiSphereShape self, int index)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMultiSphereShape_get_sphere_pos_1043_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletMultiSphereShape::get_sphere_radius(int index) const
 */
static PyObject *Dtool_BulletMultiSphereShape_get_sphere_radius_1044(PyObject *self, PyObject *arg) {
  BulletMultiSphereShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletMultiSphereShape)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletMultiSphereShape::get_sphere_radius(int index) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    PN_stdfloat return_value = ((*(const BulletMultiSphereShape*)local_this).get_sphere_radius)((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return nullptr;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_sphere_radius(BulletMultiSphereShape self, int index)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletMultiSphereShape_get_sphere_radius_1044_comment =
  "C++ Interface:\n"
  "get_sphere_radius(BulletMultiSphereShape self, int index)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMultiSphereShape_get_sphere_radius_1044_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletMultiSphereShape::get_class_type(void)
 */
static PyObject *Dtool_BulletMultiSphereShape_get_class_type_1048(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletMultiSphereShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletMultiSphereShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletMultiSphereShape_get_class_type_1048_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletMultiSphereShape_get_class_type_1048_comment = nullptr;
#endif

static PyObject *Dtool_BulletMultiSphereShape_sphere_count_Getter(PyObject *self, void *) {
  const BulletMultiSphereShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMultiSphereShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-int BulletMultiSphereShape::get_sphere_count(void) const
  int return_value = ((*(const BulletMultiSphereShape*)local_this).get_sphere_count)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * sequence length function for property BulletMultiSphereShape::sphere_pos
 */
static Py_ssize_t Dtool_BulletMultiSphereShape_sphere_pos_Len(PyObject *self) {
  BulletMultiSphereShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMultiSphereShape, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_sphere_count)();
}

/**
 * sequence getter for property BulletMultiSphereShape::sphere_pos
 */
static PyObject *Dtool_BulletMultiSphereShape_sphere_pos_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletMultiSphereShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMultiSphereShape, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_sphere_count)()) {
    PyErr_SetString(PyExc_IndexError, "BulletMultiSphereShape.sphere_pos[] index out of range");
    return nullptr;
  }
  // 1-LPoint3 BulletMultiSphereShape::get_sphere_pos(int index) const
  LPoint3 *return_value = new LPoint3(((*(const BulletMultiSphereShape*)local_this).get_sphere_pos)(index));
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_sphere_pos(BulletMultiSphereShape self, index)\n");
  }
}

static PyObject *Dtool_BulletMultiSphereShape_sphere_pos_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletMultiSphereShape.sphere_pos");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletMultiSphereShape_sphere_pos_Len;
    wrap->_getitem_func = &Dtool_BulletMultiSphereShape_sphere_pos_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * sequence length function for property BulletMultiSphereShape::sphere_radius
 */
static Py_ssize_t Dtool_BulletMultiSphereShape_sphere_radius_Len(PyObject *self) {
  BulletMultiSphereShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMultiSphereShape, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_sphere_count)();
}

/**
 * sequence getter for property BulletMultiSphereShape::sphere_radius
 */
static PyObject *Dtool_BulletMultiSphereShape_sphere_radius_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletMultiSphereShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMultiSphereShape, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_sphere_count)()) {
    PyErr_SetString(PyExc_IndexError, "BulletMultiSphereShape.sphere_radius[] index out of range");
    return nullptr;
  }
  // 1-PN_stdfloat BulletMultiSphereShape::get_sphere_radius(int index) const
  PN_stdfloat return_value = ((*(const BulletMultiSphereShape*)local_this).get_sphere_radius)(index);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_sphere_radius(BulletMultiSphereShape self, index)\n");
  }
}

static PyObject *Dtool_BulletMultiSphereShape_sphere_radius_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletMultiSphereShape.sphere_radius");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletMultiSphereShape_sphere_radius_Len;
    wrap->_getitem_func = &Dtool_BulletMultiSphereShape_sphere_radius_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * Python function wrapper for:
 * BulletMultiSphereShape::BulletMultiSphereShape(BulletMultiSphereShape const &copy)
 * explicit BulletMultiSphereShape::BulletMultiSphereShape(PTA_LVecBase3 const &points, PTA_stdfloat const &radii)
 */
static int Dtool_Init_BulletMultiSphereShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg;
      if (Dtool_ExtractArg(&arg, args, kwds, "copy")) {
        // 1-BulletMultiSphereShape::BulletMultiSphereShape(BulletMultiSphereShape const &copy)
        BulletMultiSphereShape const *arg_this = (BulletMultiSphereShape *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletMultiSphereShape, 0, "BulletMultiSphereShape.BulletMultiSphereShape", true, true);
        if (arg_this != nullptr) {
          BulletMultiSphereShape *return_value = new BulletMultiSphereShape(*arg_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletMultiSphereShape, true, false);
        }
      }
    }
    break;
  case 2:
    {
      // 1-explicit BulletMultiSphereShape::BulletMultiSphereShape(PTA_LVecBase3 const &points, PTA_stdfloat const &radii)
      PyObject *param0;
      PyObject *param1;
      static const char *keyword_list[] = {"points", "radii", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletMultiSphereShape", (char **)keyword_list, &param0, &param1)) {
        PointerToArray< LVecBase3f > param0_local;
        PTA_LVecBase3 const *param0_this = Dtool_Coerce_PointerToArray_LVecBase3f(param0, param0_local);
        if (!(param0_this != nullptr)) {
          Dtool_Raise_ArgTypeError(param0, 0, "BulletMultiSphereShape.BulletMultiSphereShape", "PointerToArray");
          return -1;
        }
        PointerToArray< float > param1_local;
        PTA_stdfloat const *param1_this = Dtool_Coerce_PointerToArray_float(param1, param1_local);
        if (!(param1_this != nullptr)) {
          Dtool_Raise_ArgTypeError(param1, 1, "BulletMultiSphereShape.BulletMultiSphereShape", "PointerToArray");
          return -1;
        }
        BulletMultiSphereShape *return_value = new BulletMultiSphereShape(*param0_this, *param1_this);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletMultiSphereShape, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletMultiSphereShape() takes 1 or 2 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletMultiSphereShape(const BulletMultiSphereShape copy)\n"
      "BulletMultiSphereShape(const PointerToArray points, const PointerToArray radii)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletMultiSphereShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletMultiSphereShape) {
    printf("BulletMultiSphereShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletMultiSphereShape *local_this = (BulletMultiSphereShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletMultiSphereShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletMultiSphereShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletMultiSphereShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletMultiSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletMultiSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletMultiSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletMultiSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletMultiSphereShape*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletPlaneShape
 */
/**
 * Python function wrapper for:
 * LPlane BulletPlaneShape::get_plane(void) const
 */
static PyObject *Dtool_BulletPlaneShape_get_plane_1051(PyObject *self, PyObject *) {
  BulletPlaneShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletPlaneShape)) {
    return nullptr;
  }
  // 1-LPlane BulletPlaneShape::get_plane(void) const
  LPlane *return_value = new LPlane(((*(const BulletPlaneShape*)local_this).get_plane)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPlanef, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletPlaneShape_get_plane_1051_comment =
  "C++ Interface:\n"
  "get_plane(BulletPlaneShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPlaneShape_get_plane_1051_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletPlaneShape::get_plane_normal(void) const
 */
static PyObject *Dtool_BulletPlaneShape_get_plane_normal_1052(PyObject *self, PyObject *) {
  BulletPlaneShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletPlaneShape)) {
    return nullptr;
  }
  // 1-LVector3 BulletPlaneShape::get_plane_normal(void) const
  LVector3 *return_value = new LVector3(((*(const BulletPlaneShape*)local_this).get_plane_normal)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletPlaneShape_get_plane_normal_1052_comment =
  "C++ Interface:\n"
  "get_plane_normal(BulletPlaneShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPlaneShape_get_plane_normal_1052_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletPlaneShape::get_plane_constant(void) const
 */
static PyObject *Dtool_BulletPlaneShape_get_plane_constant_1053(PyObject *self, PyObject *) {
  BulletPlaneShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletPlaneShape)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletPlaneShape::get_plane_constant(void) const
  PN_stdfloat return_value = ((*(const BulletPlaneShape*)local_this).get_plane_constant)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletPlaneShape_get_plane_constant_1053_comment =
  "C++ Interface:\n"
  "get_plane_constant(BulletPlaneShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPlaneShape_get_plane_constant_1053_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static BulletPlaneShape *BulletPlaneShape::make_from_solid(CollisionPlane const *solid)
 */
static PyObject *Dtool_BulletPlaneShape_make_from_solid_1054(PyObject *, PyObject *arg) {
  // 1-static BulletPlaneShape *BulletPlaneShape::make_from_solid(CollisionPlane const *solid)
  CPT(CollisionPlane) arg_this;
  if (!Dtool_ConstCoerce_CollisionPlane(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 0, "BulletPlaneShape.make_from_solid", "CollisionPlane");
  }
  BulletPlaneShape *return_value = (BulletPlaneShape::make_from_solid)(std::move(arg_this));
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletPlaneShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_from_solid(const CollisionPlane solid)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletPlaneShape_make_from_solid_1054_comment =
  "C++ Interface:\n"
  "make_from_solid(const CollisionPlane solid)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPlaneShape_make_from_solid_1054_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletPlaneShape::get_class_type(void)
 */
static PyObject *Dtool_BulletPlaneShape_get_class_type_1060(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletPlaneShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletPlaneShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletPlaneShape_get_class_type_1060_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletPlaneShape_get_class_type_1060_comment = nullptr;
#endif

static PyObject *Dtool_BulletPlaneShape_plane_Getter(PyObject *self, void *) {
  const BulletPlaneShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPlaneShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPlane BulletPlaneShape::get_plane(void) const
  LPlane *return_value = new LPlane(((*(const BulletPlaneShape*)local_this).get_plane)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPlanef, true, false);
}

static PyObject *Dtool_BulletPlaneShape_plane_normal_Getter(PyObject *self, void *) {
  const BulletPlaneShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPlaneShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LVector3 BulletPlaneShape::get_plane_normal(void) const
  LVector3 *return_value = new LVector3(((*(const BulletPlaneShape*)local_this).get_plane_normal)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

static PyObject *Dtool_BulletPlaneShape_plane_constant_Getter(PyObject *self, void *) {
  const BulletPlaneShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPlaneShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletPlaneShape::get_plane_constant(void) const
  PN_stdfloat return_value = ((*(const BulletPlaneShape*)local_this).get_plane_constant)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * BulletPlaneShape::BulletPlaneShape(BulletPlaneShape const &copy)
 * explicit BulletPlaneShape::BulletPlaneShape(LPlane plane)
 * explicit BulletPlaneShape::BulletPlaneShape(LVector3 const &normal, PN_stdfloat constant)
 */
static int Dtool_Init_BulletPlaneShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      {
        // -2 BulletPlaneShape::BulletPlaneShape(BulletPlaneShape const &copy)
        PyObject *param0;
        if (Dtool_ExtractArg(&param0, args, kwds, "copy")) {
          BulletPlaneShape const *param0_this = nullptr;
          DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_BulletPlaneShape);
          if (param0_this != nullptr) {
            BulletPlaneShape *return_value = new BulletPlaneShape(*param0_this);
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletPlaneShape, true, false);
          }
        }
      }

      // No coercion possible: BulletPlaneShape::BulletPlaneShape(BulletPlaneShape const &copy)
      {
        // -2 explicit BulletPlaneShape::BulletPlaneShape(LPlane plane)
        PyObject *param0;
        if (Dtool_ExtractArg(&param0, args, kwds, "plane")) {
          LPlanef param0_local;
          LPlane *param0_this = Dtool_Coerce_LPlanef(param0, param0_local);
          if ((param0_this != nullptr)) {
            BulletPlaneShape *return_value = new BulletPlaneShape(*param0_this);
            if (return_value == nullptr) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletPlaneShape, true, false);
          }
        }
      }

    }
    break;
  case 2:
    {
      // 1-explicit BulletPlaneShape::BulletPlaneShape(LVector3 const &normal, PN_stdfloat constant)
      PyObject *param0;
      float param1;
      static const char *keyword_list[] = {"normal", "constant", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "Of:BulletPlaneShape", (char **)keyword_list, &param0, &param1)) {
        LVector3f param0_local;
        LVector3 const *param0_this = Dtool_Coerce_LVector3f(param0, param0_local);
        if (!(param0_this != nullptr)) {
          Dtool_Raise_ArgTypeError(param0, 0, "BulletPlaneShape.BulletPlaneShape", "LVector3f");
          return -1;
        }
        BulletPlaneShape *return_value = new BulletPlaneShape(*param0_this, (PN_stdfloat)param1);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletPlaneShape, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletPlaneShape() takes 1 or 2 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletPlaneShape(const BulletPlaneShape copy)\n"
      "BulletPlaneShape(const LVector3f normal, float constant)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletPlaneShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletPlaneShape) {
    printf("BulletPlaneShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletPlaneShape *local_this = (BulletPlaneShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletPlaneShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletPlaneShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletPlaneShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletPlaneShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletPlaneShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletPlaneShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletPlaneShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletPlaneShape*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletSliderConstraint
 */
/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_linear_pos(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_linear_pos_1063(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_linear_pos(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_linear_pos)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_linear_pos_1063_comment =
  "C++ Interface:\n"
  "get_linear_pos(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_linear_pos_1063_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_angular_pos(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_angular_pos_1064(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_angular_pos(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_angular_pos)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_angular_pos_1064_comment =
  "C++ Interface:\n"
  "get_angular_pos(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_angular_pos_1064_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_lower_linear_limit(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_lower_linear_limit_1065(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_lower_linear_limit(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_lower_linear_limit)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_lower_linear_limit_1065_comment =
  "C++ Interface:\n"
  "get_lower_linear_limit(BulletSliderConstraint self)\n"
  "\n"
  "// Limits\n"
  "\n"
  "// Limits\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_lower_linear_limit_1065_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_upper_linear_limit(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_upper_linear_limit_1066(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_upper_linear_limit(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_upper_linear_limit)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_upper_linear_limit_1066_comment =
  "C++ Interface:\n"
  "get_upper_linear_limit(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_upper_linear_limit_1066_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_lower_angular_limit(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_lower_angular_limit_1067(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_lower_angular_limit(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_lower_angular_limit)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_lower_angular_limit_1067_comment =
  "C++ Interface:\n"
  "get_lower_angular_limit(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_lower_angular_limit_1067_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_upper_angular_limit(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_upper_angular_limit_1068(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_upper_angular_limit(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_upper_angular_limit)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_upper_angular_limit_1068_comment =
  "C++ Interface:\n"
  "get_upper_angular_limit(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_upper_angular_limit_1068_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_lower_linear_limit(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSliderConstraint_set_lower_linear_limit_1069(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_lower_linear_limit")) {
    return nullptr;
  }
  // 1-void BulletSliderConstraint::set_lower_linear_limit(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_lower_linear_limit)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_lower_linear_limit(const BulletSliderConstraint self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_lower_linear_limit_1069_comment =
  "C++ Interface:\n"
  "set_lower_linear_limit(const BulletSliderConstraint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_lower_linear_limit_1069_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_upper_linear_limit(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSliderConstraint_set_upper_linear_limit_1070(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_upper_linear_limit")) {
    return nullptr;
  }
  // 1-void BulletSliderConstraint::set_upper_linear_limit(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_upper_linear_limit)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_upper_linear_limit(const BulletSliderConstraint self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_upper_linear_limit_1070_comment =
  "C++ Interface:\n"
  "set_upper_linear_limit(const BulletSliderConstraint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_upper_linear_limit_1070_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_lower_angular_limit(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSliderConstraint_set_lower_angular_limit_1071(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_lower_angular_limit")) {
    return nullptr;
  }
  // 1-void BulletSliderConstraint::set_lower_angular_limit(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_lower_angular_limit)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_lower_angular_limit(const BulletSliderConstraint self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_lower_angular_limit_1071_comment =
  "C++ Interface:\n"
  "set_lower_angular_limit(const BulletSliderConstraint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_lower_angular_limit_1071_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_upper_angular_limit(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSliderConstraint_set_upper_angular_limit_1072(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_upper_angular_limit")) {
    return nullptr;
  }
  // 1-void BulletSliderConstraint::set_upper_angular_limit(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_upper_angular_limit)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_upper_angular_limit(const BulletSliderConstraint self, float value)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_upper_angular_limit_1072_comment =
  "C++ Interface:\n"
  "set_upper_angular_limit(const BulletSliderConstraint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_upper_angular_limit_1072_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_powered_linear_motor(bool on)
 */
static PyObject *Dtool_BulletSliderConstraint_set_powered_linear_motor_1073(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_powered_linear_motor")) {
    return nullptr;
  }
  // 1-void BulletSliderConstraint::set_powered_linear_motor(bool on)
  ((*local_this).set_powered_linear_motor)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_powered_linear_motor(const BulletSliderConstraint self, bool on)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_powered_linear_motor_1073_comment =
  "C++ Interface:\n"
  "set_powered_linear_motor(const BulletSliderConstraint self, bool on)\n"
  "\n"
  "// Linear motor\n"
  "\n"
  "// Linear motor\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_powered_linear_motor_1073_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_target_linear_motor_velocity(PN_stdfloat target_velocity)
 */
static PyObject *Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_1074(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_target_linear_motor_velocity")) {
    return nullptr;
  }
  // 1-void BulletSliderConstraint::set_target_linear_motor_velocity(PN_stdfloat target_velocity)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_target_linear_motor_velocity)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_target_linear_motor_velocity(const BulletSliderConstraint self, float target_velocity)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_1074_comment =
  "C++ Interface:\n"
  "set_target_linear_motor_velocity(const BulletSliderConstraint self, float target_velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_1074_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_max_linear_motor_force(PN_stdfloat max_force)
 */
static PyObject *Dtool_BulletSliderConstraint_set_max_linear_motor_force_1075(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_max_linear_motor_force")) {
    return nullptr;
  }
  // 1-void BulletSliderConstraint::set_max_linear_motor_force(PN_stdfloat max_force)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_linear_motor_force)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_linear_motor_force(const BulletSliderConstraint self, float max_force)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_max_linear_motor_force_1075_comment =
  "C++ Interface:\n"
  "set_max_linear_motor_force(const BulletSliderConstraint self, float max_force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_max_linear_motor_force_1075_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletSliderConstraint::get_powered_linear_motor(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_powered_linear_motor_1076(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-bool BulletSliderConstraint::get_powered_linear_motor(void) const
  bool return_value = ((*(const BulletSliderConstraint*)local_this).get_powered_linear_motor)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_powered_linear_motor_1076_comment =
  "C++ Interface:\n"
  "get_powered_linear_motor(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_powered_linear_motor_1076_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_target_linear_motor_velocity(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_1077(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_target_linear_motor_velocity(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_target_linear_motor_velocity)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_1077_comment =
  "C++ Interface:\n"
  "get_target_linear_motor_velocity(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_1077_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_max_linear_motor_force(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_max_linear_motor_force_1078(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_max_linear_motor_force(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_max_linear_motor_force)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_max_linear_motor_force_1078_comment =
  "C++ Interface:\n"
  "get_max_linear_motor_force(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_max_linear_motor_force_1078_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_powered_angular_motor(bool on)
 */
static PyObject *Dtool_BulletSliderConstraint_set_powered_angular_motor_1079(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_powered_angular_motor")) {
    return nullptr;
  }
  // 1-void BulletSliderConstraint::set_powered_angular_motor(bool on)
  ((*local_this).set_powered_angular_motor)((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_powered_angular_motor(const BulletSliderConstraint self, bool on)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_powered_angular_motor_1079_comment =
  "C++ Interface:\n"
  "set_powered_angular_motor(const BulletSliderConstraint self, bool on)\n"
  "\n"
  "// Angular motor\n"
  "\n"
  "// Angular motor\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_powered_angular_motor_1079_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_target_angular_motor_velocity(PN_stdfloat target_velocity)
 */
static PyObject *Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_1080(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_target_angular_motor_velocity")) {
    return nullptr;
  }
  // 1-void BulletSliderConstraint::set_target_angular_motor_velocity(PN_stdfloat target_velocity)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_target_angular_motor_velocity)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_target_angular_motor_velocity(const BulletSliderConstraint self, float target_velocity)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_1080_comment =
  "C++ Interface:\n"
  "set_target_angular_motor_velocity(const BulletSliderConstraint self, float target_velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_1080_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_max_angular_motor_force(PN_stdfloat max_force)
 */
static PyObject *Dtool_BulletSliderConstraint_set_max_angular_motor_force_1081(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_max_angular_motor_force")) {
    return nullptr;
  }
  // 1-void BulletSliderConstraint::set_max_angular_motor_force(PN_stdfloat max_force)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_angular_motor_force)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_angular_motor_force(const BulletSliderConstraint self, float max_force)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_max_angular_motor_force_1081_comment =
  "C++ Interface:\n"
  "set_max_angular_motor_force(const BulletSliderConstraint self, float max_force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_max_angular_motor_force_1081_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * bool BulletSliderConstraint::get_powered_angular_motor(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_powered_angular_motor_1082(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-bool BulletSliderConstraint::get_powered_angular_motor(void) const
  bool return_value = ((*(const BulletSliderConstraint*)local_this).get_powered_angular_motor)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_powered_angular_motor_1082_comment =
  "C++ Interface:\n"
  "get_powered_angular_motor(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_powered_angular_motor_1082_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_target_angular_motor_velocity(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_1083(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_target_angular_motor_velocity(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_target_angular_motor_velocity)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_1083_comment =
  "C++ Interface:\n"
  "get_target_angular_motor_velocity(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_1083_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_max_angular_motor_force(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_max_angular_motor_force_1084(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_max_angular_motor_force(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_max_angular_motor_force)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_max_angular_motor_force_1084_comment =
  "C++ Interface:\n"
  "get_max_angular_motor_force(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_max_angular_motor_force_1084_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
 */
static PyObject *Dtool_BulletSliderConstraint_set_frames_1085(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_frames")) {
    return nullptr;
  }
  // 1-void BulletSliderConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"ts_a", "ts_b", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:set_frames", (char **)keyword_list, &param1, &param2)) {
    TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletSliderConstraint.set_frames", true, true);
    TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletSliderConstraint.set_frames", true, true);
    if (param1_this != nullptr && param2_this != nullptr) {
      ((*local_this).set_frames)(param1_this, param2_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_frames(const BulletSliderConstraint self, const TransformState ts_a, const TransformState ts_b)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_frames_1085_comment =
  "C++ Interface:\n"
  "set_frames(const BulletSliderConstraint self, const TransformState ts_a, const TransformState ts_b)\n"
  "\n"
  "// Frames\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_frames_1085_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_a(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_frame_a_1086(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_a(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletSliderConstraint*)local_this).get_frame_a)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_frame_a_1086_comment =
  "C++ Interface:\n"
  "get_frame_a(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_frame_a_1086_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_b(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_frame_b_1087(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSliderConstraint)) {
    return nullptr;
  }
  // 1-ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_b(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletSliderConstraint*)local_this).get_frame_b)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_frame_b_1087_comment =
  "C++ Interface:\n"
  "get_frame_b(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_frame_b_1087_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletSliderConstraint::get_class_type(void)
 */
static PyObject *Dtool_BulletSliderConstraint_get_class_type_1102(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletSliderConstraint::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletSliderConstraint::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_class_type_1102_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletSliderConstraint_get_class_type_1102_comment = nullptr;
#endif

static PyObject *Dtool_BulletSliderConstraint_linear_pos_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSliderConstraint::get_linear_pos(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_linear_pos)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletSliderConstraint_angular_pos_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSliderConstraint::get_angular_pos(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_angular_pos)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletSliderConstraint_lower_linear_limit_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSliderConstraint::get_lower_linear_limit(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_lower_linear_limit)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSliderConstraint_lower_linear_limit_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.lower_linear_limit")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete lower_linear_limit attribute");
    return -1;
  }
  // 1-void BulletSliderConstraint::set_lower_linear_limit(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_lower_linear_limit)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_lower_linear_limit(const BulletSliderConstraint self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSliderConstraint_upper_linear_limit_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSliderConstraint::get_upper_linear_limit(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_upper_linear_limit)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSliderConstraint_upper_linear_limit_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.upper_linear_limit")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete upper_linear_limit attribute");
    return -1;
  }
  // 1-void BulletSliderConstraint::set_upper_linear_limit(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_upper_linear_limit)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_upper_linear_limit(const BulletSliderConstraint self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSliderConstraint_lower_angular_limit_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSliderConstraint::get_lower_angular_limit(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_lower_angular_limit)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSliderConstraint_lower_angular_limit_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.lower_angular_limit")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete lower_angular_limit attribute");
    return -1;
  }
  // 1-void BulletSliderConstraint::set_lower_angular_limit(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_lower_angular_limit)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_lower_angular_limit(const BulletSliderConstraint self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSliderConstraint_upper_angular_limit_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSliderConstraint::get_upper_angular_limit(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_upper_angular_limit)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSliderConstraint_upper_angular_limit_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.upper_angular_limit")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete upper_angular_limit attribute");
    return -1;
  }
  // 1-void BulletSliderConstraint::set_upper_angular_limit(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_upper_angular_limit)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_upper_angular_limit(const BulletSliderConstraint self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSliderConstraint_powered_linear_motor_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletSliderConstraint::get_powered_linear_motor(void) const
  bool return_value = ((*(const BulletSliderConstraint*)local_this).get_powered_linear_motor)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSliderConstraint_powered_linear_motor_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.powered_linear_motor")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete powered_linear_motor attribute");
    return -1;
  }
  // 1-void BulletSliderConstraint::set_powered_linear_motor(bool on)
  ((*local_this).set_powered_linear_motor)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_powered_linear_motor(const BulletSliderConstraint self, bool on)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSliderConstraint_target_linear_motor_velocity_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSliderConstraint::get_target_linear_motor_velocity(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_target_linear_motor_velocity)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSliderConstraint_target_linear_motor_velocity_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.target_linear_motor_velocity")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete target_linear_motor_velocity attribute");
    return -1;
  }
  // 1-void BulletSliderConstraint::set_target_linear_motor_velocity(PN_stdfloat target_velocity)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_target_linear_motor_velocity)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_target_linear_motor_velocity(const BulletSliderConstraint self, float target_velocity)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSliderConstraint_max_linear_motor_force_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSliderConstraint::get_max_linear_motor_force(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_max_linear_motor_force)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSliderConstraint_max_linear_motor_force_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.max_linear_motor_force")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete max_linear_motor_force attribute");
    return -1;
  }
  // 1-void BulletSliderConstraint::set_max_linear_motor_force(PN_stdfloat max_force)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_linear_motor_force)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_max_linear_motor_force(const BulletSliderConstraint self, float max_force)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSliderConstraint_powered_angular_motor_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-bool BulletSliderConstraint::get_powered_angular_motor(void) const
  bool return_value = ((*(const BulletSliderConstraint*)local_this).get_powered_angular_motor)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSliderConstraint_powered_angular_motor_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.powered_angular_motor")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete powered_angular_motor attribute");
    return -1;
  }
  // 1-void BulletSliderConstraint::set_powered_angular_motor(bool on)
  ((*local_this).set_powered_angular_motor)((PyObject_IsTrue(arg) != 0));
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_powered_angular_motor(const BulletSliderConstraint self, bool on)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSliderConstraint_target_angular_motor_velocity_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSliderConstraint::get_target_angular_motor_velocity(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_target_angular_motor_velocity)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSliderConstraint_target_angular_motor_velocity_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.target_angular_motor_velocity")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete target_angular_motor_velocity attribute");
    return -1;
  }
  // 1-void BulletSliderConstraint::set_target_angular_motor_velocity(PN_stdfloat target_velocity)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_target_angular_motor_velocity)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_target_angular_motor_velocity(const BulletSliderConstraint self, float target_velocity)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSliderConstraint_max_angular_motor_force_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletSliderConstraint::get_max_angular_motor_force(void) const
  PN_stdfloat return_value = ((*(const BulletSliderConstraint*)local_this).get_max_angular_motor_force)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSliderConstraint_max_angular_motor_force_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.max_angular_motor_force")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete max_angular_motor_force attribute");
    return -1;
  }
  // 1-void BulletSliderConstraint::set_max_angular_motor_force(PN_stdfloat max_force)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_angular_motor_force)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_max_angular_motor_force(const BulletSliderConstraint self, float max_force)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSliderConstraint_frame_a_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_a(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletSliderConstraint*)local_this).get_frame_a)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

static PyObject *Dtool_BulletSliderConstraint_frame_b_Getter(PyObject *self, void *) {
  const BulletSliderConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_b(void) const
  ConstPointerTo< TransformState > return_value = ((*(const BulletSliderConstraint*)local_this).get_frame_b)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = nullptr;
  return DTool_CreatePyInstance((void *)return_ptr, *Dtool_Ptr_TransformState, true, true);
}

/**
 * Python function wrapper for:
 * explicit BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a)
 * explicit BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool useFrame_a)
 */
static int Dtool_Init_BulletSliderConstraint(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 3:
    {
      // 1-explicit BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool useFrame_a)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      static const char *keyword_list[] = {"node_a", "frame_a", "useFrame_a", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:BulletSliderConstraint", (char **)keyword_list, &param0, &param1, &param2)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletSliderConstraint.BulletSliderConstraint", true, true);
        TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletSliderConstraint.BulletSliderConstraint", true, true);
        if (param0_this != nullptr && param1_this != nullptr) {
          BulletSliderConstraint *return_value = new BulletSliderConstraint(param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSliderConstraint, true, false);
        }
      }
    }
    break;
  case 5:
    {
      // 1-explicit BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      PyObject *param4;
      static const char *keyword_list[] = {"node_a", "node_b", "frame_a", "frame_b", "use_frame_a", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOOO:BulletSliderConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletSliderConstraint.BulletSliderConstraint", true, true);
        BulletRigidBodyNode const *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletSliderConstraint.BulletSliderConstraint", true, true);
        TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletSliderConstraint.BulletSliderConstraint", true, true);
        TransformState const *param3_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param3, Dtool_Ptr_TransformState, 3, "BulletSliderConstraint.BulletSliderConstraint", true, true);
        if (param0_this != nullptr && param1_this != nullptr && param2_this != nullptr && param3_this != nullptr) {
          BulletSliderConstraint *return_value = new BulletSliderConstraint(param0_this, param1_this, param2_this, param3_this, (PyObject_IsTrue(param4) != 0));
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSliderConstraint, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletSliderConstraint() takes 3 or 5 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSliderConstraint(const BulletRigidBodyNode node_a, const TransformState frame_a, bool useFrame_a)\n"
      "BulletSliderConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const TransformState frame_a, const TransformState frame_b, bool use_frame_a)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletSliderConstraint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletSliderConstraint) {
    printf("BulletSliderConstraint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletSliderConstraint *local_this = (BulletSliderConstraint *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletSliderConstraint) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletConstraint) {
    return (BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletSliderConstraint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletSliderConstraint) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletConstraint) {
    BulletConstraint* other_this = (BulletConstraint*)from_this;
    return (BulletSliderConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletSliderConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletSliderConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletSliderConstraint*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletSoftBodyControl
 */
/**
 * Python function wrapper for:
 * inline void BulletSoftBodyControl::set_goal(PN_stdfloat goal)
 */
static PyObject *Dtool_BulletSoftBodyControl_set_goal_1111(PyObject *self, PyObject *arg) {
  BulletSoftBodyControl *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyControl, (void **)&local_this, "BulletSoftBodyControl.set_goal")) {
    return nullptr;
  }
  // 1-inline void BulletSoftBodyControl::set_goal(PN_stdfloat goal)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_goal)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_goal(const BulletSoftBodyControl self, float goal)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyControl_set_goal_1111_comment =
  "C++ Interface:\n"
  "set_goal(const BulletSoftBodyControl self, float goal)\n"
  "\n"
  "// Motor\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyControl_set_goal_1111_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyControl::set_max_torque(PN_stdfloat maxtorque)
 */
static PyObject *Dtool_BulletSoftBodyControl_set_max_torque_1112(PyObject *self, PyObject *arg) {
  BulletSoftBodyControl *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyControl, (void **)&local_this, "BulletSoftBodyControl.set_max_torque")) {
    return nullptr;
  }
  // 1-inline void BulletSoftBodyControl::set_max_torque(PN_stdfloat maxtorque)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_max_torque)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_torque(const BulletSoftBodyControl self, float maxtorque)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyControl_set_max_torque_1112_comment =
  "C++ Interface:\n"
  "set_max_torque(const BulletSoftBodyControl self, float maxtorque)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyControl_set_max_torque_1112_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyControl::set_angle(PN_stdfloat angle)
 */
static PyObject *Dtool_BulletSoftBodyControl_set_angle_1113(PyObject *self, PyObject *arg) {
  BulletSoftBodyControl *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyControl, (void **)&local_this, "BulletSoftBodyControl.set_angle")) {
    return nullptr;
  }
  // 1-inline void BulletSoftBodyControl::set_angle(PN_stdfloat angle)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_angle)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angle(const BulletSoftBodyControl self, float angle)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyControl_set_angle_1113_comment =
  "C++ Interface:\n"
  "set_angle(const BulletSoftBodyControl self, float angle)\n"
  "\n"
  "// Steer\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyControl_set_angle_1113_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyControl::set_sign(PN_stdfloat sign)
 */
static PyObject *Dtool_BulletSoftBodyControl_set_sign_1114(PyObject *self, PyObject *arg) {
  BulletSoftBodyControl *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyControl, (void **)&local_this, "BulletSoftBodyControl.set_sign")) {
    return nullptr;
  }
  // 1-inline void BulletSoftBodyControl::set_sign(PN_stdfloat sign)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_sign)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_sign(const BulletSoftBodyControl self, float sign)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyControl_set_sign_1114_comment =
  "C++ Interface:\n"
  "set_sign(const BulletSoftBodyControl self, float sign)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyControl_set_sign_1114_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyControl::BulletSoftBodyControl(void)
 * inline BulletSoftBodyControl::BulletSoftBodyControl(BulletSoftBodyControl const &) = default
 */
static int Dtool_Init_BulletSoftBodyControl(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletSoftBodyControl() takes no keyword arguments");
    return -1;
#endif
  }
  int parameter_count = (int)PyTuple_Size(args);
  switch (parameter_count) {
  case 0:
    {
      // 1-BulletSoftBodyControl::BulletSoftBodyControl(void)
      BulletSoftBodyControl *return_value = new BulletSoftBodyControl();
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSoftBodyControl, true, false);
    }
    break;
  case 1:
    {
      PyObject *arg = PyTuple_GET_ITEM(args, 0);
      // 1-inline BulletSoftBodyControl::BulletSoftBodyControl(BulletSoftBodyControl const &) = default
      BulletSoftBodyControl const *arg_this = (BulletSoftBodyControl *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletSoftBodyControl, 0, "BulletSoftBodyControl.BulletSoftBodyControl", true, true);
      if (arg_this != nullptr) {
        BulletSoftBodyControl *return_value = new BulletSoftBodyControl(*arg_this);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        if (Dtool_CheckErrorOccurred()) {
          delete return_value;
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSoftBodyControl, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletSoftBodyControl() takes 0 or 1 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSoftBodyControl()\n"
      "BulletSoftBodyControl(const BulletSoftBodyControl param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletSoftBodyControl(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletSoftBodyControl) {
    printf("BulletSoftBodyControl ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletSoftBodyControl *local_this = (BulletSoftBodyControl *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletSoftBodyControl) {
    return local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletSoftBodyControl(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyControl) {
    return from_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletSoftBodyShape
 */
/**
 * Python function wrapper for:
 * BulletSoftBodyNode *BulletSoftBodyShape::get_body(void) const
 */
static PyObject *Dtool_BulletSoftBodyShape_get_body_1116(PyObject *self, PyObject *) {
  BulletSoftBodyShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSoftBodyShape)) {
    return nullptr;
  }
  // 1-BulletSoftBodyNode *BulletSoftBodyShape::get_body(void) const
  BulletSoftBodyNode *return_value = ((*(const BulletSoftBodyShape*)local_this).get_body)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyShape_get_body_1116_comment =
  "C++ Interface:\n"
  "get_body(BulletSoftBodyShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyShape_get_body_1116_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletSoftBodyShape::get_class_type(void)
 */
static PyObject *Dtool_BulletSoftBodyShape_get_class_type_1118(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletSoftBodyShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletSoftBodyShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyShape_get_class_type_1118_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletSoftBodyShape_get_class_type_1118_comment = nullptr;
#endif

static PyObject *Dtool_BulletSoftBodyShape_body_Getter(PyObject *self, void *) {
  const BulletSoftBodyShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-BulletSoftBodyNode *BulletSoftBodyShape::get_body(void) const
  BulletSoftBodyNode *return_value = ((*(const BulletSoftBodyShape*)local_this).get_body)();
  if (return_value != nullptr) {
    return_value->ref();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return Dtool_Raise_AssertionError();
  }
#endif
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

static int Dtool_Init_BulletSoftBodyShape(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletSoftBodyShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletSoftBodyShape) {
    printf("BulletSoftBodyShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletSoftBodyShape *local_this = (BulletSoftBodyShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletSoftBodyShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletSoftBodyShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletSoftBodyShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletSoftBodyShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletSoftBodyShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletSoftBodyShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletSoftBodyShape*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletSphereShape
 */
/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSphereShape::get_radius(void) const
 */
static PyObject *Dtool_BulletSphereShape_get_radius_1121(PyObject *self, PyObject *) {
  BulletSphereShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSphereShape)) {
    return nullptr;
  }
  // 1-inline PN_stdfloat BulletSphereShape::get_radius(void) const
  PN_stdfloat return_value = ((*(const BulletSphereShape*)local_this).get_radius)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSphereShape_get_radius_1121_comment =
  "C++ Interface:\n"
  "get_radius(BulletSphereShape self)\n"
  "\n"
  "/**\n"
  " * Returns the radius that was used to construct this sphere.\n"
  " */";
#else
static const char *Dtool_BulletSphereShape_get_radius_1121_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static BulletSphereShape *BulletSphereShape::make_from_solid(CollisionSphere const *solid)
 */
static PyObject *Dtool_BulletSphereShape_make_from_solid_1122(PyObject *, PyObject *arg) {
  // 1-static BulletSphereShape *BulletSphereShape::make_from_solid(CollisionSphere const *solid)
  CollisionSphere const *arg_this = (CollisionSphere *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_CollisionSphere, 0, "BulletSphereShape.make_from_solid", true, true);
  if (arg_this != nullptr) {
    BulletSphereShape *return_value = (BulletSphereShape::make_from_solid)(arg_this);
    if (return_value != nullptr) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != nullptr) {
        unref_delete(return_value);
      }
      return nullptr;
    }
    if (return_value == nullptr) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletSphereShape, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_from_solid(const CollisionSphere solid)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSphereShape_make_from_solid_1122_comment =
  "C++ Interface:\n"
  "make_from_solid(const CollisionSphere solid)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSphereShape_make_from_solid_1122_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletSphereShape::get_class_type(void)
 */
static PyObject *Dtool_BulletSphereShape_get_class_type_1124(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletSphereShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletSphereShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSphereShape_get_class_type_1124_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletSphereShape_get_class_type_1124_comment = nullptr;
#endif

static PyObject *Dtool_BulletSphereShape_radius_Getter(PyObject *self, void *) {
  const BulletSphereShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSphereShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline PN_stdfloat BulletSphereShape::get_radius(void) const
  PN_stdfloat return_value = ((*(const BulletSphereShape*)local_this).get_radius)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * BulletSphereShape::BulletSphereShape(BulletSphereShape const &copy)
 * explicit BulletSphereShape::BulletSphereShape(PN_stdfloat radius)
 */
static int Dtool_Init_BulletSphereShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletSphereShape() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  {
    // -2 BulletSphereShape::BulletSphereShape(BulletSphereShape const &copy)
    PyObject *param0;
    if (Dtool_ExtractArg(&param0, args, kwds, "copy")) {
      BulletSphereShape const *param0_this = nullptr;
      DtoolInstance_GetPointer(param0, param0_this, *Dtool_Ptr_BulletSphereShape);
      if (param0_this != nullptr) {
        BulletSphereShape *return_value = new BulletSphereShape(*param0_this);
        if (return_value == nullptr) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSphereShape, true, false);
      }
    }
  }

  {
    // -2 explicit BulletSphereShape::BulletSphereShape(PN_stdfloat radius)
    float param0;
    static const char *keyword_list[] = {"radius", nullptr};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "f:BulletSphereShape", (char **)keyword_list, &param0)) {
      BulletSphereShape *return_value = new BulletSphereShape((PN_stdfloat)param0);
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSphereShape, true, false);
    }
    PyErr_Clear();
  }

  // No coercion possible: BulletSphereShape::BulletSphereShape(BulletSphereShape const &copy)
  // No coercion possible: explicit BulletSphereShape::BulletSphereShape(PN_stdfloat radius)
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSphereShape(const BulletSphereShape copy)\n"
      "BulletSphereShape(float radius)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletSphereShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletSphereShape) {
    printf("BulletSphereShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletSphereShape *local_this = (BulletSphereShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletSphereShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletSphereShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletSphereShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletSphereShape*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletSphericalConstraint
 */
/**
 * Python function wrapper for:
 * void BulletSphericalConstraint::set_pivot_a(LPoint3 const &pivot_a)
 */
static PyObject *Dtool_BulletSphericalConstraint_set_pivot_a_1127(PyObject *self, PyObject *arg) {
  BulletSphericalConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSphericalConstraint, (void **)&local_this, "BulletSphericalConstraint.set_pivot_a")) {
    return nullptr;
  }
  // 1-void BulletSphericalConstraint::set_pivot_a(LPoint3 const &pivot_a)
  LPoint3f arg_local;
  LPoint3 const *arg_this = Dtool_Coerce_LPoint3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletSphericalConstraint.set_pivot_a", "LPoint3f");
  }
  ((*local_this).set_pivot_a)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_pivot_a(const BulletSphericalConstraint self, const LPoint3f pivot_a)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSphericalConstraint_set_pivot_a_1127_comment =
  "C++ Interface:\n"
  "set_pivot_a(const BulletSphericalConstraint self, const LPoint3f pivot_a)\n"
  "\n"
  "// Pivots\n"
  "\n"
  "// Pivots\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSphericalConstraint_set_pivot_a_1127_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletSphericalConstraint::set_pivot_b(LPoint3 const &pivot_b)
 */
static PyObject *Dtool_BulletSphericalConstraint_set_pivot_b_1128(PyObject *self, PyObject *arg) {
  BulletSphericalConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSphericalConstraint, (void **)&local_this, "BulletSphericalConstraint.set_pivot_b")) {
    return nullptr;
  }
  // 1-void BulletSphericalConstraint::set_pivot_b(LPoint3 const &pivot_b)
  LPoint3f arg_local;
  LPoint3 const *arg_this = Dtool_Coerce_LPoint3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletSphericalConstraint.set_pivot_b", "LPoint3f");
  }
  ((*local_this).set_pivot_b)(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_pivot_b(const BulletSphericalConstraint self, const LPoint3f pivot_b)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletSphericalConstraint_set_pivot_b_1128_comment =
  "C++ Interface:\n"
  "set_pivot_b(const BulletSphericalConstraint self, const LPoint3f pivot_b)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSphericalConstraint_set_pivot_b_1128_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletSphericalConstraint::get_pivot_in_a(void) const
 */
static PyObject *Dtool_BulletSphericalConstraint_get_pivot_in_a_1129(PyObject *self, PyObject *) {
  BulletSphericalConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSphericalConstraint)) {
    return nullptr;
  }
  // 1-LPoint3 BulletSphericalConstraint::get_pivot_in_a(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletSphericalConstraint*)local_this).get_pivot_in_a)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSphericalConstraint_get_pivot_in_a_1129_comment =
  "C++ Interface:\n"
  "get_pivot_in_a(BulletSphericalConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSphericalConstraint_get_pivot_in_a_1129_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletSphericalConstraint::get_pivot_in_b(void) const
 */
static PyObject *Dtool_BulletSphericalConstraint_get_pivot_in_b_1130(PyObject *self, PyObject *) {
  BulletSphericalConstraint *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletSphericalConstraint)) {
    return nullptr;
  }
  // 1-LPoint3 BulletSphericalConstraint::get_pivot_in_b(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletSphericalConstraint*)local_this).get_pivot_in_b)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSphericalConstraint_get_pivot_in_b_1130_comment =
  "C++ Interface:\n"
  "get_pivot_in_b(BulletSphericalConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSphericalConstraint_get_pivot_in_b_1130_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletSphericalConstraint::get_class_type(void)
 */
static PyObject *Dtool_BulletSphericalConstraint_get_class_type_1133(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletSphericalConstraint::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletSphericalConstraint::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSphericalConstraint_get_class_type_1133_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletSphericalConstraint_get_class_type_1133_comment = nullptr;
#endif

static PyObject *Dtool_BulletSphericalConstraint_pivot_a_Getter(PyObject *self, void *) {
  const BulletSphericalConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSphericalConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletSphericalConstraint::get_pivot_in_a(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletSphericalConstraint*)local_this).get_pivot_in_a)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static int Dtool_BulletSphericalConstraint_pivot_a_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSphericalConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSphericalConstraint, (void **)&local_this, "BulletSphericalConstraint.pivot_a")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete pivot_a attribute");
    return -1;
  }
  // 1-void BulletSphericalConstraint::set_pivot_a(LPoint3 const &pivot_a)
  LPoint3f arg_local;
  LPoint3 const *arg_this = Dtool_Coerce_LPoint3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletSphericalConstraint.set_pivot_a", "LPoint3f");
    return -1;
  }
  ((*local_this).set_pivot_a)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_pivot_a(const BulletSphericalConstraint self, const LPoint3f pivot_a)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSphericalConstraint_pivot_b_Getter(PyObject *self, void *) {
  const BulletSphericalConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSphericalConstraint, (void **)&local_this)) {
    return nullptr;
  }

  // 1-LPoint3 BulletSphericalConstraint::get_pivot_in_b(void) const
  LPoint3 *return_value = new LPoint3(((*(const BulletSphericalConstraint*)local_this).get_pivot_in_b)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

static int Dtool_BulletSphericalConstraint_pivot_b_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSphericalConstraint *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSphericalConstraint, (void **)&local_this, "BulletSphericalConstraint.pivot_b")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete pivot_b attribute");
    return -1;
  }
  // 1-void BulletSphericalConstraint::set_pivot_b(LPoint3 const &pivot_b)
  LPoint3f arg_local;
  LPoint3 const *arg_this = Dtool_Coerce_LPoint3f(arg, arg_local);
  if (!(arg_this != nullptr)) {
    Dtool_Raise_ArgTypeError(arg, 1, "BulletSphericalConstraint.set_pivot_b", "LPoint3f");
    return -1;
  }
  ((*local_this).set_pivot_b)(*arg_this);
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    Dtool_Raise_AssertionError();
    return -1;
  }
#endif
  return 0;
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_pivot_b(const BulletSphericalConstraint self, const LPoint3f pivot_b)\n");
  }
  return -1;
}

/**
 * Python function wrapper for:
 * explicit BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b)
 * explicit BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a)
 */
static int Dtool_Init_BulletSphericalConstraint(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-explicit BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a)
      PyObject *param0;
      PyObject *param1;
      static const char *keyword_list[] = {"node_a", "pivot_a", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletSphericalConstraint", (char **)keyword_list, &param0, &param1)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletSphericalConstraint.BulletSphericalConstraint", true, true);
        LPoint3f param1_local;
        LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
        if (!(param1_this != nullptr)) {
          Dtool_Raise_ArgTypeError(param1, 1, "BulletSphericalConstraint.BulletSphericalConstraint", "LPoint3f");
          return -1;
        }
        if (param0_this != nullptr) {
          BulletSphericalConstraint *return_value = new BulletSphericalConstraint(param0_this, *param1_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSphericalConstraint, true, false);
        }
      }
    }
    break;
  case 4:
    {
      // 1-explicit BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      static const char *keyword_list[] = {"node_a", "node_b", "pivot_a", "pivot_b", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:BulletSphericalConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletSphericalConstraint.BulletSphericalConstraint", true, true);
        BulletRigidBodyNode const *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletSphericalConstraint.BulletSphericalConstraint", true, true);
        LPoint3f param2_local;
        LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
        if (!(param2_this != nullptr)) {
          Dtool_Raise_ArgTypeError(param2, 2, "BulletSphericalConstraint.BulletSphericalConstraint", "LPoint3f");
          return -1;
        }
        LPoint3f param3_local;
        LPoint3 const *param3_this = Dtool_Coerce_LPoint3f(param3, param3_local);
        if (!(param3_this != nullptr)) {
          Dtool_Raise_ArgTypeError(param3, 3, "BulletSphericalConstraint.BulletSphericalConstraint", "LPoint3f");
          return -1;
        }
        if (param0_this != nullptr && param1_this != nullptr) {
          BulletSphericalConstraint *return_value = new BulletSphericalConstraint(param0_this, param1_this, *param2_this, *param3_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSphericalConstraint, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletSphericalConstraint() takes 2 or 4 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSphericalConstraint(const BulletRigidBodyNode node_a, const LPoint3f pivot_a)\n"
      "BulletSphericalConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const LPoint3f pivot_a, const LPoint3f pivot_b)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletSphericalConstraint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletSphericalConstraint) {
    printf("BulletSphericalConstraint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletSphericalConstraint *local_this = (BulletSphericalConstraint *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletSphericalConstraint) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletConstraint) {
    return (BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletSphericalConstraint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletSphericalConstraint) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletConstraint) {
    BulletConstraint* other_this = (BulletConstraint*)from_this;
    return (BulletSphericalConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletSphericalConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletSphericalConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletSphericalConstraint*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletTickCallbackData
 */
/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletTickCallbackData::get_timestep(void) const
 */
static PyObject *Dtool_BulletTickCallbackData_get_timestep_1136(PyObject *self, PyObject *) {
  BulletTickCallbackData *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletTickCallbackData)) {
    return nullptr;
  }
  // 1-inline PN_stdfloat BulletTickCallbackData::get_timestep(void) const
  PN_stdfloat return_value = ((*(const BulletTickCallbackData*)local_this).get_timestep)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletTickCallbackData_get_timestep_1136_comment =
  "C++ Interface:\n"
  "get_timestep(BulletTickCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTickCallbackData_get_timestep_1136_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletTickCallbackData::get_class_type(void)
 */
static PyObject *Dtool_BulletTickCallbackData_get_class_type_1138(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletTickCallbackData::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletTickCallbackData::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletTickCallbackData_get_class_type_1138_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletTickCallbackData_get_class_type_1138_comment = nullptr;
#endif

static PyObject *Dtool_BulletTickCallbackData_timestep_Getter(PyObject *self, void *) {
  const BulletTickCallbackData *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTickCallbackData, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline PN_stdfloat BulletTickCallbackData::get_timestep(void) const
  PN_stdfloat return_value = ((*(const BulletTickCallbackData*)local_this).get_timestep)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * inline BulletTickCallbackData::BulletTickCallbackData(btScalar timestep)
 */
static int Dtool_Init_BulletTickCallbackData(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletTickCallbackData() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg;
  if (Dtool_ExtractArg(&arg, args, kwds, "timestep")) {
    // 1-inline BulletTickCallbackData::BulletTickCallbackData(btScalar timestep)
    if (PyNumber_Check(arg)) {
      BulletTickCallbackData *return_value = new BulletTickCallbackData(PyFloat_AsDouble(arg));
      if (return_value == nullptr) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletTickCallbackData, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletTickCallbackData(double timestep)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletTickCallbackData(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletTickCallbackData) {
    printf("BulletTickCallbackData ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletTickCallbackData *local_this = (BulletTickCallbackData *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletTickCallbackData) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_CallbackData) {
    return (CallbackData *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(CallbackData *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletTickCallbackData(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletTickCallbackData) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_CallbackData) {
    CallbackData* other_this = (CallbackData*)from_this;
    return (BulletTickCallbackData*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletTickCallbackData*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletTriangleMesh
 */
/**
 * Python function wrapper for:
 * void BulletTriangleMesh::add_triangle(LPoint3 const &p0, LPoint3 const &p1, LPoint3 const &p2, bool remove_duplicate_vertices = false)
 */
static PyObject *Dtool_BulletTriangleMesh_add_triangle_1142(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTriangleMesh *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMesh, (void **)&local_this, "BulletTriangleMesh.add_triangle")) {
    return nullptr;
  }
  // 1-void BulletTriangleMesh::add_triangle(LPoint3 const &p0, LPoint3 const &p1, LPoint3 const &p2, bool remove_duplicate_vertices = false)
  PyObject *param1;
  PyObject *param2;
  PyObject *param3;
  PyObject *param4 = Py_False;
  static const char *keyword_list[] = {"p0", "p1", "p2", "remove_duplicate_vertices", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO|O:add_triangle", (char **)keyword_list, &param1, &param2, &param3, &param4)) {
    LPoint3f param1_local;
    LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
    if (!(param1_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletTriangleMesh.add_triangle", "LPoint3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletTriangleMesh.add_triangle", "LPoint3f");
    }
    LPoint3f param3_local;
    LPoint3 const *param3_this = Dtool_Coerce_LPoint3f(param3, param3_local);
    if (!(param3_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param3, 3, "BulletTriangleMesh.add_triangle", "LPoint3f");
    }
    ((*local_this).add_triangle)(*param1_this, *param2_this, *param3_this, (PyObject_IsTrue(param4) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_triangle(const BulletTriangleMesh self, const LPoint3f p0, const LPoint3f p1, const LPoint3f p2, bool remove_duplicate_vertices)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_add_triangle_1142_comment =
  "C++ Interface:\n"
  "add_triangle(const BulletTriangleMesh self, const LPoint3f p0, const LPoint3f p1, const LPoint3f p2, bool remove_duplicate_vertices)\n"
  "\n"
  "/**\n"
  " * Adds a triangle with the indicated coordinates.\n"
  " *\n"
  " * If remove_duplicate_vertices is true, it will make sure that it does not\n"
  " * add duplicate vertices if they already exist in the triangle mesh, within\n"
  " * the tolerance specified by set_welding_distance().  This comes at a\n"
  " * significant performance cost, especially for large meshes.\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_add_triangle_1142_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTriangleMesh::add_array(PTA_LVecBase3 const &points, PTA_int const &indices, bool remove_duplicate_vertices = false)
 */
static PyObject *Dtool_BulletTriangleMesh_add_array_1143(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTriangleMesh *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMesh, (void **)&local_this, "BulletTriangleMesh.add_array")) {
    return nullptr;
  }
  // 1-void BulletTriangleMesh::add_array(PTA_LVecBase3 const &points, PTA_int const &indices, bool remove_duplicate_vertices = false)
  PyObject *param1;
  PyObject *param2;
  PyObject *param3 = Py_False;
  static const char *keyword_list[] = {"points", "indices", "remove_duplicate_vertices", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO|O:add_array", (char **)keyword_list, &param1, &param2, &param3)) {
    PointerToArray< LVecBase3f > param1_local;
    PTA_LVecBase3 const *param1_this = Dtool_Coerce_PointerToArray_LVecBase3f(param1, param1_local);
    if (!(param1_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletTriangleMesh.add_array", "PointerToArray");
    }
    PointerToArray< int > param2_local;
    PTA_int const *param2_this = Dtool_Coerce_PointerToArray_int(param2, param2_local);
    if (!(param2_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletTriangleMesh.add_array", "PointerToArray");
    }
    ((*local_this).add_array)(*param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_array(const BulletTriangleMesh self, const PointerToArray points, const PointerToArray indices, bool remove_duplicate_vertices)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_add_array_1143_comment =
  "C++ Interface:\n"
  "add_array(const BulletTriangleMesh self, const PointerToArray points, const PointerToArray indices, bool remove_duplicate_vertices)\n"
  "\n"
  "/**\n"
  " * Adds triangle information from an array of points and indices referring to\n"
  " * these points.  This is more efficient than adding triangles one at a time.\n"
  " *\n"
  " * If remove_duplicate_vertices is true, it will make sure that it does not\n"
  " * add duplicate vertices if they already exist in the triangle mesh, within\n"
  " * the tolerance specified by set_welding_distance().  This comes at a\n"
  " * significant performance cost, especially for large meshes.\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_add_array_1143_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTriangleMesh::add_geom(Geom const *geom, bool remove_duplicate_vertices = false, TransformState const *ts = TransformState::make_identity())
 */
static PyObject *Dtool_BulletTriangleMesh_add_geom_1144(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTriangleMesh *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMesh, (void **)&local_this, "BulletTriangleMesh.add_geom")) {
    return nullptr;
  }
  // 1-void BulletTriangleMesh::add_geom(Geom const *geom, bool remove_duplicate_vertices = false, TransformState const *ts = TransformState::make_identity())
  PyObject *param1;
  PyObject *param2 = Py_False;
  PyObject *param3 = nullptr;
  static const char *keyword_list[] = {"geom", "remove_duplicate_vertices", "ts", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|OO:add_geom", (char **)keyword_list, &param1, &param2, &param3)) {
    Geom const *param1_this = (Geom *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_Geom, 1, "BulletTriangleMesh.add_geom", true, true);
    TransformState const *param3_this;
    if (param3 == nullptr) {
      param3_this = TransformState::make_identity();
    } else {
      param3_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param3, Dtool_Ptr_TransformState, 3, "BulletTriangleMesh.add_geom", true, true);
    }
    if (param1_this != nullptr && (param3 == nullptr || param3_this != nullptr)) {
      ((*local_this).add_geom)(param1_this, (PyObject_IsTrue(param2) != 0), param3_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_geom(const BulletTriangleMesh self, const Geom geom, bool remove_duplicate_vertices, const TransformState ts)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_add_geom_1144_comment =
  "C++ Interface:\n"
  "add_geom(const BulletTriangleMesh self, const Geom geom, bool remove_duplicate_vertices, const TransformState ts)\n"
  "\n"
  "/**\n"
  " * Adds the geometry from the indicated Geom from the triangle mesh.  This is\n"
  " * a one-time copy operation, and future updates to the Geom will not be\n"
  " * reflected.\n"
  " *\n"
  " * If remove_duplicate_vertices is true, it will make sure that it does not\n"
  " * add duplicate vertices if they already exist in the triangle mesh, within\n"
  " * the tolerance specified by set_welding_distance().  This comes at a\n"
  " * significant performance cost, especially for large meshes.\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_add_geom_1144_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTriangleMesh::set_welding_distance(PN_stdfloat distance)
 */
static PyObject *Dtool_BulletTriangleMesh_set_welding_distance_1145(PyObject *self, PyObject *arg) {
  BulletTriangleMesh *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMesh, (void **)&local_this, "BulletTriangleMesh.set_welding_distance")) {
    return nullptr;
  }
  // 1-void BulletTriangleMesh::set_welding_distance(PN_stdfloat distance)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_welding_distance)((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_welding_distance(const BulletTriangleMesh self, float distance)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_set_welding_distance_1145_comment =
  "C++ Interface:\n"
  "set_welding_distance(const BulletTriangleMesh self, float distance)\n"
  "\n"
  "/**\n"
  " * Sets the square of the distance at which vertices will be merged\n"
  " * together when adding geometry with remove_duplicate_vertices set to true.\n"
  " *\n"
  " * The default is 0, meaning vertices will only be merged if they have the\n"
  " * exact same position.\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_set_welding_distance_1145_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * void BulletTriangleMesh::preallocate(int num_verts, int num_indices)
 */
static PyObject *Dtool_BulletTriangleMesh_preallocate_1146(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTriangleMesh *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMesh, (void **)&local_this, "BulletTriangleMesh.preallocate")) {
    return nullptr;
  }
  // 1-void BulletTriangleMesh::preallocate(int num_verts, int num_indices)
  int param1;
  int param2;
  static const char *keyword_list[] = {"num_verts", "num_indices", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "ii:preallocate", (char **)keyword_list, &param1, &param2)) {
    ((*local_this).preallocate)((int)param1, (int)param2);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "preallocate(const BulletTriangleMesh self, int num_verts, int num_indices)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_preallocate_1146_comment =
  "C++ Interface:\n"
  "preallocate(const BulletTriangleMesh self, int num_verts, int num_indices)\n"
  "\n"
  "/**\n"
  " * Used to reserve memory in anticipation of the given amount of vertices and\n"
  " * indices being added to the triangle mesh.  This is useful if you are about\n"
  " * to call add_triangle() many times, to prevent unnecessary reallocations.\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_preallocate_1146_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * std::size_t BulletTriangleMesh::get_num_triangles(void) const
 */
static PyObject *Dtool_BulletTriangleMesh_get_num_triangles_1147(PyObject *self, PyObject *) {
  BulletTriangleMesh *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletTriangleMesh)) {
    return nullptr;
  }
  // 1-std::size_t BulletTriangleMesh::get_num_triangles(void) const
  std::size_t return_value = ((*(const BulletTriangleMesh*)local_this).get_num_triangles)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_get_num_triangles_1147_comment =
  "C++ Interface:\n"
  "get_num_triangles(BulletTriangleMesh self)\n"
  "\n"
  "/**\n"
  " * Returns the number of triangles in this triangle mesh.\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_get_num_triangles_1147_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletTriangleMesh::get_welding_distance(void) const
 */
static PyObject *Dtool_BulletTriangleMesh_get_welding_distance_1148(PyObject *self, PyObject *) {
  BulletTriangleMesh *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletTriangleMesh)) {
    return nullptr;
  }
  // 1-PN_stdfloat BulletTriangleMesh::get_welding_distance(void) const
  PN_stdfloat return_value = ((*(const BulletTriangleMesh*)local_this).get_welding_distance)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_get_welding_distance_1148_comment =
  "C++ Interface:\n"
  "get_welding_distance(BulletTriangleMesh self)\n"
  "\n"
  "/**\n"
  " * Returns the value previously set with set_welding_distance(), or the\n"
  " * value of 0 if none was set.\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_get_welding_distance_1148_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * virtual void BulletTriangleMesh::output(std::ostream &out) const
 */
static PyObject *Dtool_BulletTriangleMesh_output_1149(PyObject *self, PyObject *arg) {
  BulletTriangleMesh *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletTriangleMesh)) {
    return nullptr;
  }
  // 1-virtual void BulletTriangleMesh::output(std::ostream &out) const
  std::ostream *arg_this = (std::ostream *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_std_ostream, 1, "BulletTriangleMesh.output", false, true);
  if (arg_this != nullptr) {
    ((*(const BulletTriangleMesh*)local_this).output)(*arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "output(BulletTriangleMesh self, ostream out)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_output_1149_comment =
  "C++ Interface:\n"
  "output(BulletTriangleMesh self, ostream out)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_output_1149_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * virtual void BulletTriangleMesh::write(std::ostream &out, int indent_level) const
 */
static PyObject *Dtool_BulletTriangleMesh_write_1150(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTriangleMesh *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletTriangleMesh)) {
    return nullptr;
  }
  // 1-virtual void BulletTriangleMesh::write(std::ostream &out, int indent_level) const
  PyObject *param1;
  int param2;
  static const char *keyword_list[] = {"out", "indent_level", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "Oi:write", (char **)keyword_list, &param1, &param2)) {
    std::ostream *param1_this = (std::ostream *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_std_ostream, 1, "BulletTriangleMesh.write", false, true);
    if (param1_this != nullptr) {
      ((*(const BulletTriangleMesh*)local_this).write)(*param1_this, (int)param2);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "write(BulletTriangleMesh self, ostream out, int indent_level)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_write_1150_comment =
  "C++ Interface:\n"
  "write(BulletTriangleMesh self, ostream out, int indent_level)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_write_1150_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletTriangleMesh::get_class_type(void)
 */
static PyObject *Dtool_BulletTriangleMesh_get_class_type_1158(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletTriangleMesh::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletTriangleMesh::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_get_class_type_1158_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletTriangleMesh_get_class_type_1158_comment = nullptr;
#endif

static PyObject *Dtool_BulletTriangleMesh_welding_distance_Getter(PyObject *self, void *) {
  const BulletTriangleMesh *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMesh, (void **)&local_this)) {
    return nullptr;
  }

  // 1-PN_stdfloat BulletTriangleMesh::get_welding_distance(void) const
  PN_stdfloat return_value = ((*(const BulletTriangleMesh*)local_this).get_welding_distance)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletTriangleMesh_welding_distance_Setter(PyObject *self, PyObject *arg, void *) {
  BulletTriangleMesh *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMesh, (void **)&local_this, "BulletTriangleMesh.welding_distance")) {
    return -1;
  }

  if (arg == nullptr) {
    Dtool_Raise_TypeError("can't delete welding_distance attribute");
    return -1;
  }
  // 1-void BulletTriangleMesh::set_welding_distance(PN_stdfloat distance)
  if (PyNumber_Check(arg)) {
    ((*local_this).set_welding_distance)((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (UNLIKELY(notify->has_assert_failed())) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_welding_distance(const BulletTriangleMesh self, float distance)\n");
  }
  return -1;
}

/**
 * sequence length function for property BulletTriangleMesh::vertices
 */
static Py_ssize_t Dtool_BulletTriangleMesh_vertices_Len(PyObject *self) {
  BulletTriangleMesh *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMesh, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_vertices)();
}

/**
 * sequence getter for property BulletTriangleMesh::vertices
 */
static PyObject *Dtool_BulletTriangleMesh_vertices_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletTriangleMesh *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMesh, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_vertices)()) {
    PyErr_SetString(PyExc_IndexError, "BulletTriangleMesh.vertices[] index out of range");
    return nullptr;
  }
  // 1-LPoint3 BulletTriangleMesh::get_vertex(std::size_t index) const
  LPoint3 *return_value = new LPoint3(((*(const BulletTriangleMesh*)local_this).get_vertex)(index));
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_vertex(BulletTriangleMesh self, index)\n");
  }
}

static PyObject *Dtool_BulletTriangleMesh_vertices_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletTriangleMesh.vertices");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletTriangleMesh_vertices_Len;
    wrap->_getitem_func = &Dtool_BulletTriangleMesh_vertices_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * sequence length function for property BulletTriangleMesh::triangles
 */
static Py_ssize_t Dtool_BulletTriangleMesh_triangles_Len(PyObject *self) {
  BulletTriangleMesh *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMesh, (void **)&local_this)) {
    return -1;
  }
  return (Py_ssize_t)((*local_this).get_num_triangles)();
}

/**
 * sequence getter for property BulletTriangleMesh::triangles
 */
static PyObject *Dtool_BulletTriangleMesh_triangles_Sequence_Getitem(PyObject *self, Py_ssize_t index) {
  BulletTriangleMesh *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMesh, (void **)&local_this)) {
    return nullptr;
  }
  if (index < 0 || index >= (Py_ssize_t)((*local_this).get_num_triangles)()) {
    PyErr_SetString(PyExc_IndexError, "BulletTriangleMesh.triangles[] index out of range");
    return nullptr;
  }
  // 1-LVecBase3i BulletTriangleMesh::get_triangle(std::size_t index) const
  LVecBase3i *return_value = new LVecBase3i(((*(const BulletTriangleMesh*)local_this).get_triangle)(index));
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    delete return_value;
    return Dtool_Raise_AssertionError();
  }
#endif
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3i, true, false);
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_triangle(BulletTriangleMesh self, index)\n");
  }
}

static PyObject *Dtool_BulletTriangleMesh_triangles_Getter(PyObject *self, void *) {
  nassertr(self != nullptr, nullptr);
  Dtool_SequenceWrapper *wrap = Dtool_NewSequenceWrapper(self, "BulletTriangleMesh.triangles");
  if (wrap != nullptr) {
    wrap->_len_func = &Dtool_BulletTriangleMesh_triangles_Len;
    wrap->_getitem_func = &Dtool_BulletTriangleMesh_triangles_Sequence_Getitem;
  }
  return (PyObject *)wrap;
}

/**
 * Python function wrapper for:
 * BulletTriangleMesh::BulletTriangleMesh(void)
 */
static int Dtool_Init_BulletTriangleMesh(PyObject *self, PyObject *args, PyObject *kwds) {
  if (kwds != nullptr && PyDict_Size(kwds) > 0) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no keyword arguments");
    return -1;
#else
    Dtool_Raise_TypeError("BulletTriangleMesh() takes no keyword arguments");
    return -1;
#endif
  }
  if (!Dtool_CheckNoArgs(args)) {
    const int parameter_count = (int)PyTuple_GET_SIZE(args);
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no arguments");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletTriangleMesh() takes no arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  // 1-BulletTriangleMesh::BulletTriangleMesh(void)
  BulletTriangleMesh *return_value = new BulletTriangleMesh();
  if (return_value == nullptr) {
    PyErr_NoMemory();
    return -1;
  }
  return_value->ref();
  if (Dtool_CheckErrorOccurred()) {
    unref_delete(return_value);
    return -1;
  }
  return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletTriangleMesh, true, false);
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletTriangleMesh()\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletTriangleMesh(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletTriangleMesh) {
    printf("BulletTriangleMesh ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletTriangleMesh *local_this = (BulletTriangleMesh *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletTriangleMesh) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletTriangleMesh(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletTriangleMesh) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletTriangleMesh*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletTriangleMesh*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletTriangleMesh*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletTriangleMesh*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class BulletTriangleMeshShape
 */
/**
 * Python function wrapper for:
 * void BulletTriangleMeshShape::refit_tree(LPoint3 const &aabb_min, LPoint3 const &aabb_max)
 */
static PyObject *Dtool_BulletTriangleMeshShape_refit_tree_1161(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTriangleMeshShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMeshShape, (void **)&local_this, "BulletTriangleMeshShape.refit_tree")) {
    return nullptr;
  }
  // 1-void BulletTriangleMeshShape::refit_tree(LPoint3 const &aabb_min, LPoint3 const &aabb_max)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"aabb_min", "aabb_max", nullptr};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:refit_tree", (char **)keyword_list, &param1, &param2)) {
    LPoint3f param1_local;
    LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
    if (!(param1_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletTriangleMeshShape.refit_tree", "LPoint3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != nullptr)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletTriangleMeshShape.refit_tree", "LPoint3f");
    }
    ((*local_this).refit_tree)(*param1_this, *param2_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "refit_tree(const BulletTriangleMeshShape self, const LPoint3f aabb_min, const LPoint3f aabb_max)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMeshShape_refit_tree_1161_comment =
  "C++ Interface:\n"
  "refit_tree(const BulletTriangleMeshShape self, const LPoint3f aabb_min, const LPoint3f aabb_max)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMeshShape_refit_tree_1161_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletTriangleMeshShape::is_static(void) const
 */
static PyObject *Dtool_BulletTriangleMeshShape_is_static_1162(PyObject *self, PyObject *) {
  BulletTriangleMeshShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletTriangleMeshShape)) {
    return nullptr;
  }
  // 1-inline bool BulletTriangleMeshShape::is_static(void) const
  bool return_value = ((*(const BulletTriangleMeshShape*)local_this).is_static)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMeshShape_is_static_1162_comment =
  "C++ Interface:\n"
  "is_static(BulletTriangleMeshShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMeshShape_is_static_1162_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletTriangleMeshShape::is_dynamic(void) const
 */
static PyObject *Dtool_BulletTriangleMeshShape_is_dynamic_1163(PyObject *self, PyObject *) {
  BulletTriangleMeshShape *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_BulletTriangleMeshShape)) {
    return nullptr;
  }
  // 1-inline bool BulletTriangleMeshShape::is_dynamic(void) const
  bool return_value = ((*(const BulletTriangleMeshShape*)local_this).is_dynamic)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMeshShape_is_dynamic_1163_comment =
  "C++ Interface:\n"
  "is_dynamic(BulletTriangleMeshShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMeshShape_is_dynamic_1163_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletTriangleMeshShape::get_class_type(void)
 */
static PyObject *Dtool_BulletTriangleMeshShape_get_class_type_1166(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletTriangleMeshShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((BulletTriangleMeshShape::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMeshShape_get_class_type_1166_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletTriangleMeshShape_get_class_type_1166_comment = nullptr;
#endif

static PyObject *Dtool_BulletTriangleMeshShape_static_Getter(PyObject *self, void *) {
  const BulletTriangleMeshShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMeshShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline bool BulletTriangleMeshShape::is_static(void) const
  bool return_value = ((*(const BulletTriangleMeshShape*)local_this).is_static)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static PyObject *Dtool_BulletTriangleMeshShape_dynamic_Getter(PyObject *self, void *) {
  const BulletTriangleMeshShape *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMeshShape, (void **)&local_this)) {
    return nullptr;
  }

  // 1-inline bool BulletTriangleMeshShape::is_dynamic(void) const
  bool return_value = ((*(const BulletTriangleMeshShape*)local_this).is_dynamic)();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (UNLIKELY(notify->has_assert_failed())) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

/**
 * Python function wrapper for:
 * explicit BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMesh *mesh, bool dynamic, bool compress = true, bool bvh = true)
 * BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMeshShape const &copy)
 */
static int Dtool_Init_BulletTriangleMeshShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != nullptr) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg;
      if (Dtool_ExtractArg(&arg, args, kwds, "copy")) {
        // 1-BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMeshShape const &copy)
        BulletTriangleMeshShape const *arg_this = (BulletTriangleMeshShape *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletTriangleMeshShape, 0, "BulletTriangleMeshShape.BulletTriangleMeshShape", true, true);
        if (arg_this != nullptr) {
          BulletTriangleMeshShape *return_value = new BulletTriangleMeshShape(*arg_this);
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletTriangleMeshShape, true, false);
        }
      }
    }
    break;
  case 2:
  case 3:
  case 4:
    {
      // 1-explicit BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMesh *mesh, bool dynamic, bool compress = true, bool bvh = true)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2 = Py_True;
      PyObject *param3 = Py_True;
      static const char *keyword_list[] = {"mesh", "dynamic", "compress", "bvh", nullptr};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO|OO:BulletTriangleMeshShape", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
        BulletTriangleMesh *param0_this = (BulletTriangleMesh *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletTriangleMesh, 0, "BulletTriangleMeshShape.BulletTriangleMeshShape", false, true);
        if (param0_this != nullptr) {
          BulletTriangleMeshShape *return_value = new BulletTriangleMeshShape(param0_this, (PyObject_IsTrue(param1) != 0), (PyObject_IsTrue(param2) != 0), (PyObject_IsTrue(param3) != 0));
          if (return_value == nullptr) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletTriangleMeshShape, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletTriangleMeshShape() takes 1, 2, 3 or 4 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletTriangleMeshShape(const BulletTriangleMeshShape copy)\n"
      "BulletTriangleMeshShape(BulletTriangleMesh mesh, bool dynamic, bool compress, bool bvh)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletTriangleMeshShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_BulletTriangleMeshShape) {
    printf("BulletTriangleMeshShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  BulletTriangleMeshShape *local_this = (BulletTriangleMeshShape *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_BulletTriangleMeshShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_BulletTriangleMeshShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_BulletTriangleMeshShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletTriangleMeshShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletTriangleMeshShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletTriangleMeshShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletTriangleMeshShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletTriangleMeshShape*)other_this;
  }
  return nullptr;
}

/**
 * Python method tables for BulletRayHit (BulletRayHit)
 */
static PyMethodDef Dtool_Methods_BulletRayHit[] = {
  {"empty", &Dtool_BulletRayHit_empty_5, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletRayHit_empty_5_comment},
  {"get_node", &Dtool_BulletRayHit_get_node_6, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_node_6_comment},
  {"getNode", &Dtool_BulletRayHit_get_node_6, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_node_6_comment},
  {"get_hit_pos", &Dtool_BulletRayHit_get_hit_pos_7, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_hit_pos_7_comment},
  {"getHitPos", &Dtool_BulletRayHit_get_hit_pos_7, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_hit_pos_7_comment},
  {"get_hit_normal", &Dtool_BulletRayHit_get_hit_normal_8, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_hit_normal_8_comment},
  {"getHitNormal", &Dtool_BulletRayHit_get_hit_normal_8, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_hit_normal_8_comment},
  {"get_hit_fraction", &Dtool_BulletRayHit_get_hit_fraction_9, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_hit_fraction_9_comment},
  {"getHitFraction", &Dtool_BulletRayHit_get_hit_fraction_9, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_hit_fraction_9_comment},
  {"get_shape_part", &Dtool_BulletRayHit_get_shape_part_10, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_shape_part_10_comment},
  {"getShapePart", &Dtool_BulletRayHit_get_shape_part_10, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_shape_part_10_comment},
  {"get_triangle_index", &Dtool_BulletRayHit_get_triangle_index_11, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_triangle_index_11_comment},
  {"getTriangleIndex", &Dtool_BulletRayHit_get_triangle_index_11, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_triangle_index_11_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletRayHit[] = {
  {(char *)"node", &Dtool_BulletRayHit_node_Getter, nullptr, nullptr, nullptr},
  {(char *)"hit_pos", &Dtool_BulletRayHit_hit_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"hit_normal", &Dtool_BulletRayHit_hit_normal_Getter, nullptr, nullptr, nullptr},
  {(char *)"hit_fraction", &Dtool_BulletRayHit_hit_fraction_Getter, nullptr, nullptr, nullptr},
  {(char *)"shape_part", &Dtool_BulletRayHit_shape_part_Getter, nullptr, nullptr, nullptr},
  {(char *)"triangle_index", &Dtool_BulletRayHit_triangle_index_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletRayHit = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletRayHit = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletRayHit",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletRayHit,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletRayHit,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletRayHit,
    nullptr, // tp_members
    Dtool_Properties_BulletRayHit,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletRayHit,
    PyType_GenericAlloc,
    Dtool_new_BulletRayHit,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletRayHit,
  Dtool_UpcastInterface_BulletRayHit,
  Dtool_DowncastInterface_BulletRayHit,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletRayHit(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletRayHit._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletRayHit._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletRayHit) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletRayHit)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletRayHit);
  }
}

/**
 * Python method tables for BulletAllHitsRayResult (BulletAllHitsRayResult)
 */
static PyMethodDef Dtool_Methods_BulletAllHitsRayResult[] = {
  {"empty", &Dtool_BulletAllHitsRayResult_empty_34, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletAllHitsRayResult_empty_34_comment},
  {"get_from_pos", &Dtool_BulletAllHitsRayResult_get_from_pos_35, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_from_pos_35_comment},
  {"getFromPos", &Dtool_BulletAllHitsRayResult_get_from_pos_35, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_from_pos_35_comment},
  {"get_to_pos", &Dtool_BulletAllHitsRayResult_get_to_pos_36, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_to_pos_36_comment},
  {"getToPos", &Dtool_BulletAllHitsRayResult_get_to_pos_36, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_to_pos_36_comment},
  {"has_hits", &Dtool_BulletAllHitsRayResult_has_hits_37, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_has_hits_37_comment},
  {"hasHits", &Dtool_BulletAllHitsRayResult_has_hits_37, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_has_hits_37_comment},
  {"get_closest_hit_fraction", &Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_38, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_38_comment},
  {"getClosestHitFraction", &Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_38, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_38_comment},
  {"get_num_hits", &Dtool_BulletAllHitsRayResult_get_num_hits_39, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_num_hits_39_comment},
  {"getNumHits", &Dtool_BulletAllHitsRayResult_get_num_hits_39, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_num_hits_39_comment},
  {"get_hit", &Dtool_BulletAllHitsRayResult_get_hit_40, METH_O, (const char *)Dtool_BulletAllHitsRayResult_get_hit_40_comment},
  {"getHit", &Dtool_BulletAllHitsRayResult_get_hit_40, METH_O, (const char *)Dtool_BulletAllHitsRayResult_get_hit_40_comment},
  {"get_hits", (PyCFunction) &MakeSeq_BulletAllHitsRayResult_get_hits, METH_NOARGS, nullptr},
  { "getHits", (PyCFunction) &MakeSeq_BulletAllHitsRayResult_get_hits, METH_NOARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletAllHitsRayResult[] = {
  {(char *)"from_pos", &Dtool_BulletAllHitsRayResult_from_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"to_pos", &Dtool_BulletAllHitsRayResult_to_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"closest_hit_fraction", &Dtool_BulletAllHitsRayResult_closest_hit_fraction_Getter, nullptr, nullptr, nullptr},
  {(char *)"hits", &Dtool_BulletAllHitsRayResult_hits_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletAllHitsRayResult = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletAllHitsRayResult = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletAllHitsRayResult = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletAllHitsRayResult = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletAllHitsRayResult = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletAllHitsRayResult = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletAllHitsRayResult",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletAllHitsRayResult,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletAllHitsRayResult,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletAllHitsRayResult,
    &Dtool_SequenceMethods_BulletAllHitsRayResult,
    &Dtool_MappingMethods_BulletAllHitsRayResult,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletAllHitsRayResult,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletAllHitsRayResult,
    nullptr, // tp_members
    Dtool_Properties_BulletAllHitsRayResult,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletAllHitsRayResult,
    PyType_GenericAlloc,
    Dtool_new_BulletAllHitsRayResult,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletAllHitsRayResult,
  Dtool_UpcastInterface_BulletAllHitsRayResult,
  Dtool_DowncastInterface_BulletAllHitsRayResult,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletAllHitsRayResult(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletAllHitsRayResult._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletAllHitsRayResult._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletAllHitsRayResult) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletAllHitsRayResult)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletAllHitsRayResult);
  }
}

/**
 * Python method tables for BulletShape (BulletShape)
 */
static PyMethodDef Dtool_Methods_BulletShape[] = {
  {"is_polyhedral", &Dtool_BulletShape_is_polyhedral_49, METH_NOARGS, (const char *)Dtool_BulletShape_is_polyhedral_49_comment},
  {"isPolyhedral", &Dtool_BulletShape_is_polyhedral_49, METH_NOARGS, (const char *)Dtool_BulletShape_is_polyhedral_49_comment},
  {"is_convex", &Dtool_BulletShape_is_convex_50, METH_NOARGS, (const char *)Dtool_BulletShape_is_convex_50_comment},
  {"isConvex", &Dtool_BulletShape_is_convex_50, METH_NOARGS, (const char *)Dtool_BulletShape_is_convex_50_comment},
  {"is_convex_2d", &Dtool_BulletShape_is_convex_2d_51, METH_NOARGS, (const char *)Dtool_BulletShape_is_convex_2d_51_comment},
  {"isConvex2d", &Dtool_BulletShape_is_convex_2d_51, METH_NOARGS, (const char *)Dtool_BulletShape_is_convex_2d_51_comment},
  {"is_concave", &Dtool_BulletShape_is_concave_52, METH_NOARGS, (const char *)Dtool_BulletShape_is_concave_52_comment},
  {"isConcave", &Dtool_BulletShape_is_concave_52, METH_NOARGS, (const char *)Dtool_BulletShape_is_concave_52_comment},
  {"is_infinite", &Dtool_BulletShape_is_infinite_53, METH_NOARGS, (const char *)Dtool_BulletShape_is_infinite_53_comment},
  {"isInfinite", &Dtool_BulletShape_is_infinite_53, METH_NOARGS, (const char *)Dtool_BulletShape_is_infinite_53_comment},
  {"is_non_moving", &Dtool_BulletShape_is_non_moving_54, METH_NOARGS, (const char *)Dtool_BulletShape_is_non_moving_54_comment},
  {"isNonMoving", &Dtool_BulletShape_is_non_moving_54, METH_NOARGS, (const char *)Dtool_BulletShape_is_non_moving_54_comment},
  {"is_soft_body", &Dtool_BulletShape_is_soft_body_55, METH_NOARGS, (const char *)Dtool_BulletShape_is_soft_body_55_comment},
  {"isSoftBody", &Dtool_BulletShape_is_soft_body_55, METH_NOARGS, (const char *)Dtool_BulletShape_is_soft_body_55_comment},
  {"set_margin", &Dtool_BulletShape_set_margin_56, METH_O, (const char *)Dtool_BulletShape_set_margin_56_comment},
  {"setMargin", &Dtool_BulletShape_set_margin_56, METH_O, (const char *)Dtool_BulletShape_set_margin_56_comment},
  {"get_name", &Dtool_BulletShape_get_name_57, METH_NOARGS, (const char *)Dtool_BulletShape_get_name_57_comment},
  {"getName", &Dtool_BulletShape_get_name_57, METH_NOARGS, (const char *)Dtool_BulletShape_get_name_57_comment},
  {"get_margin", &Dtool_BulletShape_get_margin_58, METH_NOARGS, (const char *)Dtool_BulletShape_get_margin_58_comment},
  {"getMargin", &Dtool_BulletShape_get_margin_58, METH_NOARGS, (const char *)Dtool_BulletShape_get_margin_58_comment},
  {"get_shape_bounds", &Dtool_BulletShape_get_shape_bounds_59, METH_NOARGS, (const char *)Dtool_BulletShape_get_shape_bounds_59_comment},
  {"getShapeBounds", &Dtool_BulletShape_get_shape_bounds_59, METH_NOARGS, (const char *)Dtool_BulletShape_get_shape_bounds_59_comment},
  {"get_class_type", &Dtool_BulletShape_get_class_type_75, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletShape_get_class_type_75_comment},
  {"getClassType", &Dtool_BulletShape_get_class_type_75, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletShape_get_class_type_75_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletShape[] = {
  {(char *)"polyhedral", &Dtool_BulletShape_polyhedral_Getter, nullptr, nullptr, nullptr},
  {(char *)"convex", &Dtool_BulletShape_convex_Getter, nullptr, nullptr, nullptr},
  {(char *)"convex_2d", &Dtool_BulletShape_convex_2d_Getter, nullptr, nullptr, nullptr},
  {(char *)"concave", &Dtool_BulletShape_concave_Getter, nullptr, nullptr, nullptr},
  {(char *)"infinite", &Dtool_BulletShape_infinite_Getter, nullptr, nullptr, nullptr},
  {(char *)"non_moving", &Dtool_BulletShape_non_moving_Getter, nullptr, nullptr, nullptr},
  {(char *)"soft_body", &Dtool_BulletShape_soft_body_Getter, nullptr, nullptr, nullptr},
  {(char *)"margin", &Dtool_BulletShape_margin_Getter, &Dtool_BulletShape_margin_Setter, nullptr, nullptr},
  {(char *)"name", &Dtool_BulletShape_name_Getter, nullptr, nullptr, nullptr},
  {(char *)"shape_bounds", &Dtool_BulletShape_shape_bounds_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletShape,
    &Dtool_SequenceMethods_BulletShape,
    &Dtool_MappingMethods_BulletShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletShape,
    nullptr, // tp_members
    Dtool_Properties_BulletShape,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletShape,
    PyType_GenericAlloc,
    Dtool_new_BulletShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletShape,
  Dtool_UpcastInterface_BulletShape,
  Dtool_DowncastInterface_BulletShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_TypedWritableReferenceCount != nullptr);
    assert(Dtool_Ptr_TypedWritableReferenceCount->_Dtool_ModuleClassInit != nullptr);
    Dtool_Ptr_TypedWritableReferenceCount->_Dtool_ModuleClassInit(nullptr);
    Dtool_BulletShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_TypedWritableReferenceCount);
    Dtool_BulletShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletShape);
  }
}

/**
 * Python method tables for BulletBaseCharacterControllerNode (BulletBaseCharacterControllerNode)
 */
static PyMethodDef Dtool_Methods_BulletBaseCharacterControllerNode[] = {
  {"get_class_type", &Dtool_BulletBaseCharacterControllerNode_get_class_type_77, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletBaseCharacterControllerNode_get_class_type_77_comment},
  {"getClassType", &Dtool_BulletBaseCharacterControllerNode_get_class_type_77, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletBaseCharacterControllerNode_get_class_type_77_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyNumberMethods Dtool_NumberMethods_BulletBaseCharacterControllerNode = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletBaseCharacterControllerNode = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletBaseCharacterControllerNode = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletBaseCharacterControllerNode = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletBaseCharacterControllerNode = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletBaseCharacterControllerNode = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletBaseCharacterControllerNode",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletBaseCharacterControllerNode,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletBaseCharacterControllerNode,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletBaseCharacterControllerNode,
    &Dtool_SequenceMethods_BulletBaseCharacterControllerNode,
    &Dtool_MappingMethods_BulletBaseCharacterControllerNode,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletBaseCharacterControllerNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletBaseCharacterControllerNode,
    nullptr, // tp_members
    nullptr, // tp_getset
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletBaseCharacterControllerNode,
    PyType_GenericAlloc,
    Dtool_new_BulletBaseCharacterControllerNode,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletBaseCharacterControllerNode,
  Dtool_UpcastInterface_BulletBaseCharacterControllerNode,
  Dtool_DowncastInterface_BulletBaseCharacterControllerNode,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletBaseCharacterControllerNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_PandaNode != nullptr);
    assert(Dtool_Ptr_PandaNode->_Dtool_ModuleClassInit != nullptr);
    Dtool_Ptr_PandaNode->_Dtool_ModuleClassInit(nullptr);
    Dtool_BulletBaseCharacterControllerNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_PandaNode);
    Dtool_BulletBaseCharacterControllerNode._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletBaseCharacterControllerNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletBaseCharacterControllerNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletBaseCharacterControllerNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletBaseCharacterControllerNode);
  }
}

/**
 * Python method tables for BulletBodyNode (BulletBodyNode)
 */
static PyMethodDef Dtool_Methods_BulletBodyNode[] = {
  {"add_shape", (PyCFunction) &Dtool_BulletBodyNode_add_shape_80, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletBodyNode_add_shape_80_comment},
  {"addShape", (PyCFunction) &Dtool_BulletBodyNode_add_shape_80, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletBodyNode_add_shape_80_comment},
  {"remove_shape", &Dtool_BulletBodyNode_remove_shape_81, METH_O, (const char *)Dtool_BulletBodyNode_remove_shape_81_comment},
  {"removeShape", &Dtool_BulletBodyNode_remove_shape_81, METH_O, (const char *)Dtool_BulletBodyNode_remove_shape_81_comment},
  {"get_num_shapes", &Dtool_BulletBodyNode_get_num_shapes_82, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_num_shapes_82_comment},
  {"getNumShapes", &Dtool_BulletBodyNode_get_num_shapes_82, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_num_shapes_82_comment},
  {"get_shape", &Dtool_BulletBodyNode_get_shape_83, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_83_comment},
  {"getShape", &Dtool_BulletBodyNode_get_shape_83, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_83_comment},
  {"get_shape_pos", &Dtool_BulletBodyNode_get_shape_pos_85, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_pos_85_comment},
  {"getShapePos", &Dtool_BulletBodyNode_get_shape_pos_85, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_pos_85_comment},
  {"get_shape_mat", &Dtool_BulletBodyNode_get_shape_mat_86, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_mat_86_comment},
  {"getShapeMat", &Dtool_BulletBodyNode_get_shape_mat_86, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_mat_86_comment},
  {"get_shape_transform", &Dtool_BulletBodyNode_get_shape_transform_87, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_transform_87_comment},
  {"getShapeTransform", &Dtool_BulletBodyNode_get_shape_transform_87, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_transform_87_comment},
  {"get_shape_bounds", &Dtool_BulletBodyNode_get_shape_bounds_88, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_shape_bounds_88_comment},
  {"getShapeBounds", &Dtool_BulletBodyNode_get_shape_bounds_88, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_shape_bounds_88_comment},
  {"add_shapes_from_collision_solids", &Dtool_BulletBodyNode_add_shapes_from_collision_solids_89, METH_O, (const char *)Dtool_BulletBodyNode_add_shapes_from_collision_solids_89_comment},
  {"addShapesFromCollisionSolids", &Dtool_BulletBodyNode_add_shapes_from_collision_solids_89, METH_O, (const char *)Dtool_BulletBodyNode_add_shapes_from_collision_solids_89_comment},
  {"is_static", &Dtool_BulletBodyNode_is_static_90, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_static_90_comment},
  {"isStatic", &Dtool_BulletBodyNode_is_static_90, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_static_90_comment},
  {"is_kinematic", &Dtool_BulletBodyNode_is_kinematic_91, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_kinematic_91_comment},
  {"isKinematic", &Dtool_BulletBodyNode_is_kinematic_91, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_kinematic_91_comment},
  {"set_static", &Dtool_BulletBodyNode_set_static_92, METH_O, (const char *)Dtool_BulletBodyNode_set_static_92_comment},
  {"setStatic", &Dtool_BulletBodyNode_set_static_92, METH_O, (const char *)Dtool_BulletBodyNode_set_static_92_comment},
  {"set_kinematic", &Dtool_BulletBodyNode_set_kinematic_93, METH_O, (const char *)Dtool_BulletBodyNode_set_kinematic_93_comment},
  {"setKinematic", &Dtool_BulletBodyNode_set_kinematic_93, METH_O, (const char *)Dtool_BulletBodyNode_set_kinematic_93_comment},
  {"set_into_collide_mask", &Dtool_BulletBodyNode_set_into_collide_mask_94, METH_O, (const char *)Dtool_BulletBodyNode_set_into_collide_mask_94_comment},
  {"setIntoCollideMask", &Dtool_BulletBodyNode_set_into_collide_mask_94, METH_O, (const char *)Dtool_BulletBodyNode_set_into_collide_mask_94_comment},
  {"notify_collisions", &Dtool_BulletBodyNode_notify_collisions_95, METH_O, (const char *)Dtool_BulletBodyNode_notify_collisions_95_comment},
  {"notifyCollisions", &Dtool_BulletBodyNode_notify_collisions_95, METH_O, (const char *)Dtool_BulletBodyNode_notify_collisions_95_comment},
  {"notifies_collisions", &Dtool_BulletBodyNode_notifies_collisions_96, METH_NOARGS, (const char *)Dtool_BulletBodyNode_notifies_collisions_96_comment},
  {"notifiesCollisions", &Dtool_BulletBodyNode_notifies_collisions_96, METH_NOARGS, (const char *)Dtool_BulletBodyNode_notifies_collisions_96_comment},
  {"set_collision_response", &Dtool_BulletBodyNode_set_collision_response_97, METH_O, (const char *)Dtool_BulletBodyNode_set_collision_response_97_comment},
  {"setCollisionResponse", &Dtool_BulletBodyNode_set_collision_response_97, METH_O, (const char *)Dtool_BulletBodyNode_set_collision_response_97_comment},
  {"get_collision_response", &Dtool_BulletBodyNode_get_collision_response_98, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_collision_response_98_comment},
  {"getCollisionResponse", &Dtool_BulletBodyNode_get_collision_response_98, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_collision_response_98_comment},
  {"check_collision_with", &Dtool_BulletBodyNode_check_collision_with_99, METH_O, (const char *)Dtool_BulletBodyNode_check_collision_with_99_comment},
  {"checkCollisionWith", &Dtool_BulletBodyNode_check_collision_with_99, METH_O, (const char *)Dtool_BulletBodyNode_check_collision_with_99_comment},
  {"has_contact_response", &Dtool_BulletBodyNode_has_contact_response_100, METH_NOARGS, (const char *)Dtool_BulletBodyNode_has_contact_response_100_comment},
  {"hasContactResponse", &Dtool_BulletBodyNode_has_contact_response_100, METH_NOARGS, (const char *)Dtool_BulletBodyNode_has_contact_response_100_comment},
  {"get_contact_processing_threshold", &Dtool_BulletBodyNode_get_contact_processing_threshold_101, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_contact_processing_threshold_101_comment},
  {"getContactProcessingThreshold", &Dtool_BulletBodyNode_get_contact_processing_threshold_101, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_contact_processing_threshold_101_comment},
  {"set_contact_processing_threshold", &Dtool_BulletBodyNode_set_contact_processing_threshold_102, METH_O, (const char *)Dtool_BulletBodyNode_set_contact_processing_threshold_102_comment},
  {"setContactProcessingThreshold", &Dtool_BulletBodyNode_set_contact_processing_threshold_102, METH_O, (const char *)Dtool_BulletBodyNode_set_contact_processing_threshold_102_comment},
  {"is_active", &Dtool_BulletBodyNode_is_active_103, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_active_103_comment},
  {"isActive", &Dtool_BulletBodyNode_is_active_103, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_active_103_comment},
  {"set_active", (PyCFunction) &Dtool_BulletBodyNode_set_active_104, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletBodyNode_set_active_104_comment},
  {"setActive", (PyCFunction) &Dtool_BulletBodyNode_set_active_104, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletBodyNode_set_active_104_comment},
  {"force_active", &Dtool_BulletBodyNode_force_active_105, METH_O, (const char *)Dtool_BulletBodyNode_force_active_105_comment},
  {"forceActive", &Dtool_BulletBodyNode_force_active_105, METH_O, (const char *)Dtool_BulletBodyNode_force_active_105_comment},
  {"set_deactivation_time", &Dtool_BulletBodyNode_set_deactivation_time_106, METH_O, (const char *)Dtool_BulletBodyNode_set_deactivation_time_106_comment},
  {"setDeactivationTime", &Dtool_BulletBodyNode_set_deactivation_time_106, METH_O, (const char *)Dtool_BulletBodyNode_set_deactivation_time_106_comment},
  {"get_deactivation_time", &Dtool_BulletBodyNode_get_deactivation_time_107, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_deactivation_time_107_comment},
  {"getDeactivationTime", &Dtool_BulletBodyNode_get_deactivation_time_107, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_deactivation_time_107_comment},
  {"set_deactivation_enabled", &Dtool_BulletBodyNode_set_deactivation_enabled_108, METH_O, (const char *)Dtool_BulletBodyNode_set_deactivation_enabled_108_comment},
  {"setDeactivationEnabled", &Dtool_BulletBodyNode_set_deactivation_enabled_108, METH_O, (const char *)Dtool_BulletBodyNode_set_deactivation_enabled_108_comment},
  {"is_deactivation_enabled", &Dtool_BulletBodyNode_is_deactivation_enabled_109, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_deactivation_enabled_109_comment},
  {"isDeactivationEnabled", &Dtool_BulletBodyNode_is_deactivation_enabled_109, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_deactivation_enabled_109_comment},
  {"set_debug_enabled", &Dtool_BulletBodyNode_set_debug_enabled_110, METH_O, (const char *)Dtool_BulletBodyNode_set_debug_enabled_110_comment},
  {"setDebugEnabled", &Dtool_BulletBodyNode_set_debug_enabled_110, METH_O, (const char *)Dtool_BulletBodyNode_set_debug_enabled_110_comment},
  {"is_debug_enabled", &Dtool_BulletBodyNode_is_debug_enabled_111, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_debug_enabled_111_comment},
  {"isDebugEnabled", &Dtool_BulletBodyNode_is_debug_enabled_111, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_debug_enabled_111_comment},
  {"get_restitution", &Dtool_BulletBodyNode_get_restitution_112, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_restitution_112_comment},
  {"getRestitution", &Dtool_BulletBodyNode_get_restitution_112, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_restitution_112_comment},
  {"set_restitution", &Dtool_BulletBodyNode_set_restitution_113, METH_O, (const char *)Dtool_BulletBodyNode_set_restitution_113_comment},
  {"setRestitution", &Dtool_BulletBodyNode_set_restitution_113, METH_O, (const char *)Dtool_BulletBodyNode_set_restitution_113_comment},
  {"get_friction", &Dtool_BulletBodyNode_get_friction_114, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_friction_114_comment},
  {"getFriction", &Dtool_BulletBodyNode_get_friction_114, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_friction_114_comment},
  {"set_friction", &Dtool_BulletBodyNode_set_friction_115, METH_O, (const char *)Dtool_BulletBodyNode_set_friction_115_comment},
  {"setFriction", &Dtool_BulletBodyNode_set_friction_115, METH_O, (const char *)Dtool_BulletBodyNode_set_friction_115_comment},
  {"has_anisotropic_friction", &Dtool_BulletBodyNode_has_anisotropic_friction_116, METH_NOARGS, (const char *)Dtool_BulletBodyNode_has_anisotropic_friction_116_comment},
  {"hasAnisotropicFriction", &Dtool_BulletBodyNode_has_anisotropic_friction_116, METH_NOARGS, (const char *)Dtool_BulletBodyNode_has_anisotropic_friction_116_comment},
  {"set_anisotropic_friction", &Dtool_BulletBodyNode_set_anisotropic_friction_117, METH_O, (const char *)Dtool_BulletBodyNode_set_anisotropic_friction_117_comment},
  {"setAnisotropicFriction", &Dtool_BulletBodyNode_set_anisotropic_friction_117, METH_O, (const char *)Dtool_BulletBodyNode_set_anisotropic_friction_117_comment},
  {"get_anisotropic_friction", &Dtool_BulletBodyNode_get_anisotropic_friction_118, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_anisotropic_friction_118_comment},
  {"getAnisotropicFriction", &Dtool_BulletBodyNode_get_anisotropic_friction_118, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_anisotropic_friction_118_comment},
  {"get_ccd_swept_sphere_radius", &Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_119, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_119_comment},
  {"getCcdSweptSphereRadius", &Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_119, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_119_comment},
  {"get_ccd_motion_threshold", &Dtool_BulletBodyNode_get_ccd_motion_threshold_120, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_ccd_motion_threshold_120_comment},
  {"getCcdMotionThreshold", &Dtool_BulletBodyNode_get_ccd_motion_threshold_120, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_ccd_motion_threshold_120_comment},
  {"set_ccd_swept_sphere_radius", &Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_121, METH_O, (const char *)Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_121_comment},
  {"setCcdSweptSphereRadius", &Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_121, METH_O, (const char *)Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_121_comment},
  {"set_ccd_motion_threshold", &Dtool_BulletBodyNode_set_ccd_motion_threshold_122, METH_O, (const char *)Dtool_BulletBodyNode_set_ccd_motion_threshold_122_comment},
  {"setCcdMotionThreshold", &Dtool_BulletBodyNode_set_ccd_motion_threshold_122, METH_O, (const char *)Dtool_BulletBodyNode_set_ccd_motion_threshold_122_comment},
  {"set_transform_dirty", &Dtool_BulletBodyNode_set_transform_dirty_123, METH_NOARGS, (const char *)Dtool_BulletBodyNode_set_transform_dirty_123_comment},
  {"setTransformDirty", &Dtool_BulletBodyNode_set_transform_dirty_123, METH_NOARGS, (const char *)Dtool_BulletBodyNode_set_transform_dirty_123_comment},
  {"get_class_type", &Dtool_BulletBodyNode_get_class_type_150, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletBodyNode_get_class_type_150_comment},
  {"getClassType", &Dtool_BulletBodyNode_get_class_type_150, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletBodyNode_get_class_type_150_comment},
  {"get_shapes", (PyCFunction) &MakeSeq_BulletBodyNode_get_shapes, METH_NOARGS, nullptr},
  { "getShapes", (PyCFunction) &MakeSeq_BulletBodyNode_get_shapes, METH_NOARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletBodyNode[] = {
  {(char *)"shapes", &Dtool_BulletBodyNode_shapes_Getter, nullptr, nullptr, nullptr},
  {(char *)"shape_pos", &Dtool_BulletBodyNode_shape_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"shape_mat", &Dtool_BulletBodyNode_shape_mat_Getter, nullptr, nullptr, nullptr},
  {(char *)"shape_transform", &Dtool_BulletBodyNode_shape_transform_Getter, nullptr, nullptr, nullptr},
  {(char *)"shape_bounds", &Dtool_BulletBodyNode_shape_bounds_Getter, nullptr, nullptr, nullptr},
  {(char *)"static", &Dtool_BulletBodyNode_static_Getter, &Dtool_BulletBodyNode_static_Setter, (char *)
    "// Static and kinematic",
    nullptr},
  {(char *)"kinematic", &Dtool_BulletBodyNode_kinematic_Getter, &Dtool_BulletBodyNode_kinematic_Setter, nullptr, nullptr},
  {(char *)"collision_notification", &Dtool_BulletBodyNode_collision_notification_Getter, &Dtool_BulletBodyNode_collision_notification_Setter, nullptr, nullptr},
  {(char *)"collision_response", &Dtool_BulletBodyNode_collision_response_Getter, &Dtool_BulletBodyNode_collision_response_Setter, nullptr, nullptr},
  {(char *)"contact_response", &Dtool_BulletBodyNode_contact_response_Getter, nullptr, nullptr, nullptr},
  {(char *)"contact_processing_threshold", &Dtool_BulletBodyNode_contact_processing_threshold_Getter, &Dtool_BulletBodyNode_contact_processing_threshold_Setter, nullptr, nullptr},
  {(char *)"active", &Dtool_BulletBodyNode_active_Getter, &Dtool_BulletBodyNode_active_Setter, (char *)
    "// Deactivation",
    nullptr},
  {(char *)"deactivation_time", &Dtool_BulletBodyNode_deactivation_time_Getter, &Dtool_BulletBodyNode_deactivation_time_Setter, nullptr, nullptr},
  {(char *)"deactivation_enabled", &Dtool_BulletBodyNode_deactivation_enabled_Getter, &Dtool_BulletBodyNode_deactivation_enabled_Setter, nullptr, nullptr},
  {(char *)"debug_enabled", &Dtool_BulletBodyNode_debug_enabled_Getter, &Dtool_BulletBodyNode_debug_enabled_Setter, nullptr, nullptr},
  {(char *)"restitution", &Dtool_BulletBodyNode_restitution_Getter, &Dtool_BulletBodyNode_restitution_Setter, (char *)
    "// Friction and Restitution",
    nullptr},
  {(char *)"friction", &Dtool_BulletBodyNode_friction_Getter, &Dtool_BulletBodyNode_friction_Setter, nullptr, nullptr},
  {(char *)"anisotropic_friction", &Dtool_BulletBodyNode_anisotropic_friction_Getter, &Dtool_BulletBodyNode_anisotropic_friction_Setter, nullptr, nullptr},
  {(char *)"ccd_swept_sphere_radius", &Dtool_BulletBodyNode_ccd_swept_sphere_radius_Getter, &Dtool_BulletBodyNode_ccd_swept_sphere_radius_Setter, (char *)
    "// CCD",
    nullptr},
  {(char *)"ccd_motion_threshold", &Dtool_BulletBodyNode_ccd_motion_threshold_Getter, &Dtool_BulletBodyNode_ccd_motion_threshold_Setter, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletBodyNode = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletBodyNode = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletBodyNode = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletBodyNode = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletBodyNode = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletBodyNode = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletBodyNode",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletBodyNode,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletBodyNode,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletBodyNode,
    &Dtool_SequenceMethods_BulletBodyNode,
    &Dtool_MappingMethods_BulletBodyNode,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletBodyNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletBodyNode,
    nullptr, // tp_members
    Dtool_Properties_BulletBodyNode,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletBodyNode,
    PyType_GenericAlloc,
    Dtool_new_BulletBodyNode,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletBodyNode,
  Dtool_UpcastInterface_BulletBodyNode,
  Dtool_DowncastInterface_BulletBodyNode,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletBodyNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_PandaNode != nullptr);
    assert(Dtool_Ptr_PandaNode->_Dtool_ModuleClassInit != nullptr);
    Dtool_Ptr_PandaNode->_Dtool_ModuleClassInit(nullptr);
    Dtool_BulletBodyNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_PandaNode);
    Dtool_BulletBodyNode._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletBodyNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletBodyNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletBodyNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletBodyNode);
  }
}

/**
 * Python method tables for BulletBoxShape (BulletBoxShape)
 */
static PyMethodDef Dtool_Methods_BulletBoxShape[] = {
  {"get_half_extents_without_margin", &Dtool_BulletBoxShape_get_half_extents_without_margin_153, METH_NOARGS, (const char *)Dtool_BulletBoxShape_get_half_extents_without_margin_153_comment},
  {"getHalfExtentsWithoutMargin", &Dtool_BulletBoxShape_get_half_extents_without_margin_153, METH_NOARGS, (const char *)Dtool_BulletBoxShape_get_half_extents_without_margin_153_comment},
  {"get_half_extents_with_margin", &Dtool_BulletBoxShape_get_half_extents_with_margin_154, METH_NOARGS, (const char *)Dtool_BulletBoxShape_get_half_extents_with_margin_154_comment},
  {"getHalfExtentsWithMargin", &Dtool_BulletBoxShape_get_half_extents_with_margin_154, METH_NOARGS, (const char *)Dtool_BulletBoxShape_get_half_extents_with_margin_154_comment},
  {"make_from_solid", &Dtool_BulletBoxShape_make_from_solid_155, METH_O | METH_STATIC, (const char *)Dtool_BulletBoxShape_make_from_solid_155_comment},
  {"makeFromSolid", &Dtool_BulletBoxShape_make_from_solid_155, METH_O | METH_STATIC, (const char *)Dtool_BulletBoxShape_make_from_solid_155_comment},
  {"get_class_type", &Dtool_BulletBoxShape_get_class_type_158, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletBoxShape_get_class_type_158_comment},
  {"getClassType", &Dtool_BulletBoxShape_get_class_type_158, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletBoxShape_get_class_type_158_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletBoxShape[] = {
  {(char *)"half_extents_with_margin", &Dtool_BulletBoxShape_half_extents_with_margin_Getter, nullptr, nullptr, nullptr},
  {(char *)"half_extents_without_margin", &Dtool_BulletBoxShape_half_extents_without_margin_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletBoxShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletBoxShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletBoxShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletBoxShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletBoxShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletBoxShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletBoxShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletBoxShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletBoxShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletBoxShape,
    &Dtool_SequenceMethods_BulletBoxShape,
    &Dtool_MappingMethods_BulletBoxShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletBoxShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletBoxShape,
    nullptr, // tp_members
    Dtool_Properties_BulletBoxShape,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletBoxShape,
    PyType_GenericAlloc,
    Dtool_new_BulletBoxShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletBoxShape,
  Dtool_UpcastInterface_BulletBoxShape,
  Dtool_DowncastInterface_BulletBoxShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletBoxShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(nullptr);
    Dtool_BulletBoxShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    Dtool_BulletBoxShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletBoxShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletBoxShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletBoxShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletBoxShape);
  }
}

/**
 * Python method tables for BulletCapsuleShape (BulletCapsuleShape)
 */
static PyMethodDef Dtool_Methods_BulletCapsuleShape[] = {
  {"make_from_solid", &Dtool_BulletCapsuleShape_make_from_solid_161, METH_O | METH_STATIC, (const char *)Dtool_BulletCapsuleShape_make_from_solid_161_comment},
  {"makeFromSolid", &Dtool_BulletCapsuleShape_make_from_solid_161, METH_O | METH_STATIC, (const char *)Dtool_BulletCapsuleShape_make_from_solid_161_comment},
  {"get_radius", &Dtool_BulletCapsuleShape_get_radius_162, METH_NOARGS, (const char *)Dtool_BulletCapsuleShape_get_radius_162_comment},
  {"getRadius", &Dtool_BulletCapsuleShape_get_radius_162, METH_NOARGS, (const char *)Dtool_BulletCapsuleShape_get_radius_162_comment},
  {"get_half_height", &Dtool_BulletCapsuleShape_get_half_height_163, METH_NOARGS, (const char *)Dtool_BulletCapsuleShape_get_half_height_163_comment},
  {"getHalfHeight", &Dtool_BulletCapsuleShape_get_half_height_163, METH_NOARGS, (const char *)Dtool_BulletCapsuleShape_get_half_height_163_comment},
  {"get_class_type", &Dtool_BulletCapsuleShape_get_class_type_167, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletCapsuleShape_get_class_type_167_comment},
  {"getClassType", &Dtool_BulletCapsuleShape_get_class_type_167, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletCapsuleShape_get_class_type_167_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletCapsuleShape[] = {
  {(char *)"radius", &Dtool_BulletCapsuleShape_radius_Getter, nullptr, nullptr, nullptr},
  {(char *)"height", &Dtool_BulletCapsuleShape_height_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletCapsuleShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletCapsuleShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletCapsuleShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletCapsuleShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletCapsuleShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletCapsuleShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletCapsuleShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletCapsuleShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletCapsuleShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletCapsuleShape,
    &Dtool_SequenceMethods_BulletCapsuleShape,
    &Dtool_MappingMethods_BulletCapsuleShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletCapsuleShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletCapsuleShape,
    nullptr, // tp_members
    Dtool_Properties_BulletCapsuleShape,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletCapsuleShape,
    PyType_GenericAlloc,
    Dtool_new_BulletCapsuleShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletCapsuleShape,
  Dtool_UpcastInterface_BulletCapsuleShape,
  Dtool_DowncastInterface_BulletCapsuleShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletCapsuleShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(nullptr);
    Dtool_BulletCapsuleShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    Dtool_BulletCapsuleShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletCapsuleShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletCapsuleShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletCapsuleShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletCapsuleShape);
  }
}

/**
 * Python method tables for BulletCharacterControllerNode (BulletCharacterControllerNode)
 */
static PyMethodDef Dtool_Methods_BulletCharacterControllerNode[] = {
  {"set_linear_movement", (PyCFunction) &Dtool_BulletCharacterControllerNode_set_linear_movement_170, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletCharacterControllerNode_set_linear_movement_170_comment},
  {"setLinearMovement", (PyCFunction) &Dtool_BulletCharacterControllerNode_set_linear_movement_170, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletCharacterControllerNode_set_linear_movement_170_comment},
  {"set_angular_movement", &Dtool_BulletCharacterControllerNode_set_angular_movement_171, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_angular_movement_171_comment},
  {"setAngularMovement", &Dtool_BulletCharacterControllerNode_set_angular_movement_171, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_angular_movement_171_comment},
  {"get_shape", &Dtool_BulletCharacterControllerNode_get_shape_172, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_get_shape_172_comment},
  {"getShape", &Dtool_BulletCharacterControllerNode_get_shape_172, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_get_shape_172_comment},
  {"set_gravity", &Dtool_BulletCharacterControllerNode_set_gravity_173, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_gravity_173_comment},
  {"setGravity", &Dtool_BulletCharacterControllerNode_set_gravity_173, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_gravity_173_comment},
  {"get_gravity", &Dtool_BulletCharacterControllerNode_get_gravity_174, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_get_gravity_174_comment},
  {"getGravity", &Dtool_BulletCharacterControllerNode_get_gravity_174, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_get_gravity_174_comment},
  {"set_fall_speed", &Dtool_BulletCharacterControllerNode_set_fall_speed_175, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_fall_speed_175_comment},
  {"setFallSpeed", &Dtool_BulletCharacterControllerNode_set_fall_speed_175, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_fall_speed_175_comment},
  {"set_jump_speed", &Dtool_BulletCharacterControllerNode_set_jump_speed_176, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_jump_speed_176_comment},
  {"setJumpSpeed", &Dtool_BulletCharacterControllerNode_set_jump_speed_176, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_jump_speed_176_comment},
  {"set_max_jump_height", &Dtool_BulletCharacterControllerNode_set_max_jump_height_177, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_max_jump_height_177_comment},
  {"setMaxJumpHeight", &Dtool_BulletCharacterControllerNode_set_max_jump_height_177, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_max_jump_height_177_comment},
  {"set_max_slope", &Dtool_BulletCharacterControllerNode_set_max_slope_178, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_max_slope_178_comment},
  {"setMaxSlope", &Dtool_BulletCharacterControllerNode_set_max_slope_178, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_max_slope_178_comment},
  {"get_max_slope", &Dtool_BulletCharacterControllerNode_get_max_slope_179, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_get_max_slope_179_comment},
  {"getMaxSlope", &Dtool_BulletCharacterControllerNode_get_max_slope_179, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_get_max_slope_179_comment},
  {"set_use_ghost_sweep_test", &Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_180, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_180_comment},
  {"setUseGhostSweepTest", &Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_180, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_180_comment},
  {"is_on_ground", &Dtool_BulletCharacterControllerNode_is_on_ground_181, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_is_on_ground_181_comment},
  {"isOnGround", &Dtool_BulletCharacterControllerNode_is_on_ground_181, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_is_on_ground_181_comment},
  {"can_jump", &Dtool_BulletCharacterControllerNode_can_jump_182, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_can_jump_182_comment},
  {"canJump", &Dtool_BulletCharacterControllerNode_can_jump_182, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_can_jump_182_comment},
  {"do_jump", &Dtool_BulletCharacterControllerNode_do_jump_183, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_do_jump_183_comment},
  {"doJump", &Dtool_BulletCharacterControllerNode_do_jump_183, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_do_jump_183_comment},
  {"get_class_type", &Dtool_BulletCharacterControllerNode_get_class_type_188, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletCharacterControllerNode_get_class_type_188_comment},
  {"getClassType", &Dtool_BulletCharacterControllerNode_get_class_type_188, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletCharacterControllerNode_get_class_type_188_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletCharacterControllerNode[] = {
  {(char *)"shape", &Dtool_BulletCharacterControllerNode_shape_Getter, nullptr, nullptr, nullptr},
  {(char *)"gravity", &Dtool_BulletCharacterControllerNode_gravity_Getter, &Dtool_BulletCharacterControllerNode_gravity_Setter, nullptr, nullptr},
  {(char *)"max_slope", &Dtool_BulletCharacterControllerNode_max_slope_Getter, &Dtool_BulletCharacterControllerNode_max_slope_Setter, nullptr, nullptr},
  {(char *)"on_ground", &Dtool_BulletCharacterControllerNode_on_ground_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletCharacterControllerNode = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletCharacterControllerNode = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletCharacterControllerNode = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletCharacterControllerNode = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletCharacterControllerNode = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletCharacterControllerNode = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletCharacterControllerNode",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletCharacterControllerNode,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletCharacterControllerNode,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletCharacterControllerNode,
    &Dtool_SequenceMethods_BulletCharacterControllerNode,
    &Dtool_MappingMethods_BulletCharacterControllerNode,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletCharacterControllerNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletCharacterControllerNode,
    nullptr, // tp_members
    Dtool_Properties_BulletCharacterControllerNode,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletCharacterControllerNode,
    PyType_GenericAlloc,
    Dtool_new_BulletCharacterControllerNode,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletCharacterControllerNode,
  Dtool_UpcastInterface_BulletCharacterControllerNode,
  Dtool_DowncastInterface_BulletCharacterControllerNode,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletCharacterControllerNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletBaseCharacterControllerNode(nullptr);
    Dtool_BulletCharacterControllerNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletBaseCharacterControllerNode);
    Dtool_BulletCharacterControllerNode._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletCharacterControllerNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletCharacterControllerNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletCharacterControllerNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletCharacterControllerNode);
  }
}

/**
 * Python method tables for BulletClosestHitRayResult (BulletClosestHitRayResult)
 */
static PyMethodDef Dtool_Methods_BulletClosestHitRayResult[] = {
  {"empty", &Dtool_BulletClosestHitRayResult_empty_193, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletClosestHitRayResult_empty_193_comment},
  {"get_from_pos", &Dtool_BulletClosestHitRayResult_get_from_pos_194, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_from_pos_194_comment},
  {"getFromPos", &Dtool_BulletClosestHitRayResult_get_from_pos_194, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_from_pos_194_comment},
  {"get_to_pos", &Dtool_BulletClosestHitRayResult_get_to_pos_195, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_to_pos_195_comment},
  {"getToPos", &Dtool_BulletClosestHitRayResult_get_to_pos_195, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_to_pos_195_comment},
  {"has_hit", &Dtool_BulletClosestHitRayResult_has_hit_196, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_has_hit_196_comment},
  {"hasHit", &Dtool_BulletClosestHitRayResult_has_hit_196, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_has_hit_196_comment},
  {"get_node", &Dtool_BulletClosestHitRayResult_get_node_197, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_node_197_comment},
  {"getNode", &Dtool_BulletClosestHitRayResult_get_node_197, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_node_197_comment},
  {"get_hit_pos", &Dtool_BulletClosestHitRayResult_get_hit_pos_198, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_hit_pos_198_comment},
  {"getHitPos", &Dtool_BulletClosestHitRayResult_get_hit_pos_198, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_hit_pos_198_comment},
  {"get_hit_normal", &Dtool_BulletClosestHitRayResult_get_hit_normal_199, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_hit_normal_199_comment},
  {"getHitNormal", &Dtool_BulletClosestHitRayResult_get_hit_normal_199, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_hit_normal_199_comment},
  {"get_hit_fraction", &Dtool_BulletClosestHitRayResult_get_hit_fraction_200, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_hit_fraction_200_comment},
  {"getHitFraction", &Dtool_BulletClosestHitRayResult_get_hit_fraction_200, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_hit_fraction_200_comment},
  {"get_shape_part", &Dtool_BulletClosestHitRayResult_get_shape_part_201, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_shape_part_201_comment},
  {"getShapePart", &Dtool_BulletClosestHitRayResult_get_shape_part_201, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_shape_part_201_comment},
  {"get_triangle_index", &Dtool_BulletClosestHitRayResult_get_triangle_index_202, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_triangle_index_202_comment},
  {"getTriangleIndex", &Dtool_BulletClosestHitRayResult_get_triangle_index_202, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_triangle_index_202_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletClosestHitRayResult[] = {
  {(char *)"from_pos", &Dtool_BulletClosestHitRayResult_from_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"to_pos", &Dtool_BulletClosestHitRayResult_to_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"node", &Dtool_BulletClosestHitRayResult_node_Getter, nullptr, nullptr, nullptr},
  {(char *)"hit_pos", &Dtool_BulletClosestHitRayResult_hit_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"hit_normal", &Dtool_BulletClosestHitRayResult_hit_normal_Getter, nullptr, nullptr, nullptr},
  {(char *)"hit_fraction", &Dtool_BulletClosestHitRayResult_hit_fraction_Getter, nullptr, nullptr, nullptr},
  {(char *)"shape_part", &Dtool_BulletClosestHitRayResult_shape_part_Getter, nullptr, nullptr, nullptr},
  {(char *)"triangle_index", &Dtool_BulletClosestHitRayResult_triangle_index_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletClosestHitRayResult = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletClosestHitRayResult = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletClosestHitRayResult = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletClosestHitRayResult = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletClosestHitRayResult = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletClosestHitRayResult = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletClosestHitRayResult",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletClosestHitRayResult,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletClosestHitRayResult,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletClosestHitRayResult,
    &Dtool_SequenceMethods_BulletClosestHitRayResult,
    &Dtool_MappingMethods_BulletClosestHitRayResult,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletClosestHitRayResult,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletClosestHitRayResult,
    nullptr, // tp_members
    Dtool_Properties_BulletClosestHitRayResult,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletClosestHitRayResult,
    PyType_GenericAlloc,
    Dtool_new_BulletClosestHitRayResult,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletClosestHitRayResult,
  Dtool_UpcastInterface_BulletClosestHitRayResult,
  Dtool_DowncastInterface_BulletClosestHitRayResult,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletClosestHitRayResult(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletClosestHitRayResult._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletClosestHitRayResult._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletClosestHitRayResult) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletClosestHitRayResult)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletClosestHitRayResult);
  }
}

/**
 * Python method tables for BulletClosestHitSweepResult (BulletClosestHitSweepResult)
 */
static PyMethodDef Dtool_Methods_BulletClosestHitSweepResult[] = {
  {"empty", &Dtool_BulletClosestHitSweepResult_empty_217, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletClosestHitSweepResult_empty_217_comment},
  {"get_from_pos", &Dtool_BulletClosestHitSweepResult_get_from_pos_218, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_from_pos_218_comment},
  {"getFromPos", &Dtool_BulletClosestHitSweepResult_get_from_pos_218, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_from_pos_218_comment},
  {"get_to_pos", &Dtool_BulletClosestHitSweepResult_get_to_pos_219, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_to_pos_219_comment},
  {"getToPos", &Dtool_BulletClosestHitSweepResult_get_to_pos_219, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_to_pos_219_comment},
  {"has_hit", &Dtool_BulletClosestHitSweepResult_has_hit_220, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_has_hit_220_comment},
  {"hasHit", &Dtool_BulletClosestHitSweepResult_has_hit_220, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_has_hit_220_comment},
  {"get_node", &Dtool_BulletClosestHitSweepResult_get_node_221, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_node_221_comment},
  {"getNode", &Dtool_BulletClosestHitSweepResult_get_node_221, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_node_221_comment},
  {"get_hit_pos", &Dtool_BulletClosestHitSweepResult_get_hit_pos_222, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_hit_pos_222_comment},
  {"getHitPos", &Dtool_BulletClosestHitSweepResult_get_hit_pos_222, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_hit_pos_222_comment},
  {"get_hit_normal", &Dtool_BulletClosestHitSweepResult_get_hit_normal_223, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_hit_normal_223_comment},
  {"getHitNormal", &Dtool_BulletClosestHitSweepResult_get_hit_normal_223, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_hit_normal_223_comment},
  {"get_hit_fraction", &Dtool_BulletClosestHitSweepResult_get_hit_fraction_224, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_hit_fraction_224_comment},
  {"getHitFraction", &Dtool_BulletClosestHitSweepResult_get_hit_fraction_224, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_hit_fraction_224_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletClosestHitSweepResult[] = {
  {(char *)"from_pos", &Dtool_BulletClosestHitSweepResult_from_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"to_pos", &Dtool_BulletClosestHitSweepResult_to_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"node", &Dtool_BulletClosestHitSweepResult_node_Getter, nullptr, nullptr, nullptr},
  {(char *)"hit_pos", &Dtool_BulletClosestHitSweepResult_hit_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"hit_normal", &Dtool_BulletClosestHitSweepResult_hit_normal_Getter, nullptr, nullptr, nullptr},
  {(char *)"hit_fraction", &Dtool_BulletClosestHitSweepResult_hit_fraction_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletClosestHitSweepResult = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletClosestHitSweepResult = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletClosestHitSweepResult = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletClosestHitSweepResult = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletClosestHitSweepResult = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletClosestHitSweepResult = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletClosestHitSweepResult",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletClosestHitSweepResult,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletClosestHitSweepResult,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletClosestHitSweepResult,
    &Dtool_SequenceMethods_BulletClosestHitSweepResult,
    &Dtool_MappingMethods_BulletClosestHitSweepResult,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletClosestHitSweepResult,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletClosestHitSweepResult,
    nullptr, // tp_members
    Dtool_Properties_BulletClosestHitSweepResult,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletClosestHitSweepResult,
    PyType_GenericAlloc,
    Dtool_new_BulletClosestHitSweepResult,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletClosestHitSweepResult,
  Dtool_UpcastInterface_BulletClosestHitSweepResult,
  Dtool_DowncastInterface_BulletClosestHitSweepResult,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletClosestHitSweepResult(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletClosestHitSweepResult._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletClosestHitSweepResult._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletClosestHitSweepResult) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletClosestHitSweepResult)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletClosestHitSweepResult);
  }
}

/**
 * Python method tables for BulletConeShape (BulletConeShape)
 */
static PyMethodDef Dtool_Methods_BulletConeShape[] = {
  {"get_radius", &Dtool_BulletConeShape_get_radius_235, METH_NOARGS, (const char *)Dtool_BulletConeShape_get_radius_235_comment},
  {"getRadius", &Dtool_BulletConeShape_get_radius_235, METH_NOARGS, (const char *)Dtool_BulletConeShape_get_radius_235_comment},
  {"get_height", &Dtool_BulletConeShape_get_height_236, METH_NOARGS, (const char *)Dtool_BulletConeShape_get_height_236_comment},
  {"getHeight", &Dtool_BulletConeShape_get_height_236, METH_NOARGS, (const char *)Dtool_BulletConeShape_get_height_236_comment},
  {"get_class_type", &Dtool_BulletConeShape_get_class_type_239, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConeShape_get_class_type_239_comment},
  {"getClassType", &Dtool_BulletConeShape_get_class_type_239, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConeShape_get_class_type_239_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletConeShape[] = {
  {(char *)"radius", &Dtool_BulletConeShape_radius_Getter, nullptr, nullptr, nullptr},
  {(char *)"height", &Dtool_BulletConeShape_height_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletConeShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletConeShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletConeShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletConeShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletConeShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletConeShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletConeShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletConeShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletConeShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletConeShape,
    &Dtool_SequenceMethods_BulletConeShape,
    &Dtool_MappingMethods_BulletConeShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletConeShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletConeShape,
    nullptr, // tp_members
    Dtool_Properties_BulletConeShape,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletConeShape,
    PyType_GenericAlloc,
    Dtool_new_BulletConeShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletConeShape,
  Dtool_UpcastInterface_BulletConeShape,
  Dtool_DowncastInterface_BulletConeShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletConeShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(nullptr);
    Dtool_BulletConeShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    Dtool_BulletConeShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletConeShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletConeShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletConeShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletConeShape);
  }
}

/**
 * Python method tables for BulletConstraint (BulletConstraint)
 */
static PyMethodDef Dtool_Methods_BulletConstraint[] = {
  {"get_rigid_body_a", &Dtool_BulletConstraint_get_rigid_body_a_242, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_rigid_body_a_242_comment},
  {"getRigidBodyA", &Dtool_BulletConstraint_get_rigid_body_a_242, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_rigid_body_a_242_comment},
  {"get_rigid_body_b", &Dtool_BulletConstraint_get_rigid_body_b_243, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_rigid_body_b_243_comment},
  {"getRigidBodyB", &Dtool_BulletConstraint_get_rigid_body_b_243, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_rigid_body_b_243_comment},
  {"enable_feedback", &Dtool_BulletConstraint_enable_feedback_244, METH_O, (const char *)Dtool_BulletConstraint_enable_feedback_244_comment},
  {"enableFeedback", &Dtool_BulletConstraint_enable_feedback_244, METH_O, (const char *)Dtool_BulletConstraint_enable_feedback_244_comment},
  {"set_debug_draw_size", &Dtool_BulletConstraint_set_debug_draw_size_245, METH_O, (const char *)Dtool_BulletConstraint_set_debug_draw_size_245_comment},
  {"setDebugDrawSize", &Dtool_BulletConstraint_set_debug_draw_size_245, METH_O, (const char *)Dtool_BulletConstraint_set_debug_draw_size_245_comment},
  {"get_debug_draw_size", &Dtool_BulletConstraint_get_debug_draw_size_246, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_debug_draw_size_246_comment},
  {"getDebugDrawSize", &Dtool_BulletConstraint_get_debug_draw_size_246, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_debug_draw_size_246_comment},
  {"get_applied_impulse", &Dtool_BulletConstraint_get_applied_impulse_247, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_applied_impulse_247_comment},
  {"getAppliedImpulse", &Dtool_BulletConstraint_get_applied_impulse_247, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_applied_impulse_247_comment},
  {"set_breaking_threshold", &Dtool_BulletConstraint_set_breaking_threshold_248, METH_O, (const char *)Dtool_BulletConstraint_set_breaking_threshold_248_comment},
  {"setBreakingThreshold", &Dtool_BulletConstraint_set_breaking_threshold_248, METH_O, (const char *)Dtool_BulletConstraint_set_breaking_threshold_248_comment},
  {"get_breaking_threshold", &Dtool_BulletConstraint_get_breaking_threshold_249, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_breaking_threshold_249_comment},
  {"getBreakingThreshold", &Dtool_BulletConstraint_get_breaking_threshold_249, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_breaking_threshold_249_comment},
  {"set_enabled", &Dtool_BulletConstraint_set_enabled_250, METH_O, (const char *)Dtool_BulletConstraint_set_enabled_250_comment},
  {"setEnabled", &Dtool_BulletConstraint_set_enabled_250, METH_O, (const char *)Dtool_BulletConstraint_set_enabled_250_comment},
  {"is_enabled", &Dtool_BulletConstraint_is_enabled_251, METH_NOARGS, (const char *)Dtool_BulletConstraint_is_enabled_251_comment},
  {"isEnabled", &Dtool_BulletConstraint_is_enabled_251, METH_NOARGS, (const char *)Dtool_BulletConstraint_is_enabled_251_comment},
  {"set_param", (PyCFunction) &Dtool_BulletConstraint_set_param_253, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConstraint_set_param_253_comment},
  {"setParam", (PyCFunction) &Dtool_BulletConstraint_set_param_253, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConstraint_set_param_253_comment},
  {"get_param", (PyCFunction) &Dtool_BulletConstraint_get_param_254, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConstraint_get_param_254_comment},
  {"getParam", (PyCFunction) &Dtool_BulletConstraint_get_param_254, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConstraint_get_param_254_comment},
  {"get_class_type", &Dtool_BulletConstraint_get_class_type_318, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConstraint_get_class_type_318_comment},
  {"getClassType", &Dtool_BulletConstraint_get_class_type_318, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConstraint_get_class_type_318_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletConstraint[] = {
  {(char *)"rigid_body_a", &Dtool_BulletConstraint_rigid_body_a_Getter, nullptr, nullptr, nullptr},
  {(char *)"rigid_body_b", &Dtool_BulletConstraint_rigid_body_b_Getter, nullptr, nullptr, nullptr},
  {(char *)"debug_draw_size", &Dtool_BulletConstraint_debug_draw_size_Getter, &Dtool_BulletConstraint_debug_draw_size_Setter, nullptr, nullptr},
  {(char *)"applied_impulse", &Dtool_BulletConstraint_applied_impulse_Getter, nullptr, nullptr, nullptr},
  {(char *)"breaking_threshold", &Dtool_BulletConstraint_breaking_threshold_Getter, &Dtool_BulletConstraint_breaking_threshold_Setter, nullptr, nullptr},
  {(char *)"enabled", &Dtool_BulletConstraint_enabled_Getter, &Dtool_BulletConstraint_enabled_Setter, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletConstraint = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletConstraint = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletConstraint = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletConstraint = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletConstraint = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletConstraint = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletConstraint",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletConstraint,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletConstraint,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletConstraint,
    &Dtool_SequenceMethods_BulletConstraint,
    &Dtool_MappingMethods_BulletConstraint,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletConstraint,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletConstraint,
    nullptr, // tp_members
    Dtool_Properties_BulletConstraint,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletConstraint,
    PyType_GenericAlloc,
    Dtool_new_BulletConstraint,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletConstraint,
  Dtool_UpcastInterface_BulletConstraint,
  Dtool_DowncastInterface_BulletConstraint,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletConstraint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_TypedReferenceCount != nullptr);
    assert(Dtool_Ptr_TypedReferenceCount->_Dtool_ModuleClassInit != nullptr);
    Dtool_Ptr_TypedReferenceCount->_Dtool_ModuleClassInit(nullptr);
    Dtool_BulletConstraint._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_TypedReferenceCount);
    Dtool_BulletConstraint._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = _PyDict_NewPresized(9);
    Dtool_BulletConstraint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    // enum BulletConstraint::ConstraintParam;
    PyDict_SetItemString(dict, "CP_erp", Dtool_WrapValue(BulletConstraint::CP_erp));
    PyDict_SetItemString(dict, "CPErp", Dtool_WrapValue(BulletConstraint::CP_erp));
    PyDict_SetItemString(dict, "CP_stop_erp", Dtool_WrapValue(BulletConstraint::CP_stop_erp));
    PyDict_SetItemString(dict, "CPStopErp", Dtool_WrapValue(BulletConstraint::CP_stop_erp));
    PyDict_SetItemString(dict, "CP_cfm", Dtool_WrapValue(BulletConstraint::CP_cfm));
    PyDict_SetItemString(dict, "CPCfm", Dtool_WrapValue(BulletConstraint::CP_cfm));
    PyDict_SetItemString(dict, "CP_stop_cfm", Dtool_WrapValue(BulletConstraint::CP_stop_cfm));
    PyDict_SetItemString(dict, "CPStopCfm", Dtool_WrapValue(BulletConstraint::CP_stop_cfm));
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletConstraint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletConstraint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletConstraint);
  }
}

/**
 * Python method tables for BulletRigidBodyNode (BulletRigidBodyNode)
 */
static PyMethodDef Dtool_Methods_BulletRigidBodyNode[] = {
  {"set_mass", &Dtool_BulletRigidBodyNode_set_mass_259, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_mass_259_comment},
  {"setMass", &Dtool_BulletRigidBodyNode_set_mass_259, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_mass_259_comment},
  {"get_mass", &Dtool_BulletRigidBodyNode_get_mass_260, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_mass_260_comment},
  {"getMass", &Dtool_BulletRigidBodyNode_get_mass_260, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_mass_260_comment},
  {"get_inv_mass", &Dtool_BulletRigidBodyNode_get_inv_mass_261, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inv_mass_261_comment},
  {"getInvMass", &Dtool_BulletRigidBodyNode_get_inv_mass_261, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inv_mass_261_comment},
  {"set_inertia", &Dtool_BulletRigidBodyNode_set_inertia_262, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_inertia_262_comment},
  {"setInertia", &Dtool_BulletRigidBodyNode_set_inertia_262, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_inertia_262_comment},
  {"get_inertia", &Dtool_BulletRigidBodyNode_get_inertia_263, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inertia_263_comment},
  {"getInertia", &Dtool_BulletRigidBodyNode_get_inertia_263, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inertia_263_comment},
  {"get_inv_inertia_diag_local", &Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_264, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_264_comment},
  {"getInvInertiaDiagLocal", &Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_264, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_264_comment},
  {"get_inv_inertia_tensor_world", &Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_265, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_265_comment},
  {"getInvInertiaTensorWorld", &Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_265, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_265_comment},
  {"get_linear_velocity", &Dtool_BulletRigidBodyNode_get_linear_velocity_266, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_velocity_266_comment},
  {"getLinearVelocity", &Dtool_BulletRigidBodyNode_get_linear_velocity_266, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_velocity_266_comment},
  {"get_angular_velocity", &Dtool_BulletRigidBodyNode_get_angular_velocity_267, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_velocity_267_comment},
  {"getAngularVelocity", &Dtool_BulletRigidBodyNode_get_angular_velocity_267, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_velocity_267_comment},
  {"set_linear_velocity", &Dtool_BulletRigidBodyNode_set_linear_velocity_268, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_velocity_268_comment},
  {"setLinearVelocity", &Dtool_BulletRigidBodyNode_set_linear_velocity_268, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_velocity_268_comment},
  {"set_angular_velocity", &Dtool_BulletRigidBodyNode_set_angular_velocity_269, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_velocity_269_comment},
  {"setAngularVelocity", &Dtool_BulletRigidBodyNode_set_angular_velocity_269, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_velocity_269_comment},
  {"get_linear_damping", &Dtool_BulletRigidBodyNode_get_linear_damping_270, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_damping_270_comment},
  {"getLinearDamping", &Dtool_BulletRigidBodyNode_get_linear_damping_270, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_damping_270_comment},
  {"get_angular_damping", &Dtool_BulletRigidBodyNode_get_angular_damping_271, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_damping_271_comment},
  {"getAngularDamping", &Dtool_BulletRigidBodyNode_get_angular_damping_271, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_damping_271_comment},
  {"set_linear_damping", &Dtool_BulletRigidBodyNode_set_linear_damping_272, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_damping_272_comment},
  {"setLinearDamping", &Dtool_BulletRigidBodyNode_set_linear_damping_272, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_damping_272_comment},
  {"set_angular_damping", &Dtool_BulletRigidBodyNode_set_angular_damping_273, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_damping_273_comment},
  {"setAngularDamping", &Dtool_BulletRigidBodyNode_set_angular_damping_273, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_damping_273_comment},
  {"clear_forces", &Dtool_BulletRigidBodyNode_clear_forces_274, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_clear_forces_274_comment},
  {"clearForces", &Dtool_BulletRigidBodyNode_clear_forces_274, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_clear_forces_274_comment},
  {"apply_force", (PyCFunction) &Dtool_BulletRigidBodyNode_apply_force_275, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletRigidBodyNode_apply_force_275_comment},
  {"applyForce", (PyCFunction) &Dtool_BulletRigidBodyNode_apply_force_275, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletRigidBodyNode_apply_force_275_comment},
  {"apply_central_force", &Dtool_BulletRigidBodyNode_apply_central_force_276, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_central_force_276_comment},
  {"applyCentralForce", &Dtool_BulletRigidBodyNode_apply_central_force_276, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_central_force_276_comment},
  {"apply_impulse", (PyCFunction) &Dtool_BulletRigidBodyNode_apply_impulse_277, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletRigidBodyNode_apply_impulse_277_comment},
  {"applyImpulse", (PyCFunction) &Dtool_BulletRigidBodyNode_apply_impulse_277, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletRigidBodyNode_apply_impulse_277_comment},
  {"apply_central_impulse", &Dtool_BulletRigidBodyNode_apply_central_impulse_278, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_central_impulse_278_comment},
  {"applyCentralImpulse", &Dtool_BulletRigidBodyNode_apply_central_impulse_278, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_central_impulse_278_comment},
  {"apply_torque", &Dtool_BulletRigidBodyNode_apply_torque_279, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_torque_279_comment},
  {"applyTorque", &Dtool_BulletRigidBodyNode_apply_torque_279, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_torque_279_comment},
  {"apply_torque_impulse", &Dtool_BulletRigidBodyNode_apply_torque_impulse_280, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_torque_impulse_280_comment},
  {"applyTorqueImpulse", &Dtool_BulletRigidBodyNode_apply_torque_impulse_280, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_torque_impulse_280_comment},
  {"get_total_force", &Dtool_BulletRigidBodyNode_get_total_force_281, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_total_force_281_comment},
  {"getTotalForce", &Dtool_BulletRigidBodyNode_get_total_force_281, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_total_force_281_comment},
  {"get_total_torque", &Dtool_BulletRigidBodyNode_get_total_torque_282, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_total_torque_282_comment},
  {"getTotalTorque", &Dtool_BulletRigidBodyNode_get_total_torque_282, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_total_torque_282_comment},
  {"get_linear_sleep_threshold", &Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_283, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_283_comment},
  {"getLinearSleepThreshold", &Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_283, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_283_comment},
  {"get_angular_sleep_threshold", &Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_284, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_284_comment},
  {"getAngularSleepThreshold", &Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_284, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_284_comment},
  {"set_linear_sleep_threshold", &Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_285, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_285_comment},
  {"setLinearSleepThreshold", &Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_285, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_285_comment},
  {"set_angular_sleep_threshold", &Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_286, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_286_comment},
  {"setAngularSleepThreshold", &Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_286, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_286_comment},
  {"set_gravity", &Dtool_BulletRigidBodyNode_set_gravity_287, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_gravity_287_comment},
  {"setGravity", &Dtool_BulletRigidBodyNode_set_gravity_287, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_gravity_287_comment},
  {"get_gravity", &Dtool_BulletRigidBodyNode_get_gravity_288, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_gravity_288_comment},
  {"getGravity", &Dtool_BulletRigidBodyNode_get_gravity_288, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_gravity_288_comment},
  {"get_linear_factor", &Dtool_BulletRigidBodyNode_get_linear_factor_289, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_factor_289_comment},
  {"getLinearFactor", &Dtool_BulletRigidBodyNode_get_linear_factor_289, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_factor_289_comment},
  {"get_angular_factor", &Dtool_BulletRigidBodyNode_get_angular_factor_290, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_factor_290_comment},
  {"getAngularFactor", &Dtool_BulletRigidBodyNode_get_angular_factor_290, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_factor_290_comment},
  {"set_linear_factor", &Dtool_BulletRigidBodyNode_set_linear_factor_291, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_factor_291_comment},
  {"setLinearFactor", &Dtool_BulletRigidBodyNode_set_linear_factor_291, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_factor_291_comment},
  {"set_angular_factor", &Dtool_BulletRigidBodyNode_set_angular_factor_292, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_factor_292_comment},
  {"setAngularFactor", &Dtool_BulletRigidBodyNode_set_angular_factor_292, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_factor_292_comment},
  {"pick_dirty_flag", &Dtool_BulletRigidBodyNode_pick_dirty_flag_293, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_pick_dirty_flag_293_comment},
  {"pickDirtyFlag", &Dtool_BulletRigidBodyNode_pick_dirty_flag_293, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_pick_dirty_flag_293_comment},
  {"get_class_type", &Dtool_BulletRigidBodyNode_get_class_type_312, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletRigidBodyNode_get_class_type_312_comment},
  {"getClassType", &Dtool_BulletRigidBodyNode_get_class_type_312, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletRigidBodyNode_get_class_type_312_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletRigidBodyNode[] = {
  {(char *)"mass", &Dtool_BulletRigidBodyNode_mass_Getter, &Dtool_BulletRigidBodyNode_mass_Setter, nullptr, nullptr},
  {(char *)"inv_mass", &Dtool_BulletRigidBodyNode_inv_mass_Getter, nullptr, nullptr, nullptr},
  {(char *)"inertia", &Dtool_BulletRigidBodyNode_inertia_Getter, &Dtool_BulletRigidBodyNode_inertia_Setter, nullptr, nullptr},
  {(char *)"inv_inertia_diag_local", &Dtool_BulletRigidBodyNode_inv_inertia_diag_local_Getter, nullptr, nullptr, nullptr},
  {(char *)"inv_inertia_tensor_world", &Dtool_BulletRigidBodyNode_inv_inertia_tensor_world_Getter, nullptr, nullptr, nullptr},
  {(char *)"linear_velocity", &Dtool_BulletRigidBodyNode_linear_velocity_Getter, &Dtool_BulletRigidBodyNode_linear_velocity_Setter, (char *)
    "// Velocity",
    nullptr},
  {(char *)"angular_velocity", &Dtool_BulletRigidBodyNode_angular_velocity_Getter, &Dtool_BulletRigidBodyNode_angular_velocity_Setter, nullptr, nullptr},
  {(char *)"linear_damping", &Dtool_BulletRigidBodyNode_linear_damping_Getter, &Dtool_BulletRigidBodyNode_linear_damping_Setter, (char *)
    "// Damping",
    nullptr},
  {(char *)"angular_damping", &Dtool_BulletRigidBodyNode_angular_damping_Getter, &Dtool_BulletRigidBodyNode_angular_damping_Setter, nullptr, nullptr},
  {(char *)"total_force", &Dtool_BulletRigidBodyNode_total_force_Getter, nullptr, nullptr, nullptr},
  {(char *)"total_torque", &Dtool_BulletRigidBodyNode_total_torque_Getter, nullptr, nullptr, nullptr},
  {(char *)"linear_sleep_threshold", &Dtool_BulletRigidBodyNode_linear_sleep_threshold_Getter, &Dtool_BulletRigidBodyNode_linear_sleep_threshold_Setter, (char *)
    "// Deactivation thresholds",
    nullptr},
  {(char *)"angular_sleep_threshold", &Dtool_BulletRigidBodyNode_angular_sleep_threshold_Getter, &Dtool_BulletRigidBodyNode_angular_sleep_threshold_Setter, nullptr, nullptr},
  {(char *)"gravity", &Dtool_BulletRigidBodyNode_gravity_Getter, &Dtool_BulletRigidBodyNode_gravity_Setter, nullptr, nullptr},
  {(char *)"linear_factor", &Dtool_BulletRigidBodyNode_linear_factor_Getter, &Dtool_BulletRigidBodyNode_linear_factor_Setter, (char *)
    "// Restrict movement",
    nullptr},
  {(char *)"angular_factor", &Dtool_BulletRigidBodyNode_angular_factor_Getter, &Dtool_BulletRigidBodyNode_angular_factor_Setter, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletRigidBodyNode = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletRigidBodyNode = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletRigidBodyNode = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletRigidBodyNode = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletRigidBodyNode = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletRigidBodyNode = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletRigidBodyNode",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletRigidBodyNode,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletRigidBodyNode,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletRigidBodyNode,
    &Dtool_SequenceMethods_BulletRigidBodyNode,
    &Dtool_MappingMethods_BulletRigidBodyNode,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletRigidBodyNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletRigidBodyNode,
    nullptr, // tp_members
    Dtool_Properties_BulletRigidBodyNode,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletRigidBodyNode,
    PyType_GenericAlloc,
    Dtool_new_BulletRigidBodyNode,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletRigidBodyNode,
  Dtool_UpcastInterface_BulletRigidBodyNode,
  Dtool_DowncastInterface_BulletRigidBodyNode,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletRigidBodyNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletBodyNode(nullptr);
    Dtool_BulletRigidBodyNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletBodyNode);
    Dtool_BulletRigidBodyNode._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletRigidBodyNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletRigidBodyNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletRigidBodyNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletRigidBodyNode);
  }
}

/**
 * Python method tables for BulletConeTwistConstraint (BulletConeTwistConstraint)
 */
static PyMethodDef Dtool_Methods_BulletConeTwistConstraint[] = {
  {"set_limit", (PyCFunction) &Dtool_BulletConeTwistConstraint_set_limit_321, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConeTwistConstraint_set_limit_321_comment},
  {"setLimit", (PyCFunction) &Dtool_BulletConeTwistConstraint_set_limit_321, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConeTwistConstraint_set_limit_321_comment},
  {"set_damping", &Dtool_BulletConeTwistConstraint_set_damping_322, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_damping_322_comment},
  {"setDamping", &Dtool_BulletConeTwistConstraint_set_damping_322, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_damping_322_comment},
  {"get_fix_threshold", &Dtool_BulletConeTwistConstraint_get_fix_threshold_323, METH_NOARGS, (const char *)Dtool_BulletConeTwistConstraint_get_fix_threshold_323_comment},
  {"getFixThreshold", &Dtool_BulletConeTwistConstraint_get_fix_threshold_323, METH_NOARGS, (const char *)Dtool_BulletConeTwistConstraint_get_fix_threshold_323_comment},
  {"set_fix_threshold", &Dtool_BulletConeTwistConstraint_set_fix_threshold_324, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_fix_threshold_324_comment},
  {"setFixThreshold", &Dtool_BulletConeTwistConstraint_set_fix_threshold_324, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_fix_threshold_324_comment},
  {"enable_motor", &Dtool_BulletConeTwistConstraint_enable_motor_325, METH_O, (const char *)Dtool_BulletConeTwistConstraint_enable_motor_325_comment},
  {"enableMotor", &Dtool_BulletConeTwistConstraint_enable_motor_325, METH_O, (const char *)Dtool_BulletConeTwistConstraint_enable_motor_325_comment},
  {"set_max_motor_impulse", &Dtool_BulletConeTwistConstraint_set_max_motor_impulse_326, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_max_motor_impulse_326_comment},
  {"setMaxMotorImpulse", &Dtool_BulletConeTwistConstraint_set_max_motor_impulse_326, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_max_motor_impulse_326_comment},
  {"set_max_motor_impulse_normalized", &Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_327, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_327_comment},
  {"setMaxMotorImpulseNormalized", &Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_327, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_327_comment},
  {"set_motor_target", &Dtool_BulletConeTwistConstraint_set_motor_target_328, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_motor_target_328_comment},
  {"setMotorTarget", &Dtool_BulletConeTwistConstraint_set_motor_target_328, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_motor_target_328_comment},
  {"set_motor_target_in_constraint_space", &Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_329, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_329_comment},
  {"setMotorTargetInConstraintSpace", &Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_329, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_329_comment},
  {"set_frames", (PyCFunction) &Dtool_BulletConeTwistConstraint_set_frames_330, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConeTwistConstraint_set_frames_330_comment},
  {"setFrames", (PyCFunction) &Dtool_BulletConeTwistConstraint_set_frames_330, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConeTwistConstraint_set_frames_330_comment},
  {"get_frame_a", &Dtool_BulletConeTwistConstraint_get_frame_a_331, METH_NOARGS, (const char *)Dtool_BulletConeTwistConstraint_get_frame_a_331_comment},
  {"getFrameA", &Dtool_BulletConeTwistConstraint_get_frame_a_331, METH_NOARGS, (const char *)Dtool_BulletConeTwistConstraint_get_frame_a_331_comment},
  {"get_frame_b", &Dtool_BulletConeTwistConstraint_get_frame_b_332, METH_NOARGS, (const char *)Dtool_BulletConeTwistConstraint_get_frame_b_332_comment},
  {"getFrameB", &Dtool_BulletConeTwistConstraint_get_frame_b_332, METH_NOARGS, (const char *)Dtool_BulletConeTwistConstraint_get_frame_b_332_comment},
  {"get_class_type", &Dtool_BulletConeTwistConstraint_get_class_type_336, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConeTwistConstraint_get_class_type_336_comment},
  {"getClassType", &Dtool_BulletConeTwistConstraint_get_class_type_336, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConeTwistConstraint_get_class_type_336_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletConeTwistConstraint[] = {
  {(char *)"fix_threshold", &Dtool_BulletConeTwistConstraint_fix_threshold_Getter, &Dtool_BulletConeTwistConstraint_fix_threshold_Setter, nullptr, nullptr},
  {(char *)"frame_a", &Dtool_BulletConeTwistConstraint_frame_a_Getter, nullptr, nullptr, nullptr},
  {(char *)"frame_b", &Dtool_BulletConeTwistConstraint_frame_b_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletConeTwistConstraint = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletConeTwistConstraint = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletConeTwistConstraint = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletConeTwistConstraint = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletConeTwistConstraint = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletConeTwistConstraint = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletConeTwistConstraint",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletConeTwistConstraint,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletConeTwistConstraint,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletConeTwistConstraint,
    &Dtool_SequenceMethods_BulletConeTwistConstraint,
    &Dtool_MappingMethods_BulletConeTwistConstraint,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletConeTwistConstraint,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletConeTwistConstraint,
    nullptr, // tp_members
    Dtool_Properties_BulletConeTwistConstraint,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletConeTwistConstraint,
    PyType_GenericAlloc,
    Dtool_new_BulletConeTwistConstraint,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletConeTwistConstraint,
  Dtool_UpcastInterface_BulletConeTwistConstraint,
  Dtool_DowncastInterface_BulletConeTwistConstraint,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletConeTwistConstraint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletConstraint(nullptr);
    Dtool_BulletConeTwistConstraint._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletConstraint);
    Dtool_BulletConeTwistConstraint._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletConeTwistConstraint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletConeTwistConstraint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletConeTwistConstraint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletConeTwistConstraint);
  }
}

/**
 * Python method tables for BulletManifoldPoint (BulletManifoldPoint)
 */
static PyMethodDef Dtool_Methods_BulletManifoldPoint[] = {
  {"get_life_time", &Dtool_BulletManifoldPoint_get_life_time_339, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_life_time_339_comment},
  {"getLifeTime", &Dtool_BulletManifoldPoint_get_life_time_339, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_life_time_339_comment},
  {"get_distance", &Dtool_BulletManifoldPoint_get_distance_340, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_distance_340_comment},
  {"getDistance", &Dtool_BulletManifoldPoint_get_distance_340, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_distance_340_comment},
  {"get_applied_impulse", &Dtool_BulletManifoldPoint_get_applied_impulse_341, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_applied_impulse_341_comment},
  {"getAppliedImpulse", &Dtool_BulletManifoldPoint_get_applied_impulse_341, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_applied_impulse_341_comment},
  {"get_position_world_on_a", &Dtool_BulletManifoldPoint_get_position_world_on_a_342, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_position_world_on_a_342_comment},
  {"getPositionWorldOnA", &Dtool_BulletManifoldPoint_get_position_world_on_a_342, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_position_world_on_a_342_comment},
  {"get_position_world_on_b", &Dtool_BulletManifoldPoint_get_position_world_on_b_343, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_position_world_on_b_343_comment},
  {"getPositionWorldOnB", &Dtool_BulletManifoldPoint_get_position_world_on_b_343, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_position_world_on_b_343_comment},
  {"get_normal_world_on_b", &Dtool_BulletManifoldPoint_get_normal_world_on_b_344, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_normal_world_on_b_344_comment},
  {"getNormalWorldOnB", &Dtool_BulletManifoldPoint_get_normal_world_on_b_344, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_normal_world_on_b_344_comment},
  {"get_local_point_a", &Dtool_BulletManifoldPoint_get_local_point_a_345, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_local_point_a_345_comment},
  {"getLocalPointA", &Dtool_BulletManifoldPoint_get_local_point_a_345, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_local_point_a_345_comment},
  {"get_local_point_b", &Dtool_BulletManifoldPoint_get_local_point_b_346, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_local_point_b_346_comment},
  {"getLocalPointB", &Dtool_BulletManifoldPoint_get_local_point_b_346, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_local_point_b_346_comment},
  {"get_part_id0", &Dtool_BulletManifoldPoint_get_part_id0_347, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_part_id0_347_comment},
  {"getPartId0", &Dtool_BulletManifoldPoint_get_part_id0_347, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_part_id0_347_comment},
  {"get_part_id1", &Dtool_BulletManifoldPoint_get_part_id1_348, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_part_id1_348_comment},
  {"getPartId1", &Dtool_BulletManifoldPoint_get_part_id1_348, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_part_id1_348_comment},
  {"get_index0", &Dtool_BulletManifoldPoint_get_index0_349, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_index0_349_comment},
  {"getIndex0", &Dtool_BulletManifoldPoint_get_index0_349, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_index0_349_comment},
  {"get_index1", &Dtool_BulletManifoldPoint_get_index1_350, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_index1_350_comment},
  {"getIndex1", &Dtool_BulletManifoldPoint_get_index1_350, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_index1_350_comment},
  {"set_lateral_friction_initialized", &Dtool_BulletManifoldPoint_set_lateral_friction_initialized_351, METH_O, (const char *)Dtool_BulletManifoldPoint_set_lateral_friction_initialized_351_comment},
  {"setLateralFrictionInitialized", &Dtool_BulletManifoldPoint_set_lateral_friction_initialized_351, METH_O, (const char *)Dtool_BulletManifoldPoint_set_lateral_friction_initialized_351_comment},
  {"set_lateral_friction_dir1", &Dtool_BulletManifoldPoint_set_lateral_friction_dir1_352, METH_O, (const char *)Dtool_BulletManifoldPoint_set_lateral_friction_dir1_352_comment},
  {"setLateralFrictionDir1", &Dtool_BulletManifoldPoint_set_lateral_friction_dir1_352, METH_O, (const char *)Dtool_BulletManifoldPoint_set_lateral_friction_dir1_352_comment},
  {"set_lateral_friction_dir2", &Dtool_BulletManifoldPoint_set_lateral_friction_dir2_353, METH_O, (const char *)Dtool_BulletManifoldPoint_set_lateral_friction_dir2_353_comment},
  {"setLateralFrictionDir2", &Dtool_BulletManifoldPoint_set_lateral_friction_dir2_353, METH_O, (const char *)Dtool_BulletManifoldPoint_set_lateral_friction_dir2_353_comment},
  {"set_contact_motion1", &Dtool_BulletManifoldPoint_set_contact_motion1_354, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_motion1_354_comment},
  {"setContactMotion1", &Dtool_BulletManifoldPoint_set_contact_motion1_354, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_motion1_354_comment},
  {"set_contact_motion2", &Dtool_BulletManifoldPoint_set_contact_motion2_355, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_motion2_355_comment},
  {"setContactMotion2", &Dtool_BulletManifoldPoint_set_contact_motion2_355, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_motion2_355_comment},
  {"set_combined_friction", &Dtool_BulletManifoldPoint_set_combined_friction_356, METH_O, (const char *)Dtool_BulletManifoldPoint_set_combined_friction_356_comment},
  {"setCombinedFriction", &Dtool_BulletManifoldPoint_set_combined_friction_356, METH_O, (const char *)Dtool_BulletManifoldPoint_set_combined_friction_356_comment},
  {"set_combined_restitution", &Dtool_BulletManifoldPoint_set_combined_restitution_357, METH_O, (const char *)Dtool_BulletManifoldPoint_set_combined_restitution_357_comment},
  {"setCombinedRestitution", &Dtool_BulletManifoldPoint_set_combined_restitution_357, METH_O, (const char *)Dtool_BulletManifoldPoint_set_combined_restitution_357_comment},
  {"set_applied_impulse", &Dtool_BulletManifoldPoint_set_applied_impulse_358, METH_O, (const char *)Dtool_BulletManifoldPoint_set_applied_impulse_358_comment},
  {"setAppliedImpulse", &Dtool_BulletManifoldPoint_set_applied_impulse_358, METH_O, (const char *)Dtool_BulletManifoldPoint_set_applied_impulse_358_comment},
  {"set_applied_impulse_lateral1", &Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_359, METH_O, (const char *)Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_359_comment},
  {"setAppliedImpulseLateral1", &Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_359, METH_O, (const char *)Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_359_comment},
  {"set_applied_impulse_lateral2", &Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_360, METH_O, (const char *)Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_360_comment},
  {"setAppliedImpulseLateral2", &Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_360, METH_O, (const char *)Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_360_comment},
  {"set_contact_cfm1", &Dtool_BulletManifoldPoint_set_contact_cfm1_361, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_cfm1_361_comment},
  {"setContactCfm1", &Dtool_BulletManifoldPoint_set_contact_cfm1_361, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_cfm1_361_comment},
  {"set_contact_cfm2", &Dtool_BulletManifoldPoint_set_contact_cfm2_362, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_cfm2_362_comment},
  {"setContactCfm2", &Dtool_BulletManifoldPoint_set_contact_cfm2_362, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_cfm2_362_comment},
  {"get_lateral_friction_initialized", &Dtool_BulletManifoldPoint_get_lateral_friction_initialized_363, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_lateral_friction_initialized_363_comment},
  {"getLateralFrictionInitialized", &Dtool_BulletManifoldPoint_get_lateral_friction_initialized_363, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_lateral_friction_initialized_363_comment},
  {"get_lateral_friction_dir1", &Dtool_BulletManifoldPoint_get_lateral_friction_dir1_364, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_lateral_friction_dir1_364_comment},
  {"getLateralFrictionDir1", &Dtool_BulletManifoldPoint_get_lateral_friction_dir1_364, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_lateral_friction_dir1_364_comment},
  {"get_lateral_friction_dir2", &Dtool_BulletManifoldPoint_get_lateral_friction_dir2_365, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_lateral_friction_dir2_365_comment},
  {"getLateralFrictionDir2", &Dtool_BulletManifoldPoint_get_lateral_friction_dir2_365, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_lateral_friction_dir2_365_comment},
  {"get_contact_motion1", &Dtool_BulletManifoldPoint_get_contact_motion1_366, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_motion1_366_comment},
  {"getContactMotion1", &Dtool_BulletManifoldPoint_get_contact_motion1_366, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_motion1_366_comment},
  {"get_contact_motion2", &Dtool_BulletManifoldPoint_get_contact_motion2_367, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_motion2_367_comment},
  {"getContactMotion2", &Dtool_BulletManifoldPoint_get_contact_motion2_367, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_motion2_367_comment},
  {"get_combined_friction", &Dtool_BulletManifoldPoint_get_combined_friction_368, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_combined_friction_368_comment},
  {"getCombinedFriction", &Dtool_BulletManifoldPoint_get_combined_friction_368, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_combined_friction_368_comment},
  {"get_combined_restitution", &Dtool_BulletManifoldPoint_get_combined_restitution_369, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_combined_restitution_369_comment},
  {"getCombinedRestitution", &Dtool_BulletManifoldPoint_get_combined_restitution_369, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_combined_restitution_369_comment},
  {"get_applied_impulse_lateral1", &Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_370, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_370_comment},
  {"getAppliedImpulseLateral1", &Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_370, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_370_comment},
  {"get_applied_impulse_lateral2", &Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_371, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_371_comment},
  {"getAppliedImpulseLateral2", &Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_371, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_371_comment},
  {"get_contact_cfm1", &Dtool_BulletManifoldPoint_get_contact_cfm1_372, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_cfm1_372_comment},
  {"getContactCfm1", &Dtool_BulletManifoldPoint_get_contact_cfm1_372, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_cfm1_372_comment},
  {"get_contact_cfm2", &Dtool_BulletManifoldPoint_get_contact_cfm2_373, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_cfm2_373_comment},
  {"getContactCfm2", &Dtool_BulletManifoldPoint_get_contact_cfm2_373, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_cfm2_373_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletManifoldPoint[] = {
  {(char *)"life_time", &Dtool_BulletManifoldPoint_life_time_Getter, nullptr, nullptr, nullptr},
  {(char *)"distance", &Dtool_BulletManifoldPoint_distance_Getter, nullptr, nullptr, nullptr},
  {(char *)"applied_impulse", &Dtool_BulletManifoldPoint_applied_impulse_Getter, &Dtool_BulletManifoldPoint_applied_impulse_Setter, nullptr, nullptr},
  {(char *)"position_world_on_a", &Dtool_BulletManifoldPoint_position_world_on_a_Getter, nullptr, nullptr, nullptr},
  {(char *)"position_world_on_b", &Dtool_BulletManifoldPoint_position_world_on_b_Getter, nullptr, nullptr, nullptr},
  {(char *)"normal_world_on_b", &Dtool_BulletManifoldPoint_normal_world_on_b_Getter, nullptr, nullptr, nullptr},
  {(char *)"local_point_a", &Dtool_BulletManifoldPoint_local_point_a_Getter, nullptr, nullptr, nullptr},
  {(char *)"local_point_b", &Dtool_BulletManifoldPoint_local_point_b_Getter, nullptr, nullptr, nullptr},
  {(char *)"part_id0", &Dtool_BulletManifoldPoint_part_id0_Getter, nullptr, nullptr, nullptr},
  {(char *)"part_id1", &Dtool_BulletManifoldPoint_part_id1_Getter, nullptr, nullptr, nullptr},
  {(char *)"index0", &Dtool_BulletManifoldPoint_index0_Getter, nullptr, nullptr, nullptr},
  {(char *)"index1", &Dtool_BulletManifoldPoint_index1_Getter, nullptr, nullptr, nullptr},
  {(char *)"lateral_friction_initialized", &Dtool_BulletManifoldPoint_lateral_friction_initialized_Getter, &Dtool_BulletManifoldPoint_lateral_friction_initialized_Setter, nullptr, nullptr},
  {(char *)"lateral_friction_dir1", &Dtool_BulletManifoldPoint_lateral_friction_dir1_Getter, &Dtool_BulletManifoldPoint_lateral_friction_dir1_Setter, nullptr, nullptr},
  {(char *)"lateral_friction_dir2", &Dtool_BulletManifoldPoint_lateral_friction_dir2_Getter, &Dtool_BulletManifoldPoint_lateral_friction_dir2_Setter, nullptr, nullptr},
  {(char *)"contact_motion1", &Dtool_BulletManifoldPoint_contact_motion1_Getter, &Dtool_BulletManifoldPoint_contact_motion1_Setter, nullptr, nullptr},
  {(char *)"contact_motion2", &Dtool_BulletManifoldPoint_contact_motion2_Getter, &Dtool_BulletManifoldPoint_contact_motion2_Setter, nullptr, nullptr},
  {(char *)"combined_friction", &Dtool_BulletManifoldPoint_combined_friction_Getter, &Dtool_BulletManifoldPoint_combined_friction_Setter, nullptr, nullptr},
  {(char *)"combined_restitution", &Dtool_BulletManifoldPoint_combined_restitution_Getter, &Dtool_BulletManifoldPoint_combined_restitution_Setter, nullptr, nullptr},
  {(char *)"applied_impulse_lateral1", &Dtool_BulletManifoldPoint_applied_impulse_lateral1_Getter, &Dtool_BulletManifoldPoint_applied_impulse_lateral1_Setter, nullptr, nullptr},
  {(char *)"applied_impulse_lateral2", &Dtool_BulletManifoldPoint_applied_impulse_lateral2_Getter, &Dtool_BulletManifoldPoint_applied_impulse_lateral2_Setter, nullptr, nullptr},
  {(char *)"contact_cfm1", &Dtool_BulletManifoldPoint_contact_cfm1_Getter, &Dtool_BulletManifoldPoint_contact_cfm1_Setter, nullptr, nullptr},
  {(char *)"contact_cfm2", &Dtool_BulletManifoldPoint_contact_cfm2_Getter, &Dtool_BulletManifoldPoint_contact_cfm2_Setter, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletManifoldPoint = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletManifoldPoint = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletManifoldPoint",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletManifoldPoint,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletManifoldPoint,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletManifoldPoint,
    nullptr, // tp_members
    Dtool_Properties_BulletManifoldPoint,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletManifoldPoint,
    PyType_GenericAlloc,
    Dtool_new_BulletManifoldPoint,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletManifoldPoint,
  Dtool_UpcastInterface_BulletManifoldPoint,
  Dtool_DowncastInterface_BulletManifoldPoint,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletManifoldPoint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletManifoldPoint._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletManifoldPoint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletManifoldPoint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletManifoldPoint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletManifoldPoint);
  }
}

/**
 * Python method tables for BulletContactCallbackData (BulletContactCallbackData)
 */
static PyMethodDef Dtool_Methods_BulletContactCallbackData[] = {
  {"get_manifold", &Dtool_BulletContactCallbackData_get_manifold_400, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_manifold_400_comment},
  {"getManifold", &Dtool_BulletContactCallbackData_get_manifold_400, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_manifold_400_comment},
  {"get_node0", &Dtool_BulletContactCallbackData_get_node0_401, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_node0_401_comment},
  {"getNode0", &Dtool_BulletContactCallbackData_get_node0_401, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_node0_401_comment},
  {"get_node1", &Dtool_BulletContactCallbackData_get_node1_402, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_node1_402_comment},
  {"getNode1", &Dtool_BulletContactCallbackData_get_node1_402, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_node1_402_comment},
  {"get_part_id0", &Dtool_BulletContactCallbackData_get_part_id0_403, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_part_id0_403_comment},
  {"getPartId0", &Dtool_BulletContactCallbackData_get_part_id0_403, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_part_id0_403_comment},
  {"get_part_id1", &Dtool_BulletContactCallbackData_get_part_id1_404, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_part_id1_404_comment},
  {"getPartId1", &Dtool_BulletContactCallbackData_get_part_id1_404, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_part_id1_404_comment},
  {"get_index0", &Dtool_BulletContactCallbackData_get_index0_405, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_index0_405_comment},
  {"getIndex0", &Dtool_BulletContactCallbackData_get_index0_405, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_index0_405_comment},
  {"get_index1", &Dtool_BulletContactCallbackData_get_index1_406, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_index1_406_comment},
  {"getIndex1", &Dtool_BulletContactCallbackData_get_index1_406, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_index1_406_comment},
  {"get_class_type", &Dtool_BulletContactCallbackData_get_class_type_414, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletContactCallbackData_get_class_type_414_comment},
  {"getClassType", &Dtool_BulletContactCallbackData_get_class_type_414, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletContactCallbackData_get_class_type_414_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletContactCallbackData[] = {
  {(char *)"manifold", &Dtool_BulletContactCallbackData_manifold_Getter, nullptr, nullptr, nullptr},
  {(char *)"node0", &Dtool_BulletContactCallbackData_node0_Getter, nullptr, nullptr, nullptr},
  {(char *)"node1", &Dtool_BulletContactCallbackData_node1_Getter, nullptr, nullptr, nullptr},
  {(char *)"part_id0", &Dtool_BulletContactCallbackData_part_id0_Getter, nullptr, nullptr, nullptr},
  {(char *)"part_id1", &Dtool_BulletContactCallbackData_part_id1_Getter, nullptr, nullptr, nullptr},
  {(char *)"index0", &Dtool_BulletContactCallbackData_index0_Getter, nullptr, nullptr, nullptr},
  {(char *)"index1", &Dtool_BulletContactCallbackData_index1_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletContactCallbackData = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletContactCallbackData = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletContactCallbackData = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletContactCallbackData = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletContactCallbackData = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletContactCallbackData = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletContactCallbackData",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletContactCallbackData,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletContactCallbackData,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletContactCallbackData,
    &Dtool_SequenceMethods_BulletContactCallbackData,
    &Dtool_MappingMethods_BulletContactCallbackData,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletContactCallbackData,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletContactCallbackData,
    nullptr, // tp_members
    Dtool_Properties_BulletContactCallbackData,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletContactCallbackData,
    PyType_GenericAlloc,
    Dtool_new_BulletContactCallbackData,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletContactCallbackData,
  Dtool_UpcastInterface_BulletContactCallbackData,
  Dtool_DowncastInterface_BulletContactCallbackData,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletContactCallbackData(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_CallbackData != nullptr);
    assert(Dtool_Ptr_CallbackData->_Dtool_ModuleClassInit != nullptr);
    Dtool_Ptr_CallbackData->_Dtool_ModuleClassInit(nullptr);
    Dtool_BulletContactCallbackData._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_CallbackData);
    Dtool_BulletContactCallbackData._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletContactCallbackData._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletContactCallbackData) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletContactCallbackData)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletContactCallbackData);
  }
}

/**
 * Python method tables for BulletContact (BulletContact)
 */
static PyMethodDef Dtool_Methods_BulletContact[] = {
  {"get_manifold_point", &Dtool_BulletContact_get_manifold_point_416, METH_NOARGS, (const char *)Dtool_BulletContact_get_manifold_point_416_comment},
  {"getManifoldPoint", &Dtool_BulletContact_get_manifold_point_416, METH_NOARGS, (const char *)Dtool_BulletContact_get_manifold_point_416_comment},
  {"get_node0", &Dtool_BulletContact_get_node0_417, METH_NOARGS, (const char *)Dtool_BulletContact_get_node0_417_comment},
  {"getNode0", &Dtool_BulletContact_get_node0_417, METH_NOARGS, (const char *)Dtool_BulletContact_get_node0_417_comment},
  {"get_node1", &Dtool_BulletContact_get_node1_418, METH_NOARGS, (const char *)Dtool_BulletContact_get_node1_418_comment},
  {"getNode1", &Dtool_BulletContact_get_node1_418, METH_NOARGS, (const char *)Dtool_BulletContact_get_node1_418_comment},
  {"get_idx0", &Dtool_BulletContact_get_idx0_419, METH_NOARGS, (const char *)Dtool_BulletContact_get_idx0_419_comment},
  {"getIdx0", &Dtool_BulletContact_get_idx0_419, METH_NOARGS, (const char *)Dtool_BulletContact_get_idx0_419_comment},
  {"get_idx1", &Dtool_BulletContact_get_idx1_420, METH_NOARGS, (const char *)Dtool_BulletContact_get_idx1_420_comment},
  {"getIdx1", &Dtool_BulletContact_get_idx1_420, METH_NOARGS, (const char *)Dtool_BulletContact_get_idx1_420_comment},
  {"get_part_id0", &Dtool_BulletContact_get_part_id0_421, METH_NOARGS, (const char *)Dtool_BulletContact_get_part_id0_421_comment},
  {"getPartId0", &Dtool_BulletContact_get_part_id0_421, METH_NOARGS, (const char *)Dtool_BulletContact_get_part_id0_421_comment},
  {"get_part_id1", &Dtool_BulletContact_get_part_id1_422, METH_NOARGS, (const char *)Dtool_BulletContact_get_part_id1_422_comment},
  {"getPartId1", &Dtool_BulletContact_get_part_id1_422, METH_NOARGS, (const char *)Dtool_BulletContact_get_part_id1_422_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletContact[] = {
  {(char *)"manifold_point", &Dtool_BulletContact_manifold_point_Getter, nullptr, nullptr, nullptr},
  {(char *)"node0", &Dtool_BulletContact_node0_Getter, nullptr, nullptr, nullptr},
  {(char *)"node1", &Dtool_BulletContact_node1_Getter, nullptr, nullptr, nullptr},
  {(char *)"idx0", &Dtool_BulletContact_idx0_Getter, nullptr, nullptr, nullptr},
  {(char *)"idx1", &Dtool_BulletContact_idx1_Getter, nullptr, nullptr, nullptr},
  {(char *)"part_id0", &Dtool_BulletContact_part_id0_Getter, nullptr, nullptr, nullptr},
  {(char *)"part_id1", &Dtool_BulletContact_part_id1_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletContact = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletContact = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletContact",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletContact,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletContact,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletContact,
    nullptr, // tp_members
    Dtool_Properties_BulletContact,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletContact,
    PyType_GenericAlloc,
    Dtool_new_BulletContact,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletContact,
  Dtool_UpcastInterface_BulletContact,
  Dtool_DowncastInterface_BulletContact,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletContact(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletContact._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletContact._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletContact) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletContact)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletContact);
  }
}

/**
 * Python method tables for BulletContactResult (BulletContactResult)
 */
static PyMethodDef Dtool_Methods_BulletContactResult[] = {
  {"get_num_contacts", &Dtool_BulletContactResult_get_num_contacts_435, METH_NOARGS, (const char *)Dtool_BulletContactResult_get_num_contacts_435_comment},
  {"getNumContacts", &Dtool_BulletContactResult_get_num_contacts_435, METH_NOARGS, (const char *)Dtool_BulletContactResult_get_num_contacts_435_comment},
  {"get_contact", &Dtool_BulletContactResult_get_contact_436, METH_O, (const char *)Dtool_BulletContactResult_get_contact_436_comment},
  {"getContact", &Dtool_BulletContactResult_get_contact_436, METH_O, (const char *)Dtool_BulletContactResult_get_contact_436_comment},
  {"get_contacts", (PyCFunction) &MakeSeq_BulletContactResult_get_contacts, METH_NOARGS, nullptr},
  { "getContacts", (PyCFunction) &MakeSeq_BulletContactResult_get_contacts, METH_NOARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletContactResult[] = {
  {(char *)"contacts", &Dtool_BulletContactResult_contacts_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletContactResult = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletContactResult = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletContactResult = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletContactResult = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletContactResult = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletContactResult = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletContactResult",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletContactResult,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletContactResult,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletContactResult,
    &Dtool_SequenceMethods_BulletContactResult,
    &Dtool_MappingMethods_BulletContactResult,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletContactResult,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletContactResult,
    nullptr, // tp_members
    Dtool_Properties_BulletContactResult,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletContactResult,
    PyType_GenericAlloc,
    Dtool_new_BulletContactResult,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletContactResult,
  Dtool_UpcastInterface_BulletContactResult,
  Dtool_DowncastInterface_BulletContactResult,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletContactResult(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletContactResult._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletContactResult._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletContactResult) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletContactResult)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletContactResult);
  }
}

/**
 * Python method tables for BulletDebugNode (BulletDebugNode)
 */
static PyMethodDef Dtool_Methods_BulletDebugNode[] = {
  {"draw_mask_changed", &Dtool_BulletDebugNode_draw_mask_changed_442, METH_NOARGS, (const char *)Dtool_BulletDebugNode_draw_mask_changed_442_comment},
  {"drawMaskChanged", &Dtool_BulletDebugNode_draw_mask_changed_442, METH_NOARGS, (const char *)Dtool_BulletDebugNode_draw_mask_changed_442_comment},
  {"show_wireframe", &Dtool_BulletDebugNode_show_wireframe_443, METH_O, (const char *)Dtool_BulletDebugNode_show_wireframe_443_comment},
  {"showWireframe", &Dtool_BulletDebugNode_show_wireframe_443, METH_O, (const char *)Dtool_BulletDebugNode_show_wireframe_443_comment},
  {"show_constraints", &Dtool_BulletDebugNode_show_constraints_444, METH_O, (const char *)Dtool_BulletDebugNode_show_constraints_444_comment},
  {"showConstraints", &Dtool_BulletDebugNode_show_constraints_444, METH_O, (const char *)Dtool_BulletDebugNode_show_constraints_444_comment},
  {"show_bounding_boxes", &Dtool_BulletDebugNode_show_bounding_boxes_445, METH_O, (const char *)Dtool_BulletDebugNode_show_bounding_boxes_445_comment},
  {"showBoundingBoxes", &Dtool_BulletDebugNode_show_bounding_boxes_445, METH_O, (const char *)Dtool_BulletDebugNode_show_bounding_boxes_445_comment},
  {"show_normals", &Dtool_BulletDebugNode_show_normals_446, METH_O, (const char *)Dtool_BulletDebugNode_show_normals_446_comment},
  {"showNormals", &Dtool_BulletDebugNode_show_normals_446, METH_O, (const char *)Dtool_BulletDebugNode_show_normals_446_comment},
  {"get_show_wireframe", &Dtool_BulletDebugNode_get_show_wireframe_447, METH_NOARGS, (const char *)Dtool_BulletDebugNode_get_show_wireframe_447_comment},
  {"getShowWireframe", &Dtool_BulletDebugNode_get_show_wireframe_447, METH_NOARGS, (const char *)Dtool_BulletDebugNode_get_show_wireframe_447_comment},
  {"get_show_constraints", &Dtool_BulletDebugNode_get_show_constraints_448, METH_NOARGS, (const char *)Dtool_BulletDebugNode_get_show_constraints_448_comment},
  {"getShowConstraints", &Dtool_BulletDebugNode_get_show_constraints_448, METH_NOARGS, (const char *)Dtool_BulletDebugNode_get_show_constraints_448_comment},
  {"get_show_bounding_boxes", &Dtool_BulletDebugNode_get_show_bounding_boxes_449, METH_NOARGS, (const char *)Dtool_BulletDebugNode_get_show_bounding_boxes_449_comment},
  {"getShowBoundingBoxes", &Dtool_BulletDebugNode_get_show_bounding_boxes_449, METH_NOARGS, (const char *)Dtool_BulletDebugNode_get_show_bounding_boxes_449_comment},
  {"get_show_normals", &Dtool_BulletDebugNode_get_show_normals_450, METH_NOARGS, (const char *)Dtool_BulletDebugNode_get_show_normals_450_comment},
  {"getShowNormals", &Dtool_BulletDebugNode_get_show_normals_450, METH_NOARGS, (const char *)Dtool_BulletDebugNode_get_show_normals_450_comment},
  {"get_class_type", &Dtool_BulletDebugNode_get_class_type_455, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletDebugNode_get_class_type_455_comment},
  {"getClassType", &Dtool_BulletDebugNode_get_class_type_455, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletDebugNode_get_class_type_455_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletDebugNode[] = {
  {(char *)"wireframe", &Dtool_BulletDebugNode_wireframe_Getter, &Dtool_BulletDebugNode_wireframe_Setter, nullptr, nullptr},
  {(char *)"constraints", &Dtool_BulletDebugNode_constraints_Getter, &Dtool_BulletDebugNode_constraints_Setter, nullptr, nullptr},
  {(char *)"bounding_boxes", &Dtool_BulletDebugNode_bounding_boxes_Getter, &Dtool_BulletDebugNode_bounding_boxes_Setter, nullptr, nullptr},
  {(char *)"normals", &Dtool_BulletDebugNode_normals_Getter, &Dtool_BulletDebugNode_normals_Setter, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletDebugNode = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletDebugNode = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletDebugNode = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletDebugNode = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletDebugNode = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletDebugNode = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletDebugNode",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletDebugNode,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletDebugNode,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletDebugNode,
    &Dtool_SequenceMethods_BulletDebugNode,
    &Dtool_MappingMethods_BulletDebugNode,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletDebugNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletDebugNode,
    nullptr, // tp_members
    Dtool_Properties_BulletDebugNode,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletDebugNode,
    PyType_GenericAlloc,
    Dtool_new_BulletDebugNode,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletDebugNode,
  Dtool_UpcastInterface_BulletDebugNode,
  Dtool_DowncastInterface_BulletDebugNode,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletDebugNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_PandaNode != nullptr);
    assert(Dtool_Ptr_PandaNode->_Dtool_ModuleClassInit != nullptr);
    Dtool_Ptr_PandaNode->_Dtool_ModuleClassInit(nullptr);
    Dtool_BulletDebugNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_PandaNode);
    Dtool_BulletDebugNode._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletDebugNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletDebugNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletDebugNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletDebugNode);
  }
}

/**
 * Python method tables for BulletGhostNode (BulletGhostNode)
 */
static PyMethodDef Dtool_Methods_BulletGhostNode[] = {
  {"get_num_overlapping_nodes", &Dtool_BulletGhostNode_get_num_overlapping_nodes_458, METH_NOARGS, (const char *)Dtool_BulletGhostNode_get_num_overlapping_nodes_458_comment},
  {"getNumOverlappingNodes", &Dtool_BulletGhostNode_get_num_overlapping_nodes_458, METH_NOARGS, (const char *)Dtool_BulletGhostNode_get_num_overlapping_nodes_458_comment},
  {"get_overlapping_node", &Dtool_BulletGhostNode_get_overlapping_node_459, METH_O, (const char *)Dtool_BulletGhostNode_get_overlapping_node_459_comment},
  {"getOverlappingNode", &Dtool_BulletGhostNode_get_overlapping_node_459, METH_O, (const char *)Dtool_BulletGhostNode_get_overlapping_node_459_comment},
  {"get_class_type", &Dtool_BulletGhostNode_get_class_type_462, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletGhostNode_get_class_type_462_comment},
  {"getClassType", &Dtool_BulletGhostNode_get_class_type_462, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletGhostNode_get_class_type_462_comment},
  {"get_overlapping_nodes", (PyCFunction) &MakeSeq_BulletGhostNode_get_overlapping_nodes, METH_NOARGS, nullptr},
  { "getOverlappingNodes", (PyCFunction) &MakeSeq_BulletGhostNode_get_overlapping_nodes, METH_NOARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletGhostNode[] = {
  {(char *)"overlapping_nodes", &Dtool_BulletGhostNode_overlapping_nodes_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletGhostNode = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletGhostNode = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletGhostNode = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletGhostNode = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletGhostNode = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletGhostNode = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletGhostNode",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletGhostNode,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletGhostNode,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletGhostNode,
    &Dtool_SequenceMethods_BulletGhostNode,
    &Dtool_MappingMethods_BulletGhostNode,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletGhostNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletGhostNode,
    nullptr, // tp_members
    Dtool_Properties_BulletGhostNode,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletGhostNode,
    PyType_GenericAlloc,
    Dtool_new_BulletGhostNode,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletGhostNode,
  Dtool_UpcastInterface_BulletGhostNode,
  Dtool_DowncastInterface_BulletGhostNode,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletGhostNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletBodyNode(nullptr);
    Dtool_BulletGhostNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletBodyNode);
    Dtool_BulletGhostNode._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletGhostNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletGhostNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletGhostNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletGhostNode);
  }
}

/**
 * Python method tables for BulletSoftBodyNodeElement (BulletSoftBodyNodeElement)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyNodeElement[] = {
  {"empty", &Dtool_BulletSoftBodyNodeElement_empty_465, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNodeElement_empty_465_comment},
  {"get_pos", &Dtool_BulletSoftBodyNodeElement_get_pos_466, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_pos_466_comment},
  {"getPos", &Dtool_BulletSoftBodyNodeElement_get_pos_466, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_pos_466_comment},
  {"get_velocity", &Dtool_BulletSoftBodyNodeElement_get_velocity_467, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_velocity_467_comment},
  {"getVelocity", &Dtool_BulletSoftBodyNodeElement_get_velocity_467, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_velocity_467_comment},
  {"get_normal", &Dtool_BulletSoftBodyNodeElement_get_normal_468, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_normal_468_comment},
  {"getNormal", &Dtool_BulletSoftBodyNodeElement_get_normal_468, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_normal_468_comment},
  {"get_inv_mass", &Dtool_BulletSoftBodyNodeElement_get_inv_mass_469, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_inv_mass_469_comment},
  {"getInvMass", &Dtool_BulletSoftBodyNodeElement_get_inv_mass_469, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_inv_mass_469_comment},
  {"get_area", &Dtool_BulletSoftBodyNodeElement_get_area_470, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_area_470_comment},
  {"getArea", &Dtool_BulletSoftBodyNodeElement_get_area_470, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_area_470_comment},
  {"is_attached", &Dtool_BulletSoftBodyNodeElement_is_attached_471, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_is_attached_471_comment},
  {"isAttached", &Dtool_BulletSoftBodyNodeElement_is_attached_471, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_is_attached_471_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletSoftBodyNodeElement[] = {
  {(char *)"pos", &Dtool_BulletSoftBodyNodeElement_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"velocity", &Dtool_BulletSoftBodyNodeElement_velocity_Getter, nullptr, nullptr, nullptr},
  {(char *)"normal", &Dtool_BulletSoftBodyNodeElement_normal_Getter, nullptr, nullptr, nullptr},
  {(char *)"inv_mass", &Dtool_BulletSoftBodyNodeElement_inv_mass_Getter, nullptr, nullptr, nullptr},
  {(char *)"area", &Dtool_BulletSoftBodyNodeElement_area_Getter, nullptr, nullptr, nullptr},
  {(char *)"attached", &Dtool_BulletSoftBodyNodeElement_attached_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyNodeElement = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSoftBodyNodeElement = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletSoftBodyNodeElement",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyNodeElement,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletSoftBodyNodeElement,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletSoftBodyNodeElement,
    nullptr, // tp_members
    Dtool_Properties_BulletSoftBodyNodeElement,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyNodeElement,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyNodeElement,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyNodeElement,
  Dtool_UpcastInterface_BulletSoftBodyNodeElement,
  Dtool_DowncastInterface_BulletSoftBodyNodeElement,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyNodeElement(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletSoftBodyNodeElement._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletSoftBodyNodeElement._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyNodeElement) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyNodeElement)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyNodeElement);
  }
}

/**
 * Python method tables for BulletSoftBodyNode (BulletSoftBodyNode)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyNode[] = {
  {"get_cfg", &Dtool_BulletSoftBodyNode_get_cfg_480, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_cfg_480_comment},
  {"getCfg", &Dtool_BulletSoftBodyNode_get_cfg_480, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_cfg_480_comment},
  {"get_world_info", &Dtool_BulletSoftBodyNode_get_world_info_481, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_world_info_481_comment},
  {"getWorldInfo", &Dtool_BulletSoftBodyNode_get_world_info_481, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_world_info_481_comment},
  {"generate_bending_constraints", (PyCFunction) &Dtool_BulletSoftBodyNode_generate_bending_constraints_482, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_generate_bending_constraints_482_comment},
  {"generateBendingConstraints", (PyCFunction) &Dtool_BulletSoftBodyNode_generate_bending_constraints_482, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_generate_bending_constraints_482_comment},
  {"randomize_constraints", &Dtool_BulletSoftBodyNode_randomize_constraints_483, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_randomize_constraints_483_comment},
  {"randomizeConstraints", &Dtool_BulletSoftBodyNode_randomize_constraints_483, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_randomize_constraints_483_comment},
  {"set_volume_mass", &Dtool_BulletSoftBodyNode_set_volume_mass_484, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_volume_mass_484_comment},
  {"setVolumeMass", &Dtool_BulletSoftBodyNode_set_volume_mass_484, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_volume_mass_484_comment},
  {"set_volume_density", &Dtool_BulletSoftBodyNode_set_volume_density_485, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_volume_density_485_comment},
  {"setVolumeDensity", &Dtool_BulletSoftBodyNode_set_volume_density_485, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_volume_density_485_comment},
  {"set_total_mass", (PyCFunction) &Dtool_BulletSoftBodyNode_set_total_mass_486, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_set_total_mass_486_comment},
  {"setTotalMass", (PyCFunction) &Dtool_BulletSoftBodyNode_set_total_mass_486, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_set_total_mass_486_comment},
  {"set_total_density", &Dtool_BulletSoftBodyNode_set_total_density_487, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_total_density_487_comment},
  {"setTotalDensity", &Dtool_BulletSoftBodyNode_set_total_density_487, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_total_density_487_comment},
  {"set_mass", (PyCFunction) &Dtool_BulletSoftBodyNode_set_mass_488, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_set_mass_488_comment},
  {"setMass", (PyCFunction) &Dtool_BulletSoftBodyNode_set_mass_488, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_set_mass_488_comment},
  {"get_mass", &Dtool_BulletSoftBodyNode_get_mass_489, METH_O, (const char *)Dtool_BulletSoftBodyNode_get_mass_489_comment},
  {"getMass", &Dtool_BulletSoftBodyNode_get_mass_489, METH_O, (const char *)Dtool_BulletSoftBodyNode_get_mass_489_comment},
  {"get_total_mass", &Dtool_BulletSoftBodyNode_get_total_mass_490, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_total_mass_490_comment},
  {"getTotalMass", &Dtool_BulletSoftBodyNode_get_total_mass_490, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_total_mass_490_comment},
  {"get_volume", &Dtool_BulletSoftBodyNode_get_volume_491, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_volume_491_comment},
  {"getVolume", &Dtool_BulletSoftBodyNode_get_volume_491, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_volume_491_comment},
  {"add_force", (PyCFunction) &Dtool_BulletSoftBodyNode_add_force_492, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_add_force_492_comment},
  {"addForce", (PyCFunction) &Dtool_BulletSoftBodyNode_add_force_492, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_add_force_492_comment},
  {"set_velocity", &Dtool_BulletSoftBodyNode_set_velocity_493, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_velocity_493_comment},
  {"setVelocity", &Dtool_BulletSoftBodyNode_set_velocity_493, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_velocity_493_comment},
  {"add_velocity", (PyCFunction) &Dtool_BulletSoftBodyNode_add_velocity_494, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_add_velocity_494_comment},
  {"addVelocity", (PyCFunction) &Dtool_BulletSoftBodyNode_add_velocity_494, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_add_velocity_494_comment},
  {"set_wind_velocity", &Dtool_BulletSoftBodyNode_set_wind_velocity_495, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_wind_velocity_495_comment},
  {"setWindVelocity", &Dtool_BulletSoftBodyNode_set_wind_velocity_495, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_wind_velocity_495_comment},
  {"get_wind_velocity", &Dtool_BulletSoftBodyNode_get_wind_velocity_496, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_wind_velocity_496_comment},
  {"getWindVelocity", &Dtool_BulletSoftBodyNode_get_wind_velocity_496, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_wind_velocity_496_comment},
  {"set_pose", (PyCFunction) &Dtool_BulletSoftBodyNode_set_pose_497, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_set_pose_497_comment},
  {"setPose", (PyCFunction) &Dtool_BulletSoftBodyNode_set_pose_497, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_set_pose_497_comment},
  {"get_aabb", &Dtool_BulletSoftBodyNode_get_aabb_498, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_aabb_498_comment},
  {"getAabb", &Dtool_BulletSoftBodyNode_get_aabb_498, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_aabb_498_comment},
  {"generate_clusters", (PyCFunction) &Dtool_BulletSoftBodyNode_generate_clusters_499, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_generate_clusters_499_comment},
  {"generateClusters", (PyCFunction) &Dtool_BulletSoftBodyNode_generate_clusters_499, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_generate_clusters_499_comment},
  {"release_cluster", &Dtool_BulletSoftBodyNode_release_cluster_500, METH_O, (const char *)Dtool_BulletSoftBodyNode_release_cluster_500_comment},
  {"releaseCluster", &Dtool_BulletSoftBodyNode_release_cluster_500, METH_O, (const char *)Dtool_BulletSoftBodyNode_release_cluster_500_comment},
  {"release_clusters", &Dtool_BulletSoftBodyNode_release_clusters_501, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_release_clusters_501_comment},
  {"releaseClusters", &Dtool_BulletSoftBodyNode_release_clusters_501, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_release_clusters_501_comment},
  {"get_num_clusters", &Dtool_BulletSoftBodyNode_get_num_clusters_502, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_num_clusters_502_comment},
  {"getNumClusters", &Dtool_BulletSoftBodyNode_get_num_clusters_502, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_num_clusters_502_comment},
  {"cluster_com", &Dtool_BulletSoftBodyNode_cluster_com_503, METH_O, (const char *)Dtool_BulletSoftBodyNode_cluster_com_503_comment},
  {"clusterCom", &Dtool_BulletSoftBodyNode_cluster_com_503, METH_O, (const char *)Dtool_BulletSoftBodyNode_cluster_com_503_comment},
  {"link_geom", &Dtool_BulletSoftBodyNode_link_geom_504, METH_O, (const char *)Dtool_BulletSoftBodyNode_link_geom_504_comment},
  {"linkGeom", &Dtool_BulletSoftBodyNode_link_geom_504, METH_O, (const char *)Dtool_BulletSoftBodyNode_link_geom_504_comment},
  {"unlink_geom", &Dtool_BulletSoftBodyNode_unlink_geom_505, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_unlink_geom_505_comment},
  {"unlinkGeom", &Dtool_BulletSoftBodyNode_unlink_geom_505, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_unlink_geom_505_comment},
  {"link_curve", &Dtool_BulletSoftBodyNode_link_curve_506, METH_O, (const char *)Dtool_BulletSoftBodyNode_link_curve_506_comment},
  {"linkCurve", &Dtool_BulletSoftBodyNode_link_curve_506, METH_O, (const char *)Dtool_BulletSoftBodyNode_link_curve_506_comment},
  {"unlink_curve", &Dtool_BulletSoftBodyNode_unlink_curve_507, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_unlink_curve_507_comment},
  {"unlinkCurve", &Dtool_BulletSoftBodyNode_unlink_curve_507, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_unlink_curve_507_comment},
  {"link_surface", &Dtool_BulletSoftBodyNode_link_surface_508, METH_O, (const char *)Dtool_BulletSoftBodyNode_link_surface_508_comment},
  {"linkSurface", &Dtool_BulletSoftBodyNode_link_surface_508, METH_O, (const char *)Dtool_BulletSoftBodyNode_link_surface_508_comment},
  {"unlink_surface", &Dtool_BulletSoftBodyNode_unlink_surface_509, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_unlink_surface_509_comment},
  {"unlinkSurface", &Dtool_BulletSoftBodyNode_unlink_surface_509, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_unlink_surface_509_comment},
  {"append_anchor", (PyCFunction) &Dtool_BulletSoftBodyNode_append_anchor_510, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_append_anchor_510_comment},
  {"appendAnchor", (PyCFunction) &Dtool_BulletSoftBodyNode_append_anchor_510, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_append_anchor_510_comment},
  {"append_linear_joint", (PyCFunction) &Dtool_BulletSoftBodyNode_append_linear_joint_511, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_append_linear_joint_511_comment},
  {"appendLinearJoint", (PyCFunction) &Dtool_BulletSoftBodyNode_append_linear_joint_511, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_append_linear_joint_511_comment},
  {"append_angular_joint", (PyCFunction) &Dtool_BulletSoftBodyNode_append_angular_joint_512, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_append_angular_joint_512_comment},
  {"appendAngularJoint", (PyCFunction) &Dtool_BulletSoftBodyNode_append_angular_joint_512, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_append_angular_joint_512_comment},
  {"get_num_materials", &Dtool_BulletSoftBodyNode_get_num_materials_513, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_num_materials_513_comment},
  {"getNumMaterials", &Dtool_BulletSoftBodyNode_get_num_materials_513, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_num_materials_513_comment},
  {"get_material", &Dtool_BulletSoftBodyNode_get_material_514, METH_O, (const char *)Dtool_BulletSoftBodyNode_get_material_514_comment},
  {"getMaterial", &Dtool_BulletSoftBodyNode_get_material_514, METH_O, (const char *)Dtool_BulletSoftBodyNode_get_material_514_comment},
  {"append_material", &Dtool_BulletSoftBodyNode_append_material_516, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_append_material_516_comment},
  {"appendMaterial", &Dtool_BulletSoftBodyNode_append_material_516, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_append_material_516_comment},
  {"get_num_nodes", &Dtool_BulletSoftBodyNode_get_num_nodes_517, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_num_nodes_517_comment},
  {"getNumNodes", &Dtool_BulletSoftBodyNode_get_num_nodes_517, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_num_nodes_517_comment},
  {"get_node", &Dtool_BulletSoftBodyNode_get_node_518, METH_O, (const char *)Dtool_BulletSoftBodyNode_get_node_518_comment},
  {"getNode", &Dtool_BulletSoftBodyNode_get_node_518, METH_O, (const char *)Dtool_BulletSoftBodyNode_get_node_518_comment},
  {"get_closest_node_index", (PyCFunction) &Dtool_BulletSoftBodyNode_get_closest_node_index_520, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_get_closest_node_index_520_comment},
  {"getClosestNodeIndex", (PyCFunction) &Dtool_BulletSoftBodyNode_get_closest_node_index_520, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_get_closest_node_index_520_comment},
  {"make_rope", (PyCFunction) &Dtool_BulletSoftBodyNode_make_rope_521, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_rope_521_comment},
  {"makeRope", (PyCFunction) &Dtool_BulletSoftBodyNode_make_rope_521, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_rope_521_comment},
  {"make_patch", (PyCFunction) &Dtool_BulletSoftBodyNode_make_patch_522, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_patch_522_comment},
  {"makePatch", (PyCFunction) &Dtool_BulletSoftBodyNode_make_patch_522, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_patch_522_comment},
  {"make_ellipsoid", (PyCFunction) &Dtool_BulletSoftBodyNode_make_ellipsoid_523, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_ellipsoid_523_comment},
  {"makeEllipsoid", (PyCFunction) &Dtool_BulletSoftBodyNode_make_ellipsoid_523, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_ellipsoid_523_comment},
  {"make_tri_mesh", (PyCFunction) &Dtool_BulletSoftBodyNode_make_tri_mesh_524, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_tri_mesh_524_comment},
  {"makeTriMesh", (PyCFunction) &Dtool_BulletSoftBodyNode_make_tri_mesh_524, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_tri_mesh_524_comment},
  {"make_tet_mesh", (PyCFunction) &Dtool_BulletSoftBodyNode_make_tet_mesh_525, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_tet_mesh_525_comment},
  {"makeTetMesh", (PyCFunction) &Dtool_BulletSoftBodyNode_make_tet_mesh_525, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_tet_mesh_525_comment},
  {"get_class_type", &Dtool_BulletSoftBodyNode_get_class_type_649, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_get_class_type_649_comment},
  {"getClassType", &Dtool_BulletSoftBodyNode_get_class_type_649, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_get_class_type_649_comment},
  {"get_materials", (PyCFunction) &MakeSeq_BulletSoftBodyNode_get_materials, METH_NOARGS, nullptr},
  { "getMaterials", (PyCFunction) &MakeSeq_BulletSoftBodyNode_get_materials, METH_NOARGS, nullptr},
  {"get_nodes", (PyCFunction) &MakeSeq_BulletSoftBodyNode_get_nodes, METH_NOARGS, nullptr},
  { "getNodes", (PyCFunction) &MakeSeq_BulletSoftBodyNode_get_nodes, METH_NOARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletSoftBodyNode[] = {
  {(char *)"cfg", &Dtool_BulletSoftBodyNode_cfg_Getter, nullptr, nullptr, nullptr},
  {(char *)"world_info", &Dtool_BulletSoftBodyNode_world_info_Getter, nullptr, nullptr, nullptr},
  {(char *)"wind_velocity", &Dtool_BulletSoftBodyNode_wind_velocity_Getter, &Dtool_BulletSoftBodyNode_wind_velocity_Setter, nullptr, nullptr},
  {(char *)"aabb", &Dtool_BulletSoftBodyNode_aabb_Getter, nullptr, nullptr, nullptr},
  {(char *)"num_clusters", &Dtool_BulletSoftBodyNode_num_clusters_Getter, nullptr, nullptr, nullptr},
  {(char *)"materials", &Dtool_BulletSoftBodyNode_materials_Getter, nullptr, nullptr, nullptr},
  {(char *)"nodes", &Dtool_BulletSoftBodyNode_nodes_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyNode = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletSoftBodyNode = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletSoftBodyNode = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletSoftBodyNode = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletSoftBodyNode = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletSoftBodyNode = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletSoftBodyNode",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyNode,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletSoftBodyNode,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletSoftBodyNode,
    &Dtool_SequenceMethods_BulletSoftBodyNode,
    &Dtool_MappingMethods_BulletSoftBodyNode,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletSoftBodyNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletSoftBodyNode,
    nullptr, // tp_members
    Dtool_Properties_BulletSoftBodyNode,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyNode,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyNode,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyNode,
  Dtool_UpcastInterface_BulletSoftBodyNode,
  Dtool_DowncastInterface_BulletSoftBodyNode,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletBodyNode(nullptr);
    Dtool_BulletSoftBodyNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletBodyNode);
    Dtool_BulletSoftBodyNode._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletSoftBodyNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyNode);
  }
}

/**
 * Python method tables for BulletSoftBodyConfig (BulletSoftBodyConfig)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyConfig[] = {
  {"clear_all_collision_flags", &Dtool_BulletSoftBodyConfig_clear_all_collision_flags_531, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_clear_all_collision_flags_531_comment},
  {"clearAllCollisionFlags", &Dtool_BulletSoftBodyConfig_clear_all_collision_flags_531, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_clear_all_collision_flags_531_comment},
  {"set_collision_flag", (PyCFunction) &Dtool_BulletSoftBodyConfig_set_collision_flag_532, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyConfig_set_collision_flag_532_comment},
  {"setCollisionFlag", (PyCFunction) &Dtool_BulletSoftBodyConfig_set_collision_flag_532, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyConfig_set_collision_flag_532_comment},
  {"get_collision_flag", &Dtool_BulletSoftBodyConfig_get_collision_flag_533, METH_O, (const char *)Dtool_BulletSoftBodyConfig_get_collision_flag_533_comment},
  {"getCollisionFlag", &Dtool_BulletSoftBodyConfig_get_collision_flag_533, METH_O, (const char *)Dtool_BulletSoftBodyConfig_get_collision_flag_533_comment},
  {"set_aero_model", &Dtool_BulletSoftBodyConfig_set_aero_model_534, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_aero_model_534_comment},
  {"setAeroModel", &Dtool_BulletSoftBodyConfig_set_aero_model_534, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_aero_model_534_comment},
  {"get_aero_model", &Dtool_BulletSoftBodyConfig_get_aero_model_535, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_aero_model_535_comment},
  {"getAeroModel", &Dtool_BulletSoftBodyConfig_get_aero_model_535, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_aero_model_535_comment},
  {"set_velocities_correction_factor", &Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_536, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_536_comment},
  {"setVelocitiesCorrectionFactor", &Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_536, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_536_comment},
  {"set_damping_coefficient", &Dtool_BulletSoftBodyConfig_set_damping_coefficient_537, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_damping_coefficient_537_comment},
  {"setDampingCoefficient", &Dtool_BulletSoftBodyConfig_set_damping_coefficient_537, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_damping_coefficient_537_comment},
  {"set_drag_coefficient", &Dtool_BulletSoftBodyConfig_set_drag_coefficient_538, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_drag_coefficient_538_comment},
  {"setDragCoefficient", &Dtool_BulletSoftBodyConfig_set_drag_coefficient_538, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_drag_coefficient_538_comment},
  {"set_lift_coefficient", &Dtool_BulletSoftBodyConfig_set_lift_coefficient_539, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_lift_coefficient_539_comment},
  {"setLiftCoefficient", &Dtool_BulletSoftBodyConfig_set_lift_coefficient_539, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_lift_coefficient_539_comment},
  {"set_pressure_coefficient", &Dtool_BulletSoftBodyConfig_set_pressure_coefficient_540, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_pressure_coefficient_540_comment},
  {"setPressureCoefficient", &Dtool_BulletSoftBodyConfig_set_pressure_coefficient_540, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_pressure_coefficient_540_comment},
  {"set_volume_conservation_coefficient", &Dtool_BulletSoftBodyConfig_set_volume_conservation_coefficient_541, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_volume_conservation_coefficient_541_comment},
  {"setVolumeConservationCoefficient", &Dtool_BulletSoftBodyConfig_set_volume_conservation_coefficient_541, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_volume_conservation_coefficient_541_comment},
  {"set_dynamic_friction_coefficient", &Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_542, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_542_comment},
  {"setDynamicFrictionCoefficient", &Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_542, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_542_comment},
  {"set_pose_matching_coefficient", &Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_543, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_543_comment},
  {"setPoseMatchingCoefficient", &Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_543, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_543_comment},
  {"set_rigid_contacts_hardness", &Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_544, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_544_comment},
  {"setRigidContactsHardness", &Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_544, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_544_comment},
  {"set_kinetic_contacts_hardness", &Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_545, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_545_comment},
  {"setKineticContactsHardness", &Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_545, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_545_comment},
  {"set_soft_contacts_hardness", &Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_546, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_546_comment},
  {"setSoftContactsHardness", &Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_546, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_546_comment},
  {"set_anchors_hardness", &Dtool_BulletSoftBodyConfig_set_anchors_hardness_547, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_anchors_hardness_547_comment},
  {"setAnchorsHardness", &Dtool_BulletSoftBodyConfig_set_anchors_hardness_547, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_anchors_hardness_547_comment},
  {"set_soft_vs_rigid_hardness", &Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_548, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_548_comment},
  {"setSoftVsRigidHardness", &Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_548, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_548_comment},
  {"set_soft_vs_kinetic_hardness", &Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_549, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_549_comment},
  {"setSoftVsKineticHardness", &Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_549, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_549_comment},
  {"set_soft_vs_soft_hardness", &Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_550, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_550_comment},
  {"setSoftVsSoftHardness", &Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_550, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_550_comment},
  {"set_soft_vs_rigid_impulse_split", &Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_551, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_551_comment},
  {"setSoftVsRigidImpulseSplit", &Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_551, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_551_comment},
  {"set_soft_vs_kinetic_impulse_split", &Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_552, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_552_comment},
  {"setSoftVsKineticImpulseSplit", &Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_552, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_552_comment},
  {"set_soft_vs_soft_impulse_split", &Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_553, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_553_comment},
  {"setSoftVsSoftImpulseSplit", &Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_553, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_553_comment},
  {"set_maxvolume", &Dtool_BulletSoftBodyConfig_set_maxvolume_554, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_maxvolume_554_comment},
  {"setMaxvolume", &Dtool_BulletSoftBodyConfig_set_maxvolume_554, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_maxvolume_554_comment},
  {"set_timescale", &Dtool_BulletSoftBodyConfig_set_timescale_555, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_timescale_555_comment},
  {"setTimescale", &Dtool_BulletSoftBodyConfig_set_timescale_555, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_timescale_555_comment},
  {"set_positions_solver_iterations", &Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_556, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_556_comment},
  {"setPositionsSolverIterations", &Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_556, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_556_comment},
  {"set_velocities_solver_iterations", &Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_557, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_557_comment},
  {"setVelocitiesSolverIterations", &Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_557, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_557_comment},
  {"set_drift_solver_iterations", &Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_558, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_558_comment},
  {"setDriftSolverIterations", &Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_558, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_558_comment},
  {"set_cluster_solver_iterations", &Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_559, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_559_comment},
  {"setClusterSolverIterations", &Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_559, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_559_comment},
  {"get_velocities_correction_factor", &Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_560, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_560_comment},
  {"getVelocitiesCorrectionFactor", &Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_560, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_560_comment},
  {"get_damping_coefficient", &Dtool_BulletSoftBodyConfig_get_damping_coefficient_561, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_damping_coefficient_561_comment},
  {"getDampingCoefficient", &Dtool_BulletSoftBodyConfig_get_damping_coefficient_561, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_damping_coefficient_561_comment},
  {"get_drag_coefficient", &Dtool_BulletSoftBodyConfig_get_drag_coefficient_562, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_drag_coefficient_562_comment},
  {"getDragCoefficient", &Dtool_BulletSoftBodyConfig_get_drag_coefficient_562, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_drag_coefficient_562_comment},
  {"get_lift_coefficient", &Dtool_BulletSoftBodyConfig_get_lift_coefficient_563, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_lift_coefficient_563_comment},
  {"getLiftCoefficient", &Dtool_BulletSoftBodyConfig_get_lift_coefficient_563, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_lift_coefficient_563_comment},
  {"get_pressure_coefficient", &Dtool_BulletSoftBodyConfig_get_pressure_coefficient_564, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_pressure_coefficient_564_comment},
  {"getPressureCoefficient", &Dtool_BulletSoftBodyConfig_get_pressure_coefficient_564, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_pressure_coefficient_564_comment},
  {"get_volume_conservation_coefficient", &Dtool_BulletSoftBodyConfig_get_volume_conservation_coefficient_565, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_volume_conservation_coefficient_565_comment},
  {"getVolumeConservationCoefficient", &Dtool_BulletSoftBodyConfig_get_volume_conservation_coefficient_565, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_volume_conservation_coefficient_565_comment},
  {"get_dynamic_friction_coefficient", &Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_566, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_566_comment},
  {"getDynamicFrictionCoefficient", &Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_566, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_566_comment},
  {"get_pose_matching_coefficient", &Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_567, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_567_comment},
  {"getPoseMatchingCoefficient", &Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_567, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_567_comment},
  {"get_rigid_contacts_hardness", &Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_568, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_568_comment},
  {"getRigidContactsHardness", &Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_568, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_568_comment},
  {"get_kinetic_contacts_hardness", &Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_569, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_569_comment},
  {"getKineticContactsHardness", &Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_569, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_569_comment},
  {"get_soft_contacts_hardness", &Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_570, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_570_comment},
  {"getSoftContactsHardness", &Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_570, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_570_comment},
  {"get_anchors_hardness", &Dtool_BulletSoftBodyConfig_get_anchors_hardness_571, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_anchors_hardness_571_comment},
  {"getAnchorsHardness", &Dtool_BulletSoftBodyConfig_get_anchors_hardness_571, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_anchors_hardness_571_comment},
  {"get_soft_vs_rigid_hardness", &Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_572, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_572_comment},
  {"getSoftVsRigidHardness", &Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_572, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_572_comment},
  {"get_soft_vs_kinetic_hardness", &Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_573, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_573_comment},
  {"getSoftVsKineticHardness", &Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_573, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_573_comment},
  {"get_soft_vs_soft_hardness", &Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_574, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_574_comment},
  {"getSoftVsSoftHardness", &Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_574, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_574_comment},
  {"get_soft_vs_rigid_impulse_split", &Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_575, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_575_comment},
  {"getSoftVsRigidImpulseSplit", &Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_575, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_575_comment},
  {"get_soft_vs_kinetic_impulse_split", &Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_576, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_576_comment},
  {"getSoftVsKineticImpulseSplit", &Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_576, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_576_comment},
  {"get_soft_vs_soft_impulse_split", &Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_577, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_577_comment},
  {"getSoftVsSoftImpulseSplit", &Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_577, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_577_comment},
  {"get_maxvolume", &Dtool_BulletSoftBodyConfig_get_maxvolume_578, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_maxvolume_578_comment},
  {"getMaxvolume", &Dtool_BulletSoftBodyConfig_get_maxvolume_578, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_maxvolume_578_comment},
  {"get_timescale", &Dtool_BulletSoftBodyConfig_get_timescale_579, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_timescale_579_comment},
  {"getTimescale", &Dtool_BulletSoftBodyConfig_get_timescale_579, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_timescale_579_comment},
  {"get_positions_solver_iterations", &Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_580, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_580_comment},
  {"getPositionsSolverIterations", &Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_580, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_580_comment},
  {"get_velocities_solver_iterations", &Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_581, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_581_comment},
  {"getVelocitiesSolverIterations", &Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_581, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_581_comment},
  {"get_drift_solver_iterations", &Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_582, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_582_comment},
  {"getDriftSolverIterations", &Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_582, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_582_comment},
  {"get_cluster_solver_iterations", &Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_583, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_583_comment},
  {"getClusterSolverIterations", &Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_583, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_583_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletSoftBodyConfig[] = {
  {(char *)"aero_model", &Dtool_BulletSoftBodyConfig_aero_model_Getter, &Dtool_BulletSoftBodyConfig_aero_model_Setter, nullptr, nullptr},
  {(char *)"velocities_correction_factor", &Dtool_BulletSoftBodyConfig_velocities_correction_factor_Getter, &Dtool_BulletSoftBodyConfig_velocities_correction_factor_Setter, nullptr, nullptr},
  {(char *)"damping_coefficient", &Dtool_BulletSoftBodyConfig_damping_coefficient_Getter, &Dtool_BulletSoftBodyConfig_damping_coefficient_Setter, nullptr, nullptr},
  {(char *)"drag_coefficient", &Dtool_BulletSoftBodyConfig_drag_coefficient_Getter, &Dtool_BulletSoftBodyConfig_drag_coefficient_Setter, nullptr, nullptr},
  {(char *)"lift_coefficient", &Dtool_BulletSoftBodyConfig_lift_coefficient_Getter, &Dtool_BulletSoftBodyConfig_lift_coefficient_Setter, nullptr, nullptr},
  {(char *)"pressure_coefficient", &Dtool_BulletSoftBodyConfig_pressure_coefficient_Getter, &Dtool_BulletSoftBodyConfig_pressure_coefficient_Setter, nullptr, nullptr},
  {(char *)"volume_conservation_coefficient", &Dtool_BulletSoftBodyConfig_volume_conservation_coefficient_Getter, &Dtool_BulletSoftBodyConfig_volume_conservation_coefficient_Setter, nullptr, nullptr},
  {(char *)"dynamic_friction_coefficient", &Dtool_BulletSoftBodyConfig_dynamic_friction_coefficient_Getter, &Dtool_BulletSoftBodyConfig_dynamic_friction_coefficient_Setter, nullptr, nullptr},
  {(char *)"pose_matching_coefficient", &Dtool_BulletSoftBodyConfig_pose_matching_coefficient_Getter, &Dtool_BulletSoftBodyConfig_pose_matching_coefficient_Setter, nullptr, nullptr},
  {(char *)"rigid_contacts_hardness", &Dtool_BulletSoftBodyConfig_rigid_contacts_hardness_Getter, &Dtool_BulletSoftBodyConfig_rigid_contacts_hardness_Setter, nullptr, nullptr},
  {(char *)"kinetic_contacts_hardness", &Dtool_BulletSoftBodyConfig_kinetic_contacts_hardness_Getter, &Dtool_BulletSoftBodyConfig_kinetic_contacts_hardness_Setter, nullptr, nullptr},
  {(char *)"soft_contacts_hardness", &Dtool_BulletSoftBodyConfig_soft_contacts_hardness_Getter, &Dtool_BulletSoftBodyConfig_soft_contacts_hardness_Setter, nullptr, nullptr},
  {(char *)"anchors_hardness", &Dtool_BulletSoftBodyConfig_anchors_hardness_Getter, &Dtool_BulletSoftBodyConfig_anchors_hardness_Setter, nullptr, nullptr},
  {(char *)"soft_vs_rigid_hardness", &Dtool_BulletSoftBodyConfig_soft_vs_rigid_hardness_Getter, &Dtool_BulletSoftBodyConfig_soft_vs_rigid_hardness_Setter, nullptr, nullptr},
  {(char *)"soft_vs_kinetic_hardness", &Dtool_BulletSoftBodyConfig_soft_vs_kinetic_hardness_Getter, &Dtool_BulletSoftBodyConfig_soft_vs_kinetic_hardness_Setter, nullptr, nullptr},
  {(char *)"soft_vs_soft_hardness", &Dtool_BulletSoftBodyConfig_soft_vs_soft_hardness_Getter, &Dtool_BulletSoftBodyConfig_soft_vs_soft_hardness_Setter, nullptr, nullptr},
  {(char *)"soft_vs_rigid_impulse_split", &Dtool_BulletSoftBodyConfig_soft_vs_rigid_impulse_split_Getter, &Dtool_BulletSoftBodyConfig_soft_vs_rigid_impulse_split_Setter, nullptr, nullptr},
  {(char *)"soft_vs_kinetic_impulse_split", &Dtool_BulletSoftBodyConfig_soft_vs_kinetic_impulse_split_Getter, &Dtool_BulletSoftBodyConfig_soft_vs_kinetic_impulse_split_Setter, nullptr, nullptr},
  {(char *)"soft_vs_soft_impulse_split", &Dtool_BulletSoftBodyConfig_soft_vs_soft_impulse_split_Getter, &Dtool_BulletSoftBodyConfig_soft_vs_soft_impulse_split_Setter, nullptr, nullptr},
  {(char *)"maxvolume", &Dtool_BulletSoftBodyConfig_maxvolume_Getter, &Dtool_BulletSoftBodyConfig_maxvolume_Setter, nullptr, nullptr},
  {(char *)"timescale", &Dtool_BulletSoftBodyConfig_timescale_Getter, &Dtool_BulletSoftBodyConfig_timescale_Setter, nullptr, nullptr},
  {(char *)"positions_solver_iterations", &Dtool_BulletSoftBodyConfig_positions_solver_iterations_Getter, &Dtool_BulletSoftBodyConfig_positions_solver_iterations_Setter, nullptr, nullptr},
  {(char *)"velocities_solver_iterations", &Dtool_BulletSoftBodyConfig_velocities_solver_iterations_Getter, &Dtool_BulletSoftBodyConfig_velocities_solver_iterations_Setter, nullptr, nullptr},
  {(char *)"drift_solver_iterations", &Dtool_BulletSoftBodyConfig_drift_solver_iterations_Getter, &Dtool_BulletSoftBodyConfig_drift_solver_iterations_Setter, nullptr, nullptr},
  {(char *)"cluster_solver_iterations", &Dtool_BulletSoftBodyConfig_cluster_solver_iterations_Getter, &Dtool_BulletSoftBodyConfig_cluster_solver_iterations_Setter, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyConfig = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSoftBodyConfig = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletSoftBodyConfig",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyConfig,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletSoftBodyConfig,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletSoftBodyConfig,
    nullptr, // tp_members
    Dtool_Properties_BulletSoftBodyConfig,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyConfig,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyConfig,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyConfig,
  Dtool_UpcastInterface_BulletSoftBodyConfig,
  Dtool_DowncastInterface_BulletSoftBodyConfig,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyConfig(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletSoftBodyConfig._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = _PyDict_NewPresized(25);
    Dtool_BulletSoftBodyConfig._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    // enum BulletSoftBodyConfig::CollisionFlag;
    PyDict_SetItemString(dict, "CF_rigid_vs_soft_mask", Dtool_WrapValue(BulletSoftBodyConfig::CF_rigid_vs_soft_mask));
    PyDict_SetItemString(dict, "CFRigidVsSoftMask", Dtool_WrapValue(BulletSoftBodyConfig::CF_rigid_vs_soft_mask));
    PyDict_SetItemString(dict, "CF_sdf_rigid_soft", Dtool_WrapValue(BulletSoftBodyConfig::CF_sdf_rigid_soft));
    PyDict_SetItemString(dict, "CFSdfRigidSoft", Dtool_WrapValue(BulletSoftBodyConfig::CF_sdf_rigid_soft));
    PyDict_SetItemString(dict, "CF_cluster_rigid_soft", Dtool_WrapValue(BulletSoftBodyConfig::CF_cluster_rigid_soft));
    PyDict_SetItemString(dict, "CFClusterRigidSoft", Dtool_WrapValue(BulletSoftBodyConfig::CF_cluster_rigid_soft));
    PyDict_SetItemString(dict, "CF_soft_vs_soft_mask", Dtool_WrapValue(BulletSoftBodyConfig::CF_soft_vs_soft_mask));
    PyDict_SetItemString(dict, "CFSoftVsSoftMask", Dtool_WrapValue(BulletSoftBodyConfig::CF_soft_vs_soft_mask));
    PyDict_SetItemString(dict, "CF_vertex_face_soft_soft", Dtool_WrapValue(BulletSoftBodyConfig::CF_vertex_face_soft_soft));
    PyDict_SetItemString(dict, "CFVertexFaceSoftSoft", Dtool_WrapValue(BulletSoftBodyConfig::CF_vertex_face_soft_soft));
    PyDict_SetItemString(dict, "CF_cluster_soft_soft", Dtool_WrapValue(BulletSoftBodyConfig::CF_cluster_soft_soft));
    PyDict_SetItemString(dict, "CFClusterSoftSoft", Dtool_WrapValue(BulletSoftBodyConfig::CF_cluster_soft_soft));
    PyDict_SetItemString(dict, "CF_cluster_self", Dtool_WrapValue(BulletSoftBodyConfig::CF_cluster_self));
    PyDict_SetItemString(dict, "CFClusterSelf", Dtool_WrapValue(BulletSoftBodyConfig::CF_cluster_self));
    // enum BulletSoftBodyConfig::AeroModel;
    PyDict_SetItemString(dict, "AM_vertex_point", Dtool_WrapValue(BulletSoftBodyConfig::AM_vertex_point));
    PyDict_SetItemString(dict, "AMVertexPoint", Dtool_WrapValue(BulletSoftBodyConfig::AM_vertex_point));
    PyDict_SetItemString(dict, "AM_vertex_two_sided", Dtool_WrapValue(BulletSoftBodyConfig::AM_vertex_two_sided));
    PyDict_SetItemString(dict, "AMVertexTwoSided", Dtool_WrapValue(BulletSoftBodyConfig::AM_vertex_two_sided));
    PyDict_SetItemString(dict, "AM_vertex_one_sided", Dtool_WrapValue(BulletSoftBodyConfig::AM_vertex_one_sided));
    PyDict_SetItemString(dict, "AMVertexOneSided", Dtool_WrapValue(BulletSoftBodyConfig::AM_vertex_one_sided));
    PyDict_SetItemString(dict, "AM_face_two_sided", Dtool_WrapValue(BulletSoftBodyConfig::AM_face_two_sided));
    PyDict_SetItemString(dict, "AMFaceTwoSided", Dtool_WrapValue(BulletSoftBodyConfig::AM_face_two_sided));
    PyDict_SetItemString(dict, "AM_face_one_sided", Dtool_WrapValue(BulletSoftBodyConfig::AM_face_one_sided));
    PyDict_SetItemString(dict, "AMFaceOneSided", Dtool_WrapValue(BulletSoftBodyConfig::AM_face_one_sided));
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyConfig) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyConfig)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyConfig);
  }
}

/**
 * Python method tables for BulletSoftBodyWorldInfo (BulletSoftBodyWorldInfo)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyWorldInfo[] = {
  {"set_air_density", &Dtool_BulletSoftBodyWorldInfo_set_air_density_613, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_air_density_613_comment},
  {"setAirDensity", &Dtool_BulletSoftBodyWorldInfo_set_air_density_613, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_air_density_613_comment},
  {"set_water_density", &Dtool_BulletSoftBodyWorldInfo_set_water_density_614, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_water_density_614_comment},
  {"setWaterDensity", &Dtool_BulletSoftBodyWorldInfo_set_water_density_614, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_water_density_614_comment},
  {"set_water_offset", &Dtool_BulletSoftBodyWorldInfo_set_water_offset_615, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_water_offset_615_comment},
  {"setWaterOffset", &Dtool_BulletSoftBodyWorldInfo_set_water_offset_615, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_water_offset_615_comment},
  {"set_water_normal", &Dtool_BulletSoftBodyWorldInfo_set_water_normal_616, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_water_normal_616_comment},
  {"setWaterNormal", &Dtool_BulletSoftBodyWorldInfo_set_water_normal_616, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_water_normal_616_comment},
  {"set_gravity", &Dtool_BulletSoftBodyWorldInfo_set_gravity_617, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_gravity_617_comment},
  {"setGravity", &Dtool_BulletSoftBodyWorldInfo_set_gravity_617, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_gravity_617_comment},
  {"get_air_density", &Dtool_BulletSoftBodyWorldInfo_get_air_density_618, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_air_density_618_comment},
  {"getAirDensity", &Dtool_BulletSoftBodyWorldInfo_get_air_density_618, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_air_density_618_comment},
  {"get_water_density", &Dtool_BulletSoftBodyWorldInfo_get_water_density_619, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_water_density_619_comment},
  {"getWaterDensity", &Dtool_BulletSoftBodyWorldInfo_get_water_density_619, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_water_density_619_comment},
  {"get_water_offset", &Dtool_BulletSoftBodyWorldInfo_get_water_offset_620, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_water_offset_620_comment},
  {"getWaterOffset", &Dtool_BulletSoftBodyWorldInfo_get_water_offset_620, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_water_offset_620_comment},
  {"get_water_normal", &Dtool_BulletSoftBodyWorldInfo_get_water_normal_621, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_water_normal_621_comment},
  {"getWaterNormal", &Dtool_BulletSoftBodyWorldInfo_get_water_normal_621, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_water_normal_621_comment},
  {"get_gravity", &Dtool_BulletSoftBodyWorldInfo_get_gravity_622, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_gravity_622_comment},
  {"getGravity", &Dtool_BulletSoftBodyWorldInfo_get_gravity_622, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_gravity_622_comment},
  {"garbage_collect", (PyCFunction) &Dtool_BulletSoftBodyWorldInfo_garbage_collect_623, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyWorldInfo_garbage_collect_623_comment},
  {"garbageCollect", (PyCFunction) &Dtool_BulletSoftBodyWorldInfo_garbage_collect_623, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyWorldInfo_garbage_collect_623_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletSoftBodyWorldInfo[] = {
  {(char *)"air_density", &Dtool_BulletSoftBodyWorldInfo_air_density_Getter, &Dtool_BulletSoftBodyWorldInfo_air_density_Setter, nullptr, nullptr},
  {(char *)"water_density", &Dtool_BulletSoftBodyWorldInfo_water_density_Getter, &Dtool_BulletSoftBodyWorldInfo_water_density_Setter, nullptr, nullptr},
  {(char *)"water_offset", &Dtool_BulletSoftBodyWorldInfo_water_offset_Getter, &Dtool_BulletSoftBodyWorldInfo_water_offset_Setter, nullptr, nullptr},
  {(char *)"water_normal", &Dtool_BulletSoftBodyWorldInfo_water_normal_Getter, &Dtool_BulletSoftBodyWorldInfo_water_normal_Setter, nullptr, nullptr},
  {(char *)"gravity", &Dtool_BulletSoftBodyWorldInfo_gravity_Getter, &Dtool_BulletSoftBodyWorldInfo_gravity_Setter, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyWorldInfo = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSoftBodyWorldInfo = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletSoftBodyWorldInfo",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyWorldInfo,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletSoftBodyWorldInfo,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletSoftBodyWorldInfo,
    nullptr, // tp_members
    Dtool_Properties_BulletSoftBodyWorldInfo,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyWorldInfo,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyWorldInfo,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyWorldInfo,
  Dtool_UpcastInterface_BulletSoftBodyWorldInfo,
  Dtool_DowncastInterface_BulletSoftBodyWorldInfo,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyWorldInfo(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletSoftBodyWorldInfo._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletSoftBodyWorldInfo._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyWorldInfo) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyWorldInfo)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyWorldInfo);
  }
}

/**
 * Python method tables for BulletSoftBodyMaterial (BulletSoftBodyMaterial)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyMaterial[] = {
  {"empty", &Dtool_BulletSoftBodyMaterial_empty_637, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSoftBodyMaterial_empty_637_comment},
  {"get_linear_stiffness", &Dtool_BulletSoftBodyMaterial_get_linear_stiffness_638, METH_NOARGS, (const char *)Dtool_BulletSoftBodyMaterial_get_linear_stiffness_638_comment},
  {"getLinearStiffness", &Dtool_BulletSoftBodyMaterial_get_linear_stiffness_638, METH_NOARGS, (const char *)Dtool_BulletSoftBodyMaterial_get_linear_stiffness_638_comment},
  {"set_linear_stiffness", &Dtool_BulletSoftBodyMaterial_set_linear_stiffness_639, METH_O, (const char *)Dtool_BulletSoftBodyMaterial_set_linear_stiffness_639_comment},
  {"setLinearStiffness", &Dtool_BulletSoftBodyMaterial_set_linear_stiffness_639, METH_O, (const char *)Dtool_BulletSoftBodyMaterial_set_linear_stiffness_639_comment},
  {"get_angular_stiffness", &Dtool_BulletSoftBodyMaterial_get_angular_stiffness_640, METH_NOARGS, (const char *)Dtool_BulletSoftBodyMaterial_get_angular_stiffness_640_comment},
  {"getAngularStiffness", &Dtool_BulletSoftBodyMaterial_get_angular_stiffness_640, METH_NOARGS, (const char *)Dtool_BulletSoftBodyMaterial_get_angular_stiffness_640_comment},
  {"set_angular_stiffness", &Dtool_BulletSoftBodyMaterial_set_angular_stiffness_641, METH_O, (const char *)Dtool_BulletSoftBodyMaterial_set_angular_stiffness_641_comment},
  {"setAngularStiffness", &Dtool_BulletSoftBodyMaterial_set_angular_stiffness_641, METH_O, (const char *)Dtool_BulletSoftBodyMaterial_set_angular_stiffness_641_comment},
  {"get_volume_preservation", &Dtool_BulletSoftBodyMaterial_get_volume_preservation_642, METH_NOARGS, (const char *)Dtool_BulletSoftBodyMaterial_get_volume_preservation_642_comment},
  {"getVolumePreservation", &Dtool_BulletSoftBodyMaterial_get_volume_preservation_642, METH_NOARGS, (const char *)Dtool_BulletSoftBodyMaterial_get_volume_preservation_642_comment},
  {"set_volume_preservation", &Dtool_BulletSoftBodyMaterial_set_volume_preservation_643, METH_O, (const char *)Dtool_BulletSoftBodyMaterial_set_volume_preservation_643_comment},
  {"setVolumePreservation", &Dtool_BulletSoftBodyMaterial_set_volume_preservation_643, METH_O, (const char *)Dtool_BulletSoftBodyMaterial_set_volume_preservation_643_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletSoftBodyMaterial[] = {
  {(char *)"linear_stiffness", &Dtool_BulletSoftBodyMaterial_linear_stiffness_Getter, &Dtool_BulletSoftBodyMaterial_linear_stiffness_Setter, nullptr, nullptr},
  {(char *)"angular_stiffness", &Dtool_BulletSoftBodyMaterial_angular_stiffness_Getter, &Dtool_BulletSoftBodyMaterial_angular_stiffness_Setter, nullptr, nullptr},
  {(char *)"volume_preservation", &Dtool_BulletSoftBodyMaterial_volume_preservation_Getter, &Dtool_BulletSoftBodyMaterial_volume_preservation_Setter, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyMaterial = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSoftBodyMaterial = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletSoftBodyMaterial",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyMaterial,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletSoftBodyMaterial,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletSoftBodyMaterial,
    nullptr, // tp_members
    Dtool_Properties_BulletSoftBodyMaterial,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyMaterial,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyMaterial,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyMaterial,
  Dtool_UpcastInterface_BulletSoftBodyMaterial,
  Dtool_DowncastInterface_BulletSoftBodyMaterial,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyMaterial(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletSoftBodyMaterial._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletSoftBodyMaterial._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyMaterial) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyMaterial)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyMaterial);
  }
}

/**
 * Python method tables for BulletVehicleTuning (BulletVehicleTuning)
 */
static PyMethodDef Dtool_Methods_BulletVehicleTuning[] = {
  {"set_suspension_stiffness", &Dtool_BulletVehicleTuning_set_suspension_stiffness_651, METH_O, (const char *)Dtool_BulletVehicleTuning_set_suspension_stiffness_651_comment},
  {"setSuspensionStiffness", &Dtool_BulletVehicleTuning_set_suspension_stiffness_651, METH_O, (const char *)Dtool_BulletVehicleTuning_set_suspension_stiffness_651_comment},
  {"set_suspension_compression", &Dtool_BulletVehicleTuning_set_suspension_compression_652, METH_O, (const char *)Dtool_BulletVehicleTuning_set_suspension_compression_652_comment},
  {"setSuspensionCompression", &Dtool_BulletVehicleTuning_set_suspension_compression_652, METH_O, (const char *)Dtool_BulletVehicleTuning_set_suspension_compression_652_comment},
  {"set_suspension_damping", &Dtool_BulletVehicleTuning_set_suspension_damping_653, METH_O, (const char *)Dtool_BulletVehicleTuning_set_suspension_damping_653_comment},
  {"setSuspensionDamping", &Dtool_BulletVehicleTuning_set_suspension_damping_653, METH_O, (const char *)Dtool_BulletVehicleTuning_set_suspension_damping_653_comment},
  {"set_max_suspension_travel_cm", &Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_654, METH_O, (const char *)Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_654_comment},
  {"setMaxSuspensionTravelCm", &Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_654, METH_O, (const char *)Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_654_comment},
  {"set_friction_slip", &Dtool_BulletVehicleTuning_set_friction_slip_655, METH_O, (const char *)Dtool_BulletVehicleTuning_set_friction_slip_655_comment},
  {"setFrictionSlip", &Dtool_BulletVehicleTuning_set_friction_slip_655, METH_O, (const char *)Dtool_BulletVehicleTuning_set_friction_slip_655_comment},
  {"set_max_suspension_force", &Dtool_BulletVehicleTuning_set_max_suspension_force_656, METH_O, (const char *)Dtool_BulletVehicleTuning_set_max_suspension_force_656_comment},
  {"setMaxSuspensionForce", &Dtool_BulletVehicleTuning_set_max_suspension_force_656, METH_O, (const char *)Dtool_BulletVehicleTuning_set_max_suspension_force_656_comment},
  {"get_suspension_stiffness", &Dtool_BulletVehicleTuning_get_suspension_stiffness_657, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_suspension_stiffness_657_comment},
  {"getSuspensionStiffness", &Dtool_BulletVehicleTuning_get_suspension_stiffness_657, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_suspension_stiffness_657_comment},
  {"get_suspension_compression", &Dtool_BulletVehicleTuning_get_suspension_compression_658, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_suspension_compression_658_comment},
  {"getSuspensionCompression", &Dtool_BulletVehicleTuning_get_suspension_compression_658, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_suspension_compression_658_comment},
  {"get_suspension_damping", &Dtool_BulletVehicleTuning_get_suspension_damping_659, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_suspension_damping_659_comment},
  {"getSuspensionDamping", &Dtool_BulletVehicleTuning_get_suspension_damping_659, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_suspension_damping_659_comment},
  {"get_max_suspension_travel_cm", &Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_660, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_660_comment},
  {"getMaxSuspensionTravelCm", &Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_660, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_660_comment},
  {"get_friction_slip", &Dtool_BulletVehicleTuning_get_friction_slip_661, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_friction_slip_661_comment},
  {"getFrictionSlip", &Dtool_BulletVehicleTuning_get_friction_slip_661, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_friction_slip_661_comment},
  {"get_max_suspension_force", &Dtool_BulletVehicleTuning_get_max_suspension_force_662, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_max_suspension_force_662_comment},
  {"getMaxSuspensionForce", &Dtool_BulletVehicleTuning_get_max_suspension_force_662, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_max_suspension_force_662_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletVehicleTuning[] = {
  {(char *)"suspension_stiffness", &Dtool_BulletVehicleTuning_suspension_stiffness_Getter, &Dtool_BulletVehicleTuning_suspension_stiffness_Setter, nullptr, nullptr},
  {(char *)"suspension_compression", &Dtool_BulletVehicleTuning_suspension_compression_Getter, &Dtool_BulletVehicleTuning_suspension_compression_Setter, nullptr, nullptr},
  {(char *)"suspension_damping", &Dtool_BulletVehicleTuning_suspension_damping_Getter, &Dtool_BulletVehicleTuning_suspension_damping_Setter, nullptr, nullptr},
  {(char *)"max_suspension_travel_cm", &Dtool_BulletVehicleTuning_max_suspension_travel_cm_Getter, &Dtool_BulletVehicleTuning_max_suspension_travel_cm_Setter, nullptr, nullptr},
  {(char *)"friction_slip", &Dtool_BulletVehicleTuning_friction_slip_Getter, &Dtool_BulletVehicleTuning_friction_slip_Setter, nullptr, nullptr},
  {(char *)"max_suspension_force", &Dtool_BulletVehicleTuning_max_suspension_force_Getter, &Dtool_BulletVehicleTuning_max_suspension_force_Setter, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletVehicleTuning = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletVehicleTuning = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletVehicleTuning",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletVehicleTuning,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletVehicleTuning,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletVehicleTuning,
    nullptr, // tp_members
    Dtool_Properties_BulletVehicleTuning,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletVehicleTuning,
    PyType_GenericAlloc,
    Dtool_new_BulletVehicleTuning,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletVehicleTuning,
  Dtool_UpcastInterface_BulletVehicleTuning,
  Dtool_DowncastInterface_BulletVehicleTuning,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletVehicleTuning(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletVehicleTuning._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletVehicleTuning._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletVehicleTuning) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletVehicleTuning)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletVehicleTuning);
  }
}

/**
 * Python method tables for BulletVehicle (BulletVehicle)
 */
static PyMethodDef Dtool_Methods_BulletVehicle[] = {
  {"set_coordinate_system", &Dtool_BulletVehicle_set_coordinate_system_671, METH_O, (const char *)Dtool_BulletVehicle_set_coordinate_system_671_comment},
  {"setCoordinateSystem", &Dtool_BulletVehicle_set_coordinate_system_671, METH_O, (const char *)Dtool_BulletVehicle_set_coordinate_system_671_comment},
  {"set_steering_value", (PyCFunction) &Dtool_BulletVehicle_set_steering_value_672, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_set_steering_value_672_comment},
  {"setSteeringValue", (PyCFunction) &Dtool_BulletVehicle_set_steering_value_672, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_set_steering_value_672_comment},
  {"set_brake", (PyCFunction) &Dtool_BulletVehicle_set_brake_673, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_set_brake_673_comment},
  {"setBrake", (PyCFunction) &Dtool_BulletVehicle_set_brake_673, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_set_brake_673_comment},
  {"set_pitch_control", &Dtool_BulletVehicle_set_pitch_control_674, METH_O, (const char *)Dtool_BulletVehicle_set_pitch_control_674_comment},
  {"setPitchControl", &Dtool_BulletVehicle_set_pitch_control_674, METH_O, (const char *)Dtool_BulletVehicle_set_pitch_control_674_comment},
  {"get_chassis", &Dtool_BulletVehicle_get_chassis_675, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_chassis_675_comment},
  {"getChassis", &Dtool_BulletVehicle_get_chassis_675, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_chassis_675_comment},
  {"get_current_speed_km_hour", &Dtool_BulletVehicle_get_current_speed_km_hour_676, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_current_speed_km_hour_676_comment},
  {"getCurrentSpeedKmHour", &Dtool_BulletVehicle_get_current_speed_km_hour_676, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_current_speed_km_hour_676_comment},
  {"get_steering_value", &Dtool_BulletVehicle_get_steering_value_677, METH_O, (const char *)Dtool_BulletVehicle_get_steering_value_677_comment},
  {"getSteeringValue", &Dtool_BulletVehicle_get_steering_value_677, METH_O, (const char *)Dtool_BulletVehicle_get_steering_value_677_comment},
  {"get_forward_vector", &Dtool_BulletVehicle_get_forward_vector_678, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_forward_vector_678_comment},
  {"getForwardVector", &Dtool_BulletVehicle_get_forward_vector_678, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_forward_vector_678_comment},
  {"reset_suspension", &Dtool_BulletVehicle_reset_suspension_679, METH_NOARGS, (const char *)Dtool_BulletVehicle_reset_suspension_679_comment},
  {"resetSuspension", &Dtool_BulletVehicle_reset_suspension_679, METH_NOARGS, (const char *)Dtool_BulletVehicle_reset_suspension_679_comment},
  {"apply_engine_force", (PyCFunction) &Dtool_BulletVehicle_apply_engine_force_680, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_apply_engine_force_680_comment},
  {"applyEngineForce", (PyCFunction) &Dtool_BulletVehicle_apply_engine_force_680, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_apply_engine_force_680_comment},
  {"create_wheel", (PyCFunction) &Dtool_BulletVehicle_create_wheel_681, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_create_wheel_681_comment},
  {"createWheel", (PyCFunction) &Dtool_BulletVehicle_create_wheel_681, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_create_wheel_681_comment},
  {"get_num_wheels", &Dtool_BulletVehicle_get_num_wheels_682, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_num_wheels_682_comment},
  {"getNumWheels", &Dtool_BulletVehicle_get_num_wheels_682, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_num_wheels_682_comment},
  {"get_wheel", &Dtool_BulletVehicle_get_wheel_683, METH_O, (const char *)Dtool_BulletVehicle_get_wheel_683_comment},
  {"getWheel", &Dtool_BulletVehicle_get_wheel_683, METH_O, (const char *)Dtool_BulletVehicle_get_wheel_683_comment},
  {"get_tuning", &Dtool_BulletVehicle_get_tuning_685, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_tuning_685_comment},
  {"getTuning", &Dtool_BulletVehicle_get_tuning_685, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_tuning_685_comment},
  {"get_class_type", &Dtool_BulletVehicle_get_class_type_786, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletVehicle_get_class_type_786_comment},
  {"getClassType", &Dtool_BulletVehicle_get_class_type_786, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletVehicle_get_class_type_786_comment},
  {"get_wheels", (PyCFunction) &MakeSeq_BulletVehicle_get_wheels, METH_NOARGS, nullptr},
  { "getWheels", (PyCFunction) &MakeSeq_BulletVehicle_get_wheels, METH_NOARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletVehicle[] = {
  {(char *)"chassis", &Dtool_BulletVehicle_chassis_Getter, nullptr, nullptr, nullptr},
  {(char *)"current_speed_km_hour", &Dtool_BulletVehicle_current_speed_km_hour_Getter, nullptr, nullptr, nullptr},
  {(char *)"forward_vector", &Dtool_BulletVehicle_forward_vector_Getter, nullptr, nullptr, nullptr},
  {(char *)"wheels", &Dtool_BulletVehicle_wheels_Getter, nullptr, nullptr, nullptr},
  {(char *)"tuning", &Dtool_BulletVehicle_tuning_Getter, nullptr, (char *)
    "// Tuning",
    nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletVehicle = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletVehicle = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletVehicle = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletVehicle = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletVehicle = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletVehicle = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletVehicle",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletVehicle,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletVehicle,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletVehicle,
    &Dtool_SequenceMethods_BulletVehicle,
    &Dtool_MappingMethods_BulletVehicle,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletVehicle,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * Simulates a raycast vehicle which casts a ray per wheel at the ground as a\n"
    " * cheap replacement for complex suspension simulation.  The suspension can be\n"
    " * tuned in various ways.  It is possible to add a (probably) arbitrary number\n"
    " * of wheels.\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletVehicle,
    nullptr, // tp_members
    Dtool_Properties_BulletVehicle,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletVehicle,
    PyType_GenericAlloc,
    Dtool_new_BulletVehicle,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletVehicle,
  Dtool_UpcastInterface_BulletVehicle,
  Dtool_DowncastInterface_BulletVehicle,
  (CoerceFunction)Dtool_ConstCoerce_BulletVehicle,
  (CoerceFunction)Dtool_Coerce_BulletVehicle,
};

static void Dtool_PyModuleClassInit_BulletVehicle(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_TypedReferenceCount != nullptr);
    assert(Dtool_Ptr_TypedReferenceCount->_Dtool_ModuleClassInit != nullptr);
    Dtool_Ptr_TypedReferenceCount->_Dtool_ModuleClassInit(nullptr);
    Dtool_BulletVehicle._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_TypedReferenceCount);
    Dtool_BulletVehicle._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletVehicle._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletVehicle) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletVehicle)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletVehicle);
  }
}

/**
 * Python method tables for BulletWheel (BulletWheel)
 */
static PyMethodDef Dtool_Methods_BulletWheel[] = {
  {"set_suspension_stiffness", &Dtool_BulletWheel_set_suspension_stiffness_692, METH_O, (const char *)Dtool_BulletWheel_set_suspension_stiffness_692_comment},
  {"setSuspensionStiffness", &Dtool_BulletWheel_set_suspension_stiffness_692, METH_O, (const char *)Dtool_BulletWheel_set_suspension_stiffness_692_comment},
  {"set_max_suspension_travel_cm", &Dtool_BulletWheel_set_max_suspension_travel_cm_693, METH_O, (const char *)Dtool_BulletWheel_set_max_suspension_travel_cm_693_comment},
  {"setMaxSuspensionTravelCm", &Dtool_BulletWheel_set_max_suspension_travel_cm_693, METH_O, (const char *)Dtool_BulletWheel_set_max_suspension_travel_cm_693_comment},
  {"set_friction_slip", &Dtool_BulletWheel_set_friction_slip_694, METH_O, (const char *)Dtool_BulletWheel_set_friction_slip_694_comment},
  {"setFrictionSlip", &Dtool_BulletWheel_set_friction_slip_694, METH_O, (const char *)Dtool_BulletWheel_set_friction_slip_694_comment},
  {"set_max_suspension_force", &Dtool_BulletWheel_set_max_suspension_force_695, METH_O, (const char *)Dtool_BulletWheel_set_max_suspension_force_695_comment},
  {"setMaxSuspensionForce", &Dtool_BulletWheel_set_max_suspension_force_695, METH_O, (const char *)Dtool_BulletWheel_set_max_suspension_force_695_comment},
  {"set_wheels_damping_compression", &Dtool_BulletWheel_set_wheels_damping_compression_696, METH_O, (const char *)Dtool_BulletWheel_set_wheels_damping_compression_696_comment},
  {"setWheelsDampingCompression", &Dtool_BulletWheel_set_wheels_damping_compression_696, METH_O, (const char *)Dtool_BulletWheel_set_wheels_damping_compression_696_comment},
  {"set_wheels_damping_relaxation", &Dtool_BulletWheel_set_wheels_damping_relaxation_697, METH_O, (const char *)Dtool_BulletWheel_set_wheels_damping_relaxation_697_comment},
  {"setWheelsDampingRelaxation", &Dtool_BulletWheel_set_wheels_damping_relaxation_697, METH_O, (const char *)Dtool_BulletWheel_set_wheels_damping_relaxation_697_comment},
  {"set_roll_influence", &Dtool_BulletWheel_set_roll_influence_698, METH_O, (const char *)Dtool_BulletWheel_set_roll_influence_698_comment},
  {"setRollInfluence", &Dtool_BulletWheel_set_roll_influence_698, METH_O, (const char *)Dtool_BulletWheel_set_roll_influence_698_comment},
  {"set_wheel_radius", &Dtool_BulletWheel_set_wheel_radius_699, METH_O, (const char *)Dtool_BulletWheel_set_wheel_radius_699_comment},
  {"setWheelRadius", &Dtool_BulletWheel_set_wheel_radius_699, METH_O, (const char *)Dtool_BulletWheel_set_wheel_radius_699_comment},
  {"set_steering", &Dtool_BulletWheel_set_steering_700, METH_O, (const char *)Dtool_BulletWheel_set_steering_700_comment},
  {"setSteering", &Dtool_BulletWheel_set_steering_700, METH_O, (const char *)Dtool_BulletWheel_set_steering_700_comment},
  {"set_rotation", &Dtool_BulletWheel_set_rotation_701, METH_O, (const char *)Dtool_BulletWheel_set_rotation_701_comment},
  {"setRotation", &Dtool_BulletWheel_set_rotation_701, METH_O, (const char *)Dtool_BulletWheel_set_rotation_701_comment},
  {"set_delta_rotation", &Dtool_BulletWheel_set_delta_rotation_702, METH_O, (const char *)Dtool_BulletWheel_set_delta_rotation_702_comment},
  {"setDeltaRotation", &Dtool_BulletWheel_set_delta_rotation_702, METH_O, (const char *)Dtool_BulletWheel_set_delta_rotation_702_comment},
  {"set_engine_force", &Dtool_BulletWheel_set_engine_force_703, METH_O, (const char *)Dtool_BulletWheel_set_engine_force_703_comment},
  {"setEngineForce", &Dtool_BulletWheel_set_engine_force_703, METH_O, (const char *)Dtool_BulletWheel_set_engine_force_703_comment},
  {"set_brake", &Dtool_BulletWheel_set_brake_704, METH_O, (const char *)Dtool_BulletWheel_set_brake_704_comment},
  {"setBrake", &Dtool_BulletWheel_set_brake_704, METH_O, (const char *)Dtool_BulletWheel_set_brake_704_comment},
  {"set_skid_info", &Dtool_BulletWheel_set_skid_info_705, METH_O, (const char *)Dtool_BulletWheel_set_skid_info_705_comment},
  {"setSkidInfo", &Dtool_BulletWheel_set_skid_info_705, METH_O, (const char *)Dtool_BulletWheel_set_skid_info_705_comment},
  {"set_wheels_suspension_force", &Dtool_BulletWheel_set_wheels_suspension_force_706, METH_O, (const char *)Dtool_BulletWheel_set_wheels_suspension_force_706_comment},
  {"setWheelsSuspensionForce", &Dtool_BulletWheel_set_wheels_suspension_force_706, METH_O, (const char *)Dtool_BulletWheel_set_wheels_suspension_force_706_comment},
  {"set_suspension_relative_velocity", &Dtool_BulletWheel_set_suspension_relative_velocity_707, METH_O, (const char *)Dtool_BulletWheel_set_suspension_relative_velocity_707_comment},
  {"setSuspensionRelativeVelocity", &Dtool_BulletWheel_set_suspension_relative_velocity_707, METH_O, (const char *)Dtool_BulletWheel_set_suspension_relative_velocity_707_comment},
  {"set_clipped_inv_connection_point_cs", &Dtool_BulletWheel_set_clipped_inv_connection_point_cs_708, METH_O, (const char *)Dtool_BulletWheel_set_clipped_inv_connection_point_cs_708_comment},
  {"setClippedInvConnectionPointCs", &Dtool_BulletWheel_set_clipped_inv_connection_point_cs_708, METH_O, (const char *)Dtool_BulletWheel_set_clipped_inv_connection_point_cs_708_comment},
  {"set_chassis_connection_point_cs", &Dtool_BulletWheel_set_chassis_connection_point_cs_709, METH_O, (const char *)Dtool_BulletWheel_set_chassis_connection_point_cs_709_comment},
  {"setChassisConnectionPointCs", &Dtool_BulletWheel_set_chassis_connection_point_cs_709, METH_O, (const char *)Dtool_BulletWheel_set_chassis_connection_point_cs_709_comment},
  {"set_wheel_direction_cs", &Dtool_BulletWheel_set_wheel_direction_cs_710, METH_O, (const char *)Dtool_BulletWheel_set_wheel_direction_cs_710_comment},
  {"setWheelDirectionCs", &Dtool_BulletWheel_set_wheel_direction_cs_710, METH_O, (const char *)Dtool_BulletWheel_set_wheel_direction_cs_710_comment},
  {"set_wheel_axle_cs", &Dtool_BulletWheel_set_wheel_axle_cs_711, METH_O, (const char *)Dtool_BulletWheel_set_wheel_axle_cs_711_comment},
  {"setWheelAxleCs", &Dtool_BulletWheel_set_wheel_axle_cs_711, METH_O, (const char *)Dtool_BulletWheel_set_wheel_axle_cs_711_comment},
  {"set_world_transform", &Dtool_BulletWheel_set_world_transform_712, METH_O, (const char *)Dtool_BulletWheel_set_world_transform_712_comment},
  {"setWorldTransform", &Dtool_BulletWheel_set_world_transform_712, METH_O, (const char *)Dtool_BulletWheel_set_world_transform_712_comment},
  {"set_front_wheel", &Dtool_BulletWheel_set_front_wheel_713, METH_O, (const char *)Dtool_BulletWheel_set_front_wheel_713_comment},
  {"setFrontWheel", &Dtool_BulletWheel_set_front_wheel_713, METH_O, (const char *)Dtool_BulletWheel_set_front_wheel_713_comment},
  {"set_node", &Dtool_BulletWheel_set_node_714, METH_O, (const char *)Dtool_BulletWheel_set_node_714_comment},
  {"setNode", &Dtool_BulletWheel_set_node_714, METH_O, (const char *)Dtool_BulletWheel_set_node_714_comment},
  {"get_suspension_rest_length", &Dtool_BulletWheel_get_suspension_rest_length_715, METH_NOARGS, (const char *)Dtool_BulletWheel_get_suspension_rest_length_715_comment},
  {"getSuspensionRestLength", &Dtool_BulletWheel_get_suspension_rest_length_715, METH_NOARGS, (const char *)Dtool_BulletWheel_get_suspension_rest_length_715_comment},
  {"get_suspension_stiffness", &Dtool_BulletWheel_get_suspension_stiffness_716, METH_NOARGS, (const char *)Dtool_BulletWheel_get_suspension_stiffness_716_comment},
  {"getSuspensionStiffness", &Dtool_BulletWheel_get_suspension_stiffness_716, METH_NOARGS, (const char *)Dtool_BulletWheel_get_suspension_stiffness_716_comment},
  {"get_max_suspension_travel_cm", &Dtool_BulletWheel_get_max_suspension_travel_cm_717, METH_NOARGS, (const char *)Dtool_BulletWheel_get_max_suspension_travel_cm_717_comment},
  {"getMaxSuspensionTravelCm", &Dtool_BulletWheel_get_max_suspension_travel_cm_717, METH_NOARGS, (const char *)Dtool_BulletWheel_get_max_suspension_travel_cm_717_comment},
  {"get_friction_slip", &Dtool_BulletWheel_get_friction_slip_718, METH_NOARGS, (const char *)Dtool_BulletWheel_get_friction_slip_718_comment},
  {"getFrictionSlip", &Dtool_BulletWheel_get_friction_slip_718, METH_NOARGS, (const char *)Dtool_BulletWheel_get_friction_slip_718_comment},
  {"get_max_suspension_force", &Dtool_BulletWheel_get_max_suspension_force_719, METH_NOARGS, (const char *)Dtool_BulletWheel_get_max_suspension_force_719_comment},
  {"getMaxSuspensionForce", &Dtool_BulletWheel_get_max_suspension_force_719, METH_NOARGS, (const char *)Dtool_BulletWheel_get_max_suspension_force_719_comment},
  {"get_wheels_damping_compression", &Dtool_BulletWheel_get_wheels_damping_compression_720, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheels_damping_compression_720_comment},
  {"getWheelsDampingCompression", &Dtool_BulletWheel_get_wheels_damping_compression_720, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheels_damping_compression_720_comment},
  {"get_wheels_damping_relaxation", &Dtool_BulletWheel_get_wheels_damping_relaxation_721, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheels_damping_relaxation_721_comment},
  {"getWheelsDampingRelaxation", &Dtool_BulletWheel_get_wheels_damping_relaxation_721, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheels_damping_relaxation_721_comment},
  {"get_roll_influence", &Dtool_BulletWheel_get_roll_influence_722, METH_NOARGS, (const char *)Dtool_BulletWheel_get_roll_influence_722_comment},
  {"getRollInfluence", &Dtool_BulletWheel_get_roll_influence_722, METH_NOARGS, (const char *)Dtool_BulletWheel_get_roll_influence_722_comment},
  {"get_wheel_radius", &Dtool_BulletWheel_get_wheel_radius_723, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheel_radius_723_comment},
  {"getWheelRadius", &Dtool_BulletWheel_get_wheel_radius_723, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheel_radius_723_comment},
  {"get_steering", &Dtool_BulletWheel_get_steering_724, METH_NOARGS, (const char *)Dtool_BulletWheel_get_steering_724_comment},
  {"getSteering", &Dtool_BulletWheel_get_steering_724, METH_NOARGS, (const char *)Dtool_BulletWheel_get_steering_724_comment},
  {"get_rotation", &Dtool_BulletWheel_get_rotation_725, METH_NOARGS, (const char *)Dtool_BulletWheel_get_rotation_725_comment},
  {"getRotation", &Dtool_BulletWheel_get_rotation_725, METH_NOARGS, (const char *)Dtool_BulletWheel_get_rotation_725_comment},
  {"get_delta_rotation", &Dtool_BulletWheel_get_delta_rotation_726, METH_NOARGS, (const char *)Dtool_BulletWheel_get_delta_rotation_726_comment},
  {"getDeltaRotation", &Dtool_BulletWheel_get_delta_rotation_726, METH_NOARGS, (const char *)Dtool_BulletWheel_get_delta_rotation_726_comment},
  {"get_engine_force", &Dtool_BulletWheel_get_engine_force_727, METH_NOARGS, (const char *)Dtool_BulletWheel_get_engine_force_727_comment},
  {"getEngineForce", &Dtool_BulletWheel_get_engine_force_727, METH_NOARGS, (const char *)Dtool_BulletWheel_get_engine_force_727_comment},
  {"get_brake", &Dtool_BulletWheel_get_brake_728, METH_NOARGS, (const char *)Dtool_BulletWheel_get_brake_728_comment},
  {"getBrake", &Dtool_BulletWheel_get_brake_728, METH_NOARGS, (const char *)Dtool_BulletWheel_get_brake_728_comment},
  {"get_skid_info", &Dtool_BulletWheel_get_skid_info_729, METH_NOARGS, (const char *)Dtool_BulletWheel_get_skid_info_729_comment},
  {"getSkidInfo", &Dtool_BulletWheel_get_skid_info_729, METH_NOARGS, (const char *)Dtool_BulletWheel_get_skid_info_729_comment},
  {"get_wheels_suspension_force", &Dtool_BulletWheel_get_wheels_suspension_force_730, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheels_suspension_force_730_comment},
  {"getWheelsSuspensionForce", &Dtool_BulletWheel_get_wheels_suspension_force_730, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheels_suspension_force_730_comment},
  {"get_suspension_relative_velocity", &Dtool_BulletWheel_get_suspension_relative_velocity_731, METH_NOARGS, (const char *)Dtool_BulletWheel_get_suspension_relative_velocity_731_comment},
  {"getSuspensionRelativeVelocity", &Dtool_BulletWheel_get_suspension_relative_velocity_731, METH_NOARGS, (const char *)Dtool_BulletWheel_get_suspension_relative_velocity_731_comment},
  {"get_clipped_inv_connection_point_cs", &Dtool_BulletWheel_get_clipped_inv_connection_point_cs_732, METH_NOARGS, (const char *)Dtool_BulletWheel_get_clipped_inv_connection_point_cs_732_comment},
  {"getClippedInvConnectionPointCs", &Dtool_BulletWheel_get_clipped_inv_connection_point_cs_732, METH_NOARGS, (const char *)Dtool_BulletWheel_get_clipped_inv_connection_point_cs_732_comment},
  {"get_chassis_connection_point_cs", &Dtool_BulletWheel_get_chassis_connection_point_cs_733, METH_NOARGS, (const char *)Dtool_BulletWheel_get_chassis_connection_point_cs_733_comment},
  {"getChassisConnectionPointCs", &Dtool_BulletWheel_get_chassis_connection_point_cs_733, METH_NOARGS, (const char *)Dtool_BulletWheel_get_chassis_connection_point_cs_733_comment},
  {"get_wheel_direction_cs", &Dtool_BulletWheel_get_wheel_direction_cs_734, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheel_direction_cs_734_comment},
  {"getWheelDirectionCs", &Dtool_BulletWheel_get_wheel_direction_cs_734, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheel_direction_cs_734_comment},
  {"get_wheel_axle_cs", &Dtool_BulletWheel_get_wheel_axle_cs_735, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheel_axle_cs_735_comment},
  {"getWheelAxleCs", &Dtool_BulletWheel_get_wheel_axle_cs_735, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheel_axle_cs_735_comment},
  {"get_world_transform", &Dtool_BulletWheel_get_world_transform_736, METH_NOARGS, (const char *)Dtool_BulletWheel_get_world_transform_736_comment},
  {"getWorldTransform", &Dtool_BulletWheel_get_world_transform_736, METH_NOARGS, (const char *)Dtool_BulletWheel_get_world_transform_736_comment},
  {"is_front_wheel", &Dtool_BulletWheel_is_front_wheel_737, METH_NOARGS, (const char *)Dtool_BulletWheel_is_front_wheel_737_comment},
  {"isFrontWheel", &Dtool_BulletWheel_is_front_wheel_737, METH_NOARGS, (const char *)Dtool_BulletWheel_is_front_wheel_737_comment},
  {"get_node", &Dtool_BulletWheel_get_node_738, METH_NOARGS, (const char *)Dtool_BulletWheel_get_node_738_comment},
  {"getNode", &Dtool_BulletWheel_get_node_738, METH_NOARGS, (const char *)Dtool_BulletWheel_get_node_738_comment},
  {"get_raycast_info", &Dtool_BulletWheel_get_raycast_info_739, METH_NOARGS, (const char *)Dtool_BulletWheel_get_raycast_info_739_comment},
  {"getRaycastInfo", &Dtool_BulletWheel_get_raycast_info_739, METH_NOARGS, (const char *)Dtool_BulletWheel_get_raycast_info_739_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletWheel[] = {
  {(char *)"raycast_info", &Dtool_BulletWheel_raycast_info_Getter, nullptr, nullptr, nullptr},
  {(char *)"suspension_rest_length", &Dtool_BulletWheel_suspension_rest_length_Getter, nullptr, nullptr, nullptr},
  {(char *)"suspension_stiffness", &Dtool_BulletWheel_suspension_stiffness_Getter, &Dtool_BulletWheel_suspension_stiffness_Setter, nullptr, nullptr},
  {(char *)"max_suspension_travel_cm", &Dtool_BulletWheel_max_suspension_travel_cm_Getter, &Dtool_BulletWheel_max_suspension_travel_cm_Setter, nullptr, nullptr},
  {(char *)"friction_slip", &Dtool_BulletWheel_friction_slip_Getter, &Dtool_BulletWheel_friction_slip_Setter, nullptr, nullptr},
  {(char *)"max_suspension_force", &Dtool_BulletWheel_max_suspension_force_Getter, &Dtool_BulletWheel_max_suspension_force_Setter, nullptr, nullptr},
  {(char *)"wheels_damping_compression", &Dtool_BulletWheel_wheels_damping_compression_Getter, &Dtool_BulletWheel_wheels_damping_compression_Setter, nullptr, nullptr},
  {(char *)"wheels_damping_relaxation", &Dtool_BulletWheel_wheels_damping_relaxation_Getter, &Dtool_BulletWheel_wheels_damping_relaxation_Setter, nullptr, nullptr},
  {(char *)"roll_influence", &Dtool_BulletWheel_roll_influence_Getter, &Dtool_BulletWheel_roll_influence_Setter, nullptr, nullptr},
  {(char *)"wheel_radius", &Dtool_BulletWheel_wheel_radius_Getter, &Dtool_BulletWheel_wheel_radius_Setter, nullptr, nullptr},
  {(char *)"steering", &Dtool_BulletWheel_steering_Getter, &Dtool_BulletWheel_steering_Setter, nullptr, nullptr},
  {(char *)"rotation", &Dtool_BulletWheel_rotation_Getter, &Dtool_BulletWheel_rotation_Setter, nullptr, nullptr},
  {(char *)"delta_rotation", &Dtool_BulletWheel_delta_rotation_Getter, &Dtool_BulletWheel_delta_rotation_Setter, nullptr, nullptr},
  {(char *)"engine_force", &Dtool_BulletWheel_engine_force_Getter, &Dtool_BulletWheel_engine_force_Setter, nullptr, nullptr},
  {(char *)"brake", &Dtool_BulletWheel_brake_Getter, &Dtool_BulletWheel_brake_Setter, nullptr, nullptr},
  {(char *)"skid_info", &Dtool_BulletWheel_skid_info_Getter, &Dtool_BulletWheel_skid_info_Setter, nullptr, nullptr},
  {(char *)"wheels_suspension_force", &Dtool_BulletWheel_wheels_suspension_force_Getter, &Dtool_BulletWheel_wheels_suspension_force_Setter, nullptr, nullptr},
  {(char *)"suspension_relative_velocity", &Dtool_BulletWheel_suspension_relative_velocity_Getter, &Dtool_BulletWheel_suspension_relative_velocity_Setter, nullptr, nullptr},
  {(char *)"clipped_inv_connection_point_cs", &Dtool_BulletWheel_clipped_inv_connection_point_cs_Getter, &Dtool_BulletWheel_clipped_inv_connection_point_cs_Setter, nullptr, nullptr},
  {(char *)"chassis_connection_point_cs", &Dtool_BulletWheel_chassis_connection_point_cs_Getter, &Dtool_BulletWheel_chassis_connection_point_cs_Setter, nullptr, nullptr},
  {(char *)"wheel_direction_cs", &Dtool_BulletWheel_wheel_direction_cs_Getter, &Dtool_BulletWheel_wheel_direction_cs_Setter, nullptr, nullptr},
  {(char *)"wheel_axle_cs", &Dtool_BulletWheel_wheel_axle_cs_Getter, &Dtool_BulletWheel_wheel_axle_cs_Setter, nullptr, nullptr},
  {(char *)"world_transform", &Dtool_BulletWheel_world_transform_Getter, &Dtool_BulletWheel_world_transform_Setter, nullptr, nullptr},
  {(char *)"front_wheel", &Dtool_BulletWheel_front_wheel_Getter, &Dtool_BulletWheel_front_wheel_Setter, nullptr, nullptr},
  {(char *)"node", &Dtool_BulletWheel_node_Getter, &Dtool_BulletWheel_node_Setter, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletWheel = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletWheel = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletWheel",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletWheel,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletWheel,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * One wheel of a BulletVehicle.  Instances should not be created directly but\n"
    " * using the factory method BulletVehicle::create_wheel().\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletWheel,
    nullptr, // tp_members
    Dtool_Properties_BulletWheel,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletWheel,
    PyType_GenericAlloc,
    Dtool_new_BulletWheel,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletWheel,
  Dtool_UpcastInterface_BulletWheel,
  Dtool_DowncastInterface_BulletWheel,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletWheel(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletWheel._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletWheel._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletWheel) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletWheel)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletWheel);
  }
}

/**
 * Python method tables for BulletWheelRaycastInfo (BulletWheelRaycastInfo)
 */
static PyMethodDef Dtool_Methods_BulletWheelRaycastInfo[] = {
  {"is_in_contact", &Dtool_BulletWheelRaycastInfo_is_in_contact_743, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_is_in_contact_743_comment},
  {"isInContact", &Dtool_BulletWheelRaycastInfo_is_in_contact_743, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_is_in_contact_743_comment},
  {"get_suspension_length", &Dtool_BulletWheelRaycastInfo_get_suspension_length_744, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_suspension_length_744_comment},
  {"getSuspensionLength", &Dtool_BulletWheelRaycastInfo_get_suspension_length_744, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_suspension_length_744_comment},
  {"get_contact_normal_ws", &Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_745, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_745_comment},
  {"getContactNormalWs", &Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_745, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_745_comment},
  {"get_wheel_direction_ws", &Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_746, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_746_comment},
  {"getWheelDirectionWs", &Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_746, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_746_comment},
  {"get_wheel_axle_ws", &Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_747, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_747_comment},
  {"getWheelAxleWs", &Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_747, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_747_comment},
  {"get_contact_point_ws", &Dtool_BulletWheelRaycastInfo_get_contact_point_ws_748, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_contact_point_ws_748_comment},
  {"getContactPointWs", &Dtool_BulletWheelRaycastInfo_get_contact_point_ws_748, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_contact_point_ws_748_comment},
  {"get_hard_point_ws", &Dtool_BulletWheelRaycastInfo_get_hard_point_ws_749, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_hard_point_ws_749_comment},
  {"getHardPointWs", &Dtool_BulletWheelRaycastInfo_get_hard_point_ws_749, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_hard_point_ws_749_comment},
  {"get_ground_object", &Dtool_BulletWheelRaycastInfo_get_ground_object_750, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_ground_object_750_comment},
  {"getGroundObject", &Dtool_BulletWheelRaycastInfo_get_ground_object_750, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_ground_object_750_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletWheelRaycastInfo[] = {
  {(char *)"in_contact", &Dtool_BulletWheelRaycastInfo_in_contact_Getter, nullptr, nullptr, nullptr},
  {(char *)"suspension_length", &Dtool_BulletWheelRaycastInfo_suspension_length_Getter, nullptr, nullptr, nullptr},
  {(char *)"contact_normal_ws", &Dtool_BulletWheelRaycastInfo_contact_normal_ws_Getter, nullptr, nullptr, nullptr},
  {(char *)"wheel_direction_ws", &Dtool_BulletWheelRaycastInfo_wheel_direction_ws_Getter, nullptr, nullptr, nullptr},
  {(char *)"wheel_axle_ws", &Dtool_BulletWheelRaycastInfo_wheel_axle_ws_Getter, nullptr, nullptr, nullptr},
  {(char *)"contact_point_ws", &Dtool_BulletWheelRaycastInfo_contact_point_ws_Getter, nullptr, nullptr, nullptr},
  {(char *)"hard_point_ws", &Dtool_BulletWheelRaycastInfo_hard_point_ws_Getter, nullptr, nullptr, nullptr},
  {(char *)"ground_object", &Dtool_BulletWheelRaycastInfo_ground_object_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletWheelRaycastInfo = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletWheelRaycastInfo = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletWheelRaycastInfo",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletWheelRaycastInfo,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletWheelRaycastInfo,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletWheelRaycastInfo,
    nullptr, // tp_members
    Dtool_Properties_BulletWheelRaycastInfo,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletWheelRaycastInfo,
    PyType_GenericAlloc,
    Dtool_new_BulletWheelRaycastInfo,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletWheelRaycastInfo,
  Dtool_UpcastInterface_BulletWheelRaycastInfo,
  Dtool_DowncastInterface_BulletWheelRaycastInfo,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletWheelRaycastInfo(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletWheelRaycastInfo._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletWheelRaycastInfo._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletWheelRaycastInfo) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletWheelRaycastInfo)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletWheelRaycastInfo);
  }
}

/**
 * Python method tables for BulletWorld (BulletWorld)
 */
static PyMethodDef Dtool_Methods_BulletWorld[] = {
  {"set_gravity", (PyCFunction) &Dtool_BulletWorld_set_gravity_789, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_set_gravity_789_comment},
  {"setGravity", (PyCFunction) &Dtool_BulletWorld_set_gravity_789, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_set_gravity_789_comment},
  {"get_gravity", &Dtool_BulletWorld_get_gravity_790, METH_NOARGS, (const char *)Dtool_BulletWorld_get_gravity_790_comment},
  {"getGravity", &Dtool_BulletWorld_get_gravity_790, METH_NOARGS, (const char *)Dtool_BulletWorld_get_gravity_790_comment},
  {"do_physics", (PyCFunction) &Dtool_BulletWorld_do_physics_791, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_do_physics_791_comment},
  {"doPhysics", (PyCFunction) &Dtool_BulletWorld_do_physics_791, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_do_physics_791_comment},
  {"get_world_info", &Dtool_BulletWorld_get_world_info_792, METH_NOARGS, (const char *)Dtool_BulletWorld_get_world_info_792_comment},
  {"getWorldInfo", &Dtool_BulletWorld_get_world_info_792, METH_NOARGS, (const char *)Dtool_BulletWorld_get_world_info_792_comment},
  {"set_debug_node", &Dtool_BulletWorld_set_debug_node_793, METH_O, (const char *)Dtool_BulletWorld_set_debug_node_793_comment},
  {"setDebugNode", &Dtool_BulletWorld_set_debug_node_793, METH_O, (const char *)Dtool_BulletWorld_set_debug_node_793_comment},
  {"clear_debug_node", &Dtool_BulletWorld_clear_debug_node_794, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_debug_node_794_comment},
  {"clearDebugNode", &Dtool_BulletWorld_clear_debug_node_794, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_debug_node_794_comment},
  {"get_debug_node", &Dtool_BulletWorld_get_debug_node_795, METH_NOARGS, (const char *)Dtool_BulletWorld_get_debug_node_795_comment},
  {"getDebugNode", &Dtool_BulletWorld_get_debug_node_795, METH_NOARGS, (const char *)Dtool_BulletWorld_get_debug_node_795_comment},
  {"has_debug_node", &Dtool_BulletWorld_has_debug_node_796, METH_NOARGS, (const char *)Dtool_BulletWorld_has_debug_node_796_comment},
  {"hasDebugNode", &Dtool_BulletWorld_has_debug_node_796, METH_NOARGS, (const char *)Dtool_BulletWorld_has_debug_node_796_comment},
  {"attach", &Dtool_BulletWorld_attach_797, METH_O, (const char *)Dtool_BulletWorld_attach_797_comment},
  {"remove", &Dtool_BulletWorld_remove_798, METH_O, (const char *)Dtool_BulletWorld_remove_798_comment},
  {"attach_constraint", (PyCFunction) &Dtool_BulletWorld_attach_constraint_799, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_attach_constraint_799_comment},
  {"attachConstraint", (PyCFunction) &Dtool_BulletWorld_attach_constraint_799, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_attach_constraint_799_comment},
  {"get_num_ghosts", &Dtool_BulletWorld_get_num_ghosts_800, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_ghosts_800_comment},
  {"getNumGhosts", &Dtool_BulletWorld_get_num_ghosts_800, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_ghosts_800_comment},
  {"get_ghost", &Dtool_BulletWorld_get_ghost_801, METH_O, (const char *)Dtool_BulletWorld_get_ghost_801_comment},
  {"getGhost", &Dtool_BulletWorld_get_ghost_801, METH_O, (const char *)Dtool_BulletWorld_get_ghost_801_comment},
  {"get_num_rigid_bodies", &Dtool_BulletWorld_get_num_rigid_bodies_803, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_rigid_bodies_803_comment},
  {"getNumRigidBodies", &Dtool_BulletWorld_get_num_rigid_bodies_803, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_rigid_bodies_803_comment},
  {"get_rigid_body", &Dtool_BulletWorld_get_rigid_body_804, METH_O, (const char *)Dtool_BulletWorld_get_rigid_body_804_comment},
  {"getRigidBody", &Dtool_BulletWorld_get_rigid_body_804, METH_O, (const char *)Dtool_BulletWorld_get_rigid_body_804_comment},
  {"get_num_soft_bodies", &Dtool_BulletWorld_get_num_soft_bodies_806, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_soft_bodies_806_comment},
  {"getNumSoftBodies", &Dtool_BulletWorld_get_num_soft_bodies_806, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_soft_bodies_806_comment},
  {"get_soft_body", &Dtool_BulletWorld_get_soft_body_807, METH_O, (const char *)Dtool_BulletWorld_get_soft_body_807_comment},
  {"getSoftBody", &Dtool_BulletWorld_get_soft_body_807, METH_O, (const char *)Dtool_BulletWorld_get_soft_body_807_comment},
  {"get_num_characters", &Dtool_BulletWorld_get_num_characters_809, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_characters_809_comment},
  {"getNumCharacters", &Dtool_BulletWorld_get_num_characters_809, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_characters_809_comment},
  {"get_character", &Dtool_BulletWorld_get_character_810, METH_O, (const char *)Dtool_BulletWorld_get_character_810_comment},
  {"getCharacter", &Dtool_BulletWorld_get_character_810, METH_O, (const char *)Dtool_BulletWorld_get_character_810_comment},
  {"get_num_vehicles", &Dtool_BulletWorld_get_num_vehicles_812, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_vehicles_812_comment},
  {"getNumVehicles", &Dtool_BulletWorld_get_num_vehicles_812, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_vehicles_812_comment},
  {"get_vehicle", &Dtool_BulletWorld_get_vehicle_813, METH_O, (const char *)Dtool_BulletWorld_get_vehicle_813_comment},
  {"getVehicle", &Dtool_BulletWorld_get_vehicle_813, METH_O, (const char *)Dtool_BulletWorld_get_vehicle_813_comment},
  {"get_num_constraints", &Dtool_BulletWorld_get_num_constraints_815, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_constraints_815_comment},
  {"getNumConstraints", &Dtool_BulletWorld_get_num_constraints_815, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_constraints_815_comment},
  {"get_constraint", &Dtool_BulletWorld_get_constraint_816, METH_O, (const char *)Dtool_BulletWorld_get_constraint_816_comment},
  {"getConstraint", &Dtool_BulletWorld_get_constraint_816, METH_O, (const char *)Dtool_BulletWorld_get_constraint_816_comment},
  {"ray_test_closest", (PyCFunction) &Dtool_BulletWorld_ray_test_closest_818, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_ray_test_closest_818_comment},
  {"rayTestClosest", (PyCFunction) &Dtool_BulletWorld_ray_test_closest_818, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_ray_test_closest_818_comment},
  {"ray_test_all", (PyCFunction) &Dtool_BulletWorld_ray_test_all_819, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_ray_test_all_819_comment},
  {"rayTestAll", (PyCFunction) &Dtool_BulletWorld_ray_test_all_819, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_ray_test_all_819_comment},
  {"sweep_test_closest", (PyCFunction) &Dtool_BulletWorld_sweep_test_closest_820, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_sweep_test_closest_820_comment},
  {"sweepTestClosest", (PyCFunction) &Dtool_BulletWorld_sweep_test_closest_820, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_sweep_test_closest_820_comment},
  {"contact_test", (PyCFunction) &Dtool_BulletWorld_contact_test_821, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_contact_test_821_comment},
  {"contactTest", (PyCFunction) &Dtool_BulletWorld_contact_test_821, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_contact_test_821_comment},
  {"contact_test_pair", (PyCFunction) &Dtool_BulletWorld_contact_test_pair_822, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_contact_test_pair_822_comment},
  {"contactTestPair", (PyCFunction) &Dtool_BulletWorld_contact_test_pair_822, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_contact_test_pair_822_comment},
  {"filter_test", (PyCFunction) &Dtool_BulletWorld_filter_test_823, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_filter_test_823_comment},
  {"filterTest", (PyCFunction) &Dtool_BulletWorld_filter_test_823, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_filter_test_823_comment},
  {"get_num_manifolds", &Dtool_BulletWorld_get_num_manifolds_824, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_manifolds_824_comment},
  {"getNumManifolds", &Dtool_BulletWorld_get_num_manifolds_824, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_manifolds_824_comment},
  {"get_manifold", &Dtool_BulletWorld_get_manifold_825, METH_O, (const char *)Dtool_BulletWorld_get_manifold_825_comment},
  {"getManifold", &Dtool_BulletWorld_get_manifold_825, METH_O, (const char *)Dtool_BulletWorld_get_manifold_825_comment},
  {"set_group_collision_flag", (PyCFunction) &Dtool_BulletWorld_set_group_collision_flag_827, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_set_group_collision_flag_827_comment},
  {"setGroupCollisionFlag", (PyCFunction) &Dtool_BulletWorld_set_group_collision_flag_827, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_set_group_collision_flag_827_comment},
  {"get_group_collision_flag", (PyCFunction) &Dtool_BulletWorld_get_group_collision_flag_828, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_get_group_collision_flag_828_comment},
  {"getGroupCollisionFlag", (PyCFunction) &Dtool_BulletWorld_get_group_collision_flag_828, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_get_group_collision_flag_828_comment},
  {"set_force_update_all_aabbs", &Dtool_BulletWorld_set_force_update_all_aabbs_829, METH_O, (const char *)Dtool_BulletWorld_set_force_update_all_aabbs_829_comment},
  {"setForceUpdateAllAabbs", &Dtool_BulletWorld_set_force_update_all_aabbs_829, METH_O, (const char *)Dtool_BulletWorld_set_force_update_all_aabbs_829_comment},
  {"get_force_update_all_aabbs", &Dtool_BulletWorld_get_force_update_all_aabbs_830, METH_NOARGS, (const char *)Dtool_BulletWorld_get_force_update_all_aabbs_830_comment},
  {"getForceUpdateAllAabbs", &Dtool_BulletWorld_get_force_update_all_aabbs_830, METH_NOARGS, (const char *)Dtool_BulletWorld_get_force_update_all_aabbs_830_comment},
  {"set_contact_added_callback", &Dtool_BulletWorld_set_contact_added_callback_831, METH_O, (const char *)Dtool_BulletWorld_set_contact_added_callback_831_comment},
  {"setContactAddedCallback", &Dtool_BulletWorld_set_contact_added_callback_831, METH_O, (const char *)Dtool_BulletWorld_set_contact_added_callback_831_comment},
  {"clear_contact_added_callback", &Dtool_BulletWorld_clear_contact_added_callback_832, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_contact_added_callback_832_comment},
  {"clearContactAddedCallback", &Dtool_BulletWorld_clear_contact_added_callback_832, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_contact_added_callback_832_comment},
  {"set_tick_callback", (PyCFunction) &Dtool_BulletWorld_set_tick_callback_833, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_set_tick_callback_833_comment},
  {"setTickCallback", (PyCFunction) &Dtool_BulletWorld_set_tick_callback_833, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_set_tick_callback_833_comment},
  {"clear_tick_callback", &Dtool_BulletWorld_clear_tick_callback_834, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_tick_callback_834_comment},
  {"clearTickCallback", &Dtool_BulletWorld_clear_tick_callback_834, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_tick_callback_834_comment},
  {"set_filter_callback", &Dtool_BulletWorld_set_filter_callback_835, METH_O, (const char *)Dtool_BulletWorld_set_filter_callback_835_comment},
  {"setFilterCallback", &Dtool_BulletWorld_set_filter_callback_835, METH_O, (const char *)Dtool_BulletWorld_set_filter_callback_835_comment},
  {"clear_filter_callback", &Dtool_BulletWorld_clear_filter_callback_836, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_filter_callback_836_comment},
  {"clearFilterCallback", &Dtool_BulletWorld_clear_filter_callback_836, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_filter_callback_836_comment},
  {"attach_ghost", &Dtool_BulletWorld_attach_ghost_874, METH_O, (const char *)Dtool_BulletWorld_attach_ghost_874_comment},
  {"attachGhost", &Dtool_BulletWorld_attach_ghost_874, METH_O, (const char *)Dtool_BulletWorld_attach_ghost_874_comment},
  {"remove_ghost", &Dtool_BulletWorld_remove_ghost_875, METH_O, (const char *)Dtool_BulletWorld_remove_ghost_875_comment},
  {"removeGhost", &Dtool_BulletWorld_remove_ghost_875, METH_O, (const char *)Dtool_BulletWorld_remove_ghost_875_comment},
  {"attach_rigid_body", &Dtool_BulletWorld_attach_rigid_body_876, METH_O, (const char *)Dtool_BulletWorld_attach_rigid_body_876_comment},
  {"attachRigidBody", &Dtool_BulletWorld_attach_rigid_body_876, METH_O, (const char *)Dtool_BulletWorld_attach_rigid_body_876_comment},
  {"remove_rigid_body", &Dtool_BulletWorld_remove_rigid_body_877, METH_O, (const char *)Dtool_BulletWorld_remove_rigid_body_877_comment},
  {"removeRigidBody", &Dtool_BulletWorld_remove_rigid_body_877, METH_O, (const char *)Dtool_BulletWorld_remove_rigid_body_877_comment},
  {"attach_soft_body", &Dtool_BulletWorld_attach_soft_body_878, METH_O, (const char *)Dtool_BulletWorld_attach_soft_body_878_comment},
  {"attachSoftBody", &Dtool_BulletWorld_attach_soft_body_878, METH_O, (const char *)Dtool_BulletWorld_attach_soft_body_878_comment},
  {"remove_soft_body", &Dtool_BulletWorld_remove_soft_body_879, METH_O, (const char *)Dtool_BulletWorld_remove_soft_body_879_comment},
  {"removeSoftBody", &Dtool_BulletWorld_remove_soft_body_879, METH_O, (const char *)Dtool_BulletWorld_remove_soft_body_879_comment},
  {"attach_character", &Dtool_BulletWorld_attach_character_880, METH_O, (const char *)Dtool_BulletWorld_attach_character_880_comment},
  {"attachCharacter", &Dtool_BulletWorld_attach_character_880, METH_O, (const char *)Dtool_BulletWorld_attach_character_880_comment},
  {"remove_character", &Dtool_BulletWorld_remove_character_881, METH_O, (const char *)Dtool_BulletWorld_remove_character_881_comment},
  {"removeCharacter", &Dtool_BulletWorld_remove_character_881, METH_O, (const char *)Dtool_BulletWorld_remove_character_881_comment},
  {"attach_vehicle", &Dtool_BulletWorld_attach_vehicle_882, METH_O, (const char *)Dtool_BulletWorld_attach_vehicle_882_comment},
  {"attachVehicle", &Dtool_BulletWorld_attach_vehicle_882, METH_O, (const char *)Dtool_BulletWorld_attach_vehicle_882_comment},
  {"remove_vehicle", &Dtool_BulletWorld_remove_vehicle_883, METH_O, (const char *)Dtool_BulletWorld_remove_vehicle_883_comment},
  {"removeVehicle", &Dtool_BulletWorld_remove_vehicle_883, METH_O, (const char *)Dtool_BulletWorld_remove_vehicle_883_comment},
  {"remove_constraint", &Dtool_BulletWorld_remove_constraint_884, METH_O, (const char *)Dtool_BulletWorld_remove_constraint_884_comment},
  {"removeConstraint", &Dtool_BulletWorld_remove_constraint_884, METH_O, (const char *)Dtool_BulletWorld_remove_constraint_884_comment},
  {"get_class_type", &Dtool_BulletWorld_get_class_type_885, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletWorld_get_class_type_885_comment},
  {"getClassType", &Dtool_BulletWorld_get_class_type_885, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletWorld_get_class_type_885_comment},
  {"get_ghosts", (PyCFunction) &MakeSeq_BulletWorld_get_ghosts, METH_NOARGS, nullptr},
  { "getGhosts", (PyCFunction) &MakeSeq_BulletWorld_get_ghosts, METH_NOARGS, nullptr},
  {"get_rigid_bodies", (PyCFunction) &MakeSeq_BulletWorld_get_rigid_bodies, METH_NOARGS, nullptr},
  { "getRigidBodies", (PyCFunction) &MakeSeq_BulletWorld_get_rigid_bodies, METH_NOARGS, nullptr},
  {"get_soft_bodies", (PyCFunction) &MakeSeq_BulletWorld_get_soft_bodies, METH_NOARGS, nullptr},
  { "getSoftBodies", (PyCFunction) &MakeSeq_BulletWorld_get_soft_bodies, METH_NOARGS, nullptr},
  {"get_characters", (PyCFunction) &MakeSeq_BulletWorld_get_characters, METH_NOARGS, nullptr},
  { "getCharacters", (PyCFunction) &MakeSeq_BulletWorld_get_characters, METH_NOARGS, nullptr},
  {"get_vehicles", (PyCFunction) &MakeSeq_BulletWorld_get_vehicles, METH_NOARGS, nullptr},
  { "getVehicles", (PyCFunction) &MakeSeq_BulletWorld_get_vehicles, METH_NOARGS, nullptr},
  {"get_constraints", (PyCFunction) &MakeSeq_BulletWorld_get_constraints, METH_NOARGS, nullptr},
  { "getConstraints", (PyCFunction) &MakeSeq_BulletWorld_get_constraints, METH_NOARGS, nullptr},
  {"get_manifolds", (PyCFunction) &MakeSeq_BulletWorld_get_manifolds, METH_NOARGS, nullptr},
  { "getManifolds", (PyCFunction) &MakeSeq_BulletWorld_get_manifolds, METH_NOARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletWorld[] = {
  {(char *)"gravity", &Dtool_BulletWorld_gravity_Getter, &Dtool_BulletWorld_gravity_Setter, nullptr, nullptr},
  {(char *)"world_info", &Dtool_BulletWorld_world_info_Getter, nullptr, nullptr, nullptr},
  {(char *)"debug_node", &Dtool_BulletWorld_debug_node_Getter, &Dtool_BulletWorld_debug_node_Setter, nullptr, nullptr},
  {(char *)"ghosts", &Dtool_BulletWorld_ghosts_Getter, nullptr, nullptr, nullptr},
  {(char *)"rigid_bodies", &Dtool_BulletWorld_rigid_bodies_Getter, nullptr, nullptr, nullptr},
  {(char *)"soft_bodies", &Dtool_BulletWorld_soft_bodies_Getter, nullptr, nullptr, nullptr},
  {(char *)"characters", &Dtool_BulletWorld_characters_Getter, nullptr, nullptr, nullptr},
  {(char *)"vehicles", &Dtool_BulletWorld_vehicles_Getter, nullptr, nullptr, nullptr},
  {(char *)"constraints", &Dtool_BulletWorld_constraints_Getter, nullptr, nullptr, nullptr},
  {(char *)"manifolds", &Dtool_BulletWorld_manifolds_Getter, nullptr, nullptr, nullptr},
  {(char *)"force_update_all_aabbs", &Dtool_BulletWorld_force_update_all_aabbs_Getter, &Dtool_BulletWorld_force_update_all_aabbs_Setter, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletWorld = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletWorld = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletWorld = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletWorld = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletWorld = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletWorld = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletWorld",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletWorld,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletWorld,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletWorld,
    &Dtool_SequenceMethods_BulletWorld,
    &Dtool_MappingMethods_BulletWorld,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletWorld,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletWorld,
    nullptr, // tp_members
    Dtool_Properties_BulletWorld,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletWorld,
    PyType_GenericAlloc,
    Dtool_new_BulletWorld,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletWorld,
  Dtool_UpcastInterface_BulletWorld,
  Dtool_DowncastInterface_BulletWorld,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletWorld(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_TypedReferenceCount != nullptr);
    assert(Dtool_Ptr_TypedReferenceCount->_Dtool_ModuleClassInit != nullptr);
    Dtool_Ptr_TypedReferenceCount->_Dtool_ModuleClassInit(nullptr);
    Dtool_BulletWorld._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_TypedReferenceCount);
    Dtool_BulletWorld._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = _PyDict_NewPresized(11);
    Dtool_BulletWorld._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    // enum BulletWorld::BroadphaseAlgorithm;
    PyDict_SetItemString(dict, "BA_sweep_and_prune", Dtool_WrapValue(BulletWorld::BA_sweep_and_prune));
    PyDict_SetItemString(dict, "BASweepAndPrune", Dtool_WrapValue(BulletWorld::BA_sweep_and_prune));
    PyDict_SetItemString(dict, "BA_dynamic_aabb_tree", Dtool_WrapValue(BulletWorld::BA_dynamic_aabb_tree));
    PyDict_SetItemString(dict, "BADynamicAabbTree", Dtool_WrapValue(BulletWorld::BA_dynamic_aabb_tree));
    // enum BulletWorld::FilterAlgorithm;
    PyDict_SetItemString(dict, "FA_mask", Dtool_WrapValue(BulletWorld::FA_mask));
    PyDict_SetItemString(dict, "FAMask", Dtool_WrapValue(BulletWorld::FA_mask));
    PyDict_SetItemString(dict, "FA_groups_mask", Dtool_WrapValue(BulletWorld::FA_groups_mask));
    PyDict_SetItemString(dict, "FAGroupsMask", Dtool_WrapValue(BulletWorld::FA_groups_mask));
    PyDict_SetItemString(dict, "FA_callback", Dtool_WrapValue(BulletWorld::FA_callback));
    PyDict_SetItemString(dict, "FACallback", Dtool_WrapValue(BulletWorld::FA_callback));
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletWorld) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletWorld)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletWorld);
  }
}

/**
 * Python method tables for BulletPersistentManifold (BulletPersistentManifold)
 */
static PyMethodDef Dtool_Methods_BulletPersistentManifold[] = {
  {"get_node0", &Dtool_BulletPersistentManifold_get_node0_858, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_node0_858_comment},
  {"getNode0", &Dtool_BulletPersistentManifold_get_node0_858, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_node0_858_comment},
  {"get_node1", &Dtool_BulletPersistentManifold_get_node1_859, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_node1_859_comment},
  {"getNode1", &Dtool_BulletPersistentManifold_get_node1_859, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_node1_859_comment},
  {"get_num_manifold_points", &Dtool_BulletPersistentManifold_get_num_manifold_points_860, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_num_manifold_points_860_comment},
  {"getNumManifoldPoints", &Dtool_BulletPersistentManifold_get_num_manifold_points_860, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_num_manifold_points_860_comment},
  {"get_manifold_point", &Dtool_BulletPersistentManifold_get_manifold_point_861, METH_O, (const char *)Dtool_BulletPersistentManifold_get_manifold_point_861_comment},
  {"getManifoldPoint", &Dtool_BulletPersistentManifold_get_manifold_point_861, METH_O, (const char *)Dtool_BulletPersistentManifold_get_manifold_point_861_comment},
  {"get_contact_breaking_threshold", &Dtool_BulletPersistentManifold_get_contact_breaking_threshold_863, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_contact_breaking_threshold_863_comment},
  {"getContactBreakingThreshold", &Dtool_BulletPersistentManifold_get_contact_breaking_threshold_863, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_contact_breaking_threshold_863_comment},
  {"get_contact_processing_threshold", &Dtool_BulletPersistentManifold_get_contact_processing_threshold_864, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_contact_processing_threshold_864_comment},
  {"getContactProcessingThreshold", &Dtool_BulletPersistentManifold_get_contact_processing_threshold_864, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_contact_processing_threshold_864_comment},
  {"clear_manifold", &Dtool_BulletPersistentManifold_clear_manifold_865, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_clear_manifold_865_comment},
  {"clearManifold", &Dtool_BulletPersistentManifold_clear_manifold_865, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_clear_manifold_865_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {"get_manifold_points", (PyCFunction) &MakeSeq_BulletPersistentManifold_get_manifold_points, METH_NOARGS, nullptr},
  { "getManifoldPoints", (PyCFunction) &MakeSeq_BulletPersistentManifold_get_manifold_points, METH_NOARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletPersistentManifold[] = {
  {(char *)"node0", &Dtool_BulletPersistentManifold_node0_Getter, nullptr, nullptr, nullptr},
  {(char *)"node1", &Dtool_BulletPersistentManifold_node1_Getter, nullptr, nullptr, nullptr},
  {(char *)"manifold_points", &Dtool_BulletPersistentManifold_manifold_points_Getter, nullptr, nullptr, nullptr},
  {(char *)"contact_breaking_threshold", &Dtool_BulletPersistentManifold_contact_breaking_threshold_Getter, nullptr, nullptr, nullptr},
  {(char *)"contact_processing_threshold", &Dtool_BulletPersistentManifold_contact_processing_threshold_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletPersistentManifold = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletPersistentManifold = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletPersistentManifold",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletPersistentManifold,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletPersistentManifold,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletPersistentManifold,
    nullptr, // tp_members
    Dtool_Properties_BulletPersistentManifold,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletPersistentManifold,
    PyType_GenericAlloc,
    Dtool_new_BulletPersistentManifold,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletPersistentManifold,
  Dtool_UpcastInterface_BulletPersistentManifold,
  Dtool_DowncastInterface_BulletPersistentManifold,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletPersistentManifold(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletPersistentManifold._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletPersistentManifold._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletPersistentManifold) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletPersistentManifold)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletPersistentManifold);
  }
}

/**
 * Python method tables for BulletConvexHullShape (BulletConvexHullShape)
 */
static PyMethodDef Dtool_Methods_BulletConvexHullShape[] = {
  {"add_point", &Dtool_BulletConvexHullShape_add_point_888, METH_O, (const char *)Dtool_BulletConvexHullShape_add_point_888_comment},
  {"addPoint", &Dtool_BulletConvexHullShape_add_point_888, METH_O, (const char *)Dtool_BulletConvexHullShape_add_point_888_comment},
  {"add_array", &Dtool_BulletConvexHullShape_add_array_889, METH_O, (const char *)Dtool_BulletConvexHullShape_add_array_889_comment},
  {"addArray", &Dtool_BulletConvexHullShape_add_array_889, METH_O, (const char *)Dtool_BulletConvexHullShape_add_array_889_comment},
  {"add_geom", (PyCFunction) &Dtool_BulletConvexHullShape_add_geom_890, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConvexHullShape_add_geom_890_comment},
  {"addGeom", (PyCFunction) &Dtool_BulletConvexHullShape_add_geom_890, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConvexHullShape_add_geom_890_comment},
  {"get_class_type", &Dtool_BulletConvexHullShape_get_class_type_891, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConvexHullShape_get_class_type_891_comment},
  {"getClassType", &Dtool_BulletConvexHullShape_get_class_type_891, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConvexHullShape_get_class_type_891_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyNumberMethods Dtool_NumberMethods_BulletConvexHullShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletConvexHullShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletConvexHullShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletConvexHullShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletConvexHullShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletConvexHullShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletConvexHullShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletConvexHullShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletConvexHullShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletConvexHullShape,
    &Dtool_SequenceMethods_BulletConvexHullShape,
    &Dtool_MappingMethods_BulletConvexHullShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletConvexHullShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletConvexHullShape,
    nullptr, // tp_members
    nullptr, // tp_getset
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletConvexHullShape,
    PyType_GenericAlloc,
    Dtool_new_BulletConvexHullShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletConvexHullShape,
  Dtool_UpcastInterface_BulletConvexHullShape,
  Dtool_DowncastInterface_BulletConvexHullShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletConvexHullShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(nullptr);
    Dtool_BulletConvexHullShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    Dtool_BulletConvexHullShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletConvexHullShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletConvexHullShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletConvexHullShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletConvexHullShape);
  }
}

/**
 * Python method tables for BulletConvexPointCloudShape (BulletConvexPointCloudShape)
 */
static PyMethodDef Dtool_Methods_BulletConvexPointCloudShape[] = {
  {"get_num_points", &Dtool_BulletConvexPointCloudShape_get_num_points_894, METH_NOARGS, (const char *)Dtool_BulletConvexPointCloudShape_get_num_points_894_comment},
  {"getNumPoints", &Dtool_BulletConvexPointCloudShape_get_num_points_894, METH_NOARGS, (const char *)Dtool_BulletConvexPointCloudShape_get_num_points_894_comment},
  {"get_class_type", &Dtool_BulletConvexPointCloudShape_get_class_type_896, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConvexPointCloudShape_get_class_type_896_comment},
  {"getClassType", &Dtool_BulletConvexPointCloudShape_get_class_type_896, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConvexPointCloudShape_get_class_type_896_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletConvexPointCloudShape[] = {
  {(char *)"num_points", &Dtool_BulletConvexPointCloudShape_num_points_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletConvexPointCloudShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletConvexPointCloudShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletConvexPointCloudShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletConvexPointCloudShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletConvexPointCloudShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletConvexPointCloudShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletConvexPointCloudShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletConvexPointCloudShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletConvexPointCloudShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletConvexPointCloudShape,
    &Dtool_SequenceMethods_BulletConvexPointCloudShape,
    &Dtool_MappingMethods_BulletConvexPointCloudShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletConvexPointCloudShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletConvexPointCloudShape,
    nullptr, // tp_members
    Dtool_Properties_BulletConvexPointCloudShape,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletConvexPointCloudShape,
    PyType_GenericAlloc,
    Dtool_new_BulletConvexPointCloudShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletConvexPointCloudShape,
  Dtool_UpcastInterface_BulletConvexPointCloudShape,
  Dtool_DowncastInterface_BulletConvexPointCloudShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletConvexPointCloudShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(nullptr);
    Dtool_BulletConvexPointCloudShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    Dtool_BulletConvexPointCloudShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletConvexPointCloudShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletConvexPointCloudShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletConvexPointCloudShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletConvexPointCloudShape);
  }
}

/**
 * Python method tables for BulletCylinderShape (BulletCylinderShape)
 */
static PyMethodDef Dtool_Methods_BulletCylinderShape[] = {
  {"get_radius", &Dtool_BulletCylinderShape_get_radius_899, METH_NOARGS, (const char *)Dtool_BulletCylinderShape_get_radius_899_comment},
  {"getRadius", &Dtool_BulletCylinderShape_get_radius_899, METH_NOARGS, (const char *)Dtool_BulletCylinderShape_get_radius_899_comment},
  {"get_half_extents_without_margin", &Dtool_BulletCylinderShape_get_half_extents_without_margin_900, METH_NOARGS, (const char *)Dtool_BulletCylinderShape_get_half_extents_without_margin_900_comment},
  {"getHalfExtentsWithoutMargin", &Dtool_BulletCylinderShape_get_half_extents_without_margin_900, METH_NOARGS, (const char *)Dtool_BulletCylinderShape_get_half_extents_without_margin_900_comment},
  {"get_half_extents_with_margin", &Dtool_BulletCylinderShape_get_half_extents_with_margin_901, METH_NOARGS, (const char *)Dtool_BulletCylinderShape_get_half_extents_with_margin_901_comment},
  {"getHalfExtentsWithMargin", &Dtool_BulletCylinderShape_get_half_extents_with_margin_901, METH_NOARGS, (const char *)Dtool_BulletCylinderShape_get_half_extents_with_margin_901_comment},
  {"get_class_type", &Dtool_BulletCylinderShape_get_class_type_905, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletCylinderShape_get_class_type_905_comment},
  {"getClassType", &Dtool_BulletCylinderShape_get_class_type_905, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletCylinderShape_get_class_type_905_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletCylinderShape[] = {
  {(char *)"radius", &Dtool_BulletCylinderShape_radius_Getter, nullptr, nullptr, nullptr},
  {(char *)"half_extents_without_margin", &Dtool_BulletCylinderShape_half_extents_without_margin_Getter, nullptr, nullptr, nullptr},
  {(char *)"half_extents_with_margin", &Dtool_BulletCylinderShape_half_extents_with_margin_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletCylinderShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletCylinderShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletCylinderShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletCylinderShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletCylinderShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletCylinderShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletCylinderShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletCylinderShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletCylinderShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletCylinderShape,
    &Dtool_SequenceMethods_BulletCylinderShape,
    &Dtool_MappingMethods_BulletCylinderShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletCylinderShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletCylinderShape,
    nullptr, // tp_members
    Dtool_Properties_BulletCylinderShape,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletCylinderShape,
    PyType_GenericAlloc,
    Dtool_new_BulletCylinderShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletCylinderShape,
  Dtool_UpcastInterface_BulletCylinderShape,
  Dtool_DowncastInterface_BulletCylinderShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletCylinderShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(nullptr);
    Dtool_BulletCylinderShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    Dtool_BulletCylinderShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletCylinderShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletCylinderShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletCylinderShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletCylinderShape);
  }
}

/**
 * Python method tables for BulletFilterCallbackData (BulletFilterCallbackData)
 */
static PyMethodDef Dtool_Methods_BulletFilterCallbackData[] = {
  {"get_node_0", &Dtool_BulletFilterCallbackData_get_node_0_908, METH_NOARGS, (const char *)Dtool_BulletFilterCallbackData_get_node_0_908_comment},
  {"getNode0", &Dtool_BulletFilterCallbackData_get_node_0_908, METH_NOARGS, (const char *)Dtool_BulletFilterCallbackData_get_node_0_908_comment},
  {"get_node_1", &Dtool_BulletFilterCallbackData_get_node_1_909, METH_NOARGS, (const char *)Dtool_BulletFilterCallbackData_get_node_1_909_comment},
  {"getNode1", &Dtool_BulletFilterCallbackData_get_node_1_909, METH_NOARGS, (const char *)Dtool_BulletFilterCallbackData_get_node_1_909_comment},
  {"set_collide", &Dtool_BulletFilterCallbackData_set_collide_910, METH_O, (const char *)Dtool_BulletFilterCallbackData_set_collide_910_comment},
  {"setCollide", &Dtool_BulletFilterCallbackData_set_collide_910, METH_O, (const char *)Dtool_BulletFilterCallbackData_set_collide_910_comment},
  {"get_collide", &Dtool_BulletFilterCallbackData_get_collide_911, METH_NOARGS, (const char *)Dtool_BulletFilterCallbackData_get_collide_911_comment},
  {"getCollide", &Dtool_BulletFilterCallbackData_get_collide_911, METH_NOARGS, (const char *)Dtool_BulletFilterCallbackData_get_collide_911_comment},
  {"get_class_type", &Dtool_BulletFilterCallbackData_get_class_type_915, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletFilterCallbackData_get_class_type_915_comment},
  {"getClassType", &Dtool_BulletFilterCallbackData_get_class_type_915, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletFilterCallbackData_get_class_type_915_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletFilterCallbackData[] = {
  {(char *)"node_0", &Dtool_BulletFilterCallbackData_node_0_Getter, nullptr, nullptr, nullptr},
  {(char *)"node_1", &Dtool_BulletFilterCallbackData_node_1_Getter, nullptr, nullptr, nullptr},
  {(char *)"collide", &Dtool_BulletFilterCallbackData_collide_Getter, &Dtool_BulletFilterCallbackData_collide_Setter, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletFilterCallbackData = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletFilterCallbackData = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletFilterCallbackData = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletFilterCallbackData = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletFilterCallbackData = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletFilterCallbackData = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletFilterCallbackData",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletFilterCallbackData,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletFilterCallbackData,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletFilterCallbackData,
    &Dtool_SequenceMethods_BulletFilterCallbackData,
    &Dtool_MappingMethods_BulletFilterCallbackData,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletFilterCallbackData,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletFilterCallbackData,
    nullptr, // tp_members
    Dtool_Properties_BulletFilterCallbackData,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletFilterCallbackData,
    PyType_GenericAlloc,
    Dtool_new_BulletFilterCallbackData,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletFilterCallbackData,
  Dtool_UpcastInterface_BulletFilterCallbackData,
  Dtool_DowncastInterface_BulletFilterCallbackData,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletFilterCallbackData(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_CallbackData != nullptr);
    assert(Dtool_Ptr_CallbackData->_Dtool_ModuleClassInit != nullptr);
    Dtool_Ptr_CallbackData->_Dtool_ModuleClassInit(nullptr);
    Dtool_BulletFilterCallbackData._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_CallbackData);
    Dtool_BulletFilterCallbackData._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletFilterCallbackData._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletFilterCallbackData) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletFilterCallbackData)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletFilterCallbackData);
  }
}

/**
 * Python method tables for BulletRotationalLimitMotor (BulletRotationalLimitMotor)
 */
static PyMethodDef Dtool_Methods_BulletRotationalLimitMotor[] = {
  {"set_motor_enabled", &Dtool_BulletRotationalLimitMotor_set_motor_enabled_920, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_motor_enabled_920_comment},
  {"setMotorEnabled", &Dtool_BulletRotationalLimitMotor_set_motor_enabled_920, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_motor_enabled_920_comment},
  {"set_low_limit", &Dtool_BulletRotationalLimitMotor_set_low_limit_921, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_low_limit_921_comment},
  {"setLowLimit", &Dtool_BulletRotationalLimitMotor_set_low_limit_921, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_low_limit_921_comment},
  {"set_high_limit", &Dtool_BulletRotationalLimitMotor_set_high_limit_922, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_high_limit_922_comment},
  {"setHighLimit", &Dtool_BulletRotationalLimitMotor_set_high_limit_922, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_high_limit_922_comment},
  {"set_target_velocity", &Dtool_BulletRotationalLimitMotor_set_target_velocity_923, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_target_velocity_923_comment},
  {"setTargetVelocity", &Dtool_BulletRotationalLimitMotor_set_target_velocity_923, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_target_velocity_923_comment},
  {"set_max_motor_force", &Dtool_BulletRotationalLimitMotor_set_max_motor_force_924, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_max_motor_force_924_comment},
  {"setMaxMotorForce", &Dtool_BulletRotationalLimitMotor_set_max_motor_force_924, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_max_motor_force_924_comment},
  {"set_max_limit_force", &Dtool_BulletRotationalLimitMotor_set_max_limit_force_925, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_max_limit_force_925_comment},
  {"setMaxLimitForce", &Dtool_BulletRotationalLimitMotor_set_max_limit_force_925, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_max_limit_force_925_comment},
  {"set_damping", &Dtool_BulletRotationalLimitMotor_set_damping_926, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_damping_926_comment},
  {"setDamping", &Dtool_BulletRotationalLimitMotor_set_damping_926, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_damping_926_comment},
  {"set_softness", &Dtool_BulletRotationalLimitMotor_set_softness_927, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_softness_927_comment},
  {"setSoftness", &Dtool_BulletRotationalLimitMotor_set_softness_927, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_softness_927_comment},
  {"set_bounce", &Dtool_BulletRotationalLimitMotor_set_bounce_928, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_bounce_928_comment},
  {"setBounce", &Dtool_BulletRotationalLimitMotor_set_bounce_928, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_bounce_928_comment},
  {"set_normal_cfm", &Dtool_BulletRotationalLimitMotor_set_normal_cfm_929, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_normal_cfm_929_comment},
  {"setNormalCfm", &Dtool_BulletRotationalLimitMotor_set_normal_cfm_929, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_normal_cfm_929_comment},
  {"set_stop_cfm", &Dtool_BulletRotationalLimitMotor_set_stop_cfm_930, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_stop_cfm_930_comment},
  {"setStopCfm", &Dtool_BulletRotationalLimitMotor_set_stop_cfm_930, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_stop_cfm_930_comment},
  {"set_stop_erp", &Dtool_BulletRotationalLimitMotor_set_stop_erp_931, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_stop_erp_931_comment},
  {"setStopErp", &Dtool_BulletRotationalLimitMotor_set_stop_erp_931, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_stop_erp_931_comment},
  {"is_limited", &Dtool_BulletRotationalLimitMotor_is_limited_932, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_is_limited_932_comment},
  {"isLimited", &Dtool_BulletRotationalLimitMotor_is_limited_932, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_is_limited_932_comment},
  {"get_motor_enabled", &Dtool_BulletRotationalLimitMotor_get_motor_enabled_933, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_motor_enabled_933_comment},
  {"getMotorEnabled", &Dtool_BulletRotationalLimitMotor_get_motor_enabled_933, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_motor_enabled_933_comment},
  {"get_current_limit", &Dtool_BulletRotationalLimitMotor_get_current_limit_934, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_current_limit_934_comment},
  {"getCurrentLimit", &Dtool_BulletRotationalLimitMotor_get_current_limit_934, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_current_limit_934_comment},
  {"get_current_error", &Dtool_BulletRotationalLimitMotor_get_current_error_935, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_current_error_935_comment},
  {"getCurrentError", &Dtool_BulletRotationalLimitMotor_get_current_error_935, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_current_error_935_comment},
  {"get_current_position", &Dtool_BulletRotationalLimitMotor_get_current_position_936, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_current_position_936_comment},
  {"getCurrentPosition", &Dtool_BulletRotationalLimitMotor_get_current_position_936, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_current_position_936_comment},
  {"get_accumulated_impulse", &Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_937, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_937_comment},
  {"getAccumulatedImpulse", &Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_937, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_937_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletRotationalLimitMotor[] = {
  {(char *)"limited", &Dtool_BulletRotationalLimitMotor_limited_Getter, nullptr, nullptr, nullptr},
  {(char *)"motor_enabled", &Dtool_BulletRotationalLimitMotor_motor_enabled_Getter, &Dtool_BulletRotationalLimitMotor_motor_enabled_Setter, nullptr, nullptr},
  {(char *)"current_limit", &Dtool_BulletRotationalLimitMotor_current_limit_Getter, nullptr, nullptr, nullptr},
  {(char *)"current_error", &Dtool_BulletRotationalLimitMotor_current_error_Getter, nullptr, nullptr, nullptr},
  {(char *)"current_position", &Dtool_BulletRotationalLimitMotor_current_position_Getter, nullptr, nullptr, nullptr},
  {(char *)"accumulated_impulse", &Dtool_BulletRotationalLimitMotor_accumulated_impulse_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletRotationalLimitMotor = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletRotationalLimitMotor = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletRotationalLimitMotor",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletRotationalLimitMotor,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletRotationalLimitMotor,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * Rotation Limit structure for generic joints.\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletRotationalLimitMotor,
    nullptr, // tp_members
    Dtool_Properties_BulletRotationalLimitMotor,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletRotationalLimitMotor,
    PyType_GenericAlloc,
    Dtool_new_BulletRotationalLimitMotor,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletRotationalLimitMotor,
  Dtool_UpcastInterface_BulletRotationalLimitMotor,
  Dtool_DowncastInterface_BulletRotationalLimitMotor,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletRotationalLimitMotor(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletRotationalLimitMotor._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletRotationalLimitMotor._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletRotationalLimitMotor) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletRotationalLimitMotor)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletRotationalLimitMotor);
  }
}

/**
 * Python method tables for BulletTranslationalLimitMotor (BulletTranslationalLimitMotor)
 */
static PyMethodDef Dtool_Methods_BulletTranslationalLimitMotor[] = {
  {"set_motor_enabled", (PyCFunction) &Dtool_BulletTranslationalLimitMotor_set_motor_enabled_947, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTranslationalLimitMotor_set_motor_enabled_947_comment},
  {"setMotorEnabled", (PyCFunction) &Dtool_BulletTranslationalLimitMotor_set_motor_enabled_947, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTranslationalLimitMotor_set_motor_enabled_947_comment},
  {"set_low_limit", &Dtool_BulletTranslationalLimitMotor_set_low_limit_948, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_low_limit_948_comment},
  {"setLowLimit", &Dtool_BulletTranslationalLimitMotor_set_low_limit_948, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_low_limit_948_comment},
  {"set_high_limit", &Dtool_BulletTranslationalLimitMotor_set_high_limit_949, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_high_limit_949_comment},
  {"setHighLimit", &Dtool_BulletTranslationalLimitMotor_set_high_limit_949, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_high_limit_949_comment},
  {"set_target_velocity", &Dtool_BulletTranslationalLimitMotor_set_target_velocity_950, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_target_velocity_950_comment},
  {"setTargetVelocity", &Dtool_BulletTranslationalLimitMotor_set_target_velocity_950, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_target_velocity_950_comment},
  {"set_max_motor_force", &Dtool_BulletTranslationalLimitMotor_set_max_motor_force_951, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_max_motor_force_951_comment},
  {"setMaxMotorForce", &Dtool_BulletTranslationalLimitMotor_set_max_motor_force_951, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_max_motor_force_951_comment},
  {"set_damping", &Dtool_BulletTranslationalLimitMotor_set_damping_952, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_damping_952_comment},
  {"setDamping", &Dtool_BulletTranslationalLimitMotor_set_damping_952, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_damping_952_comment},
  {"set_softness", &Dtool_BulletTranslationalLimitMotor_set_softness_953, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_softness_953_comment},
  {"setSoftness", &Dtool_BulletTranslationalLimitMotor_set_softness_953, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_softness_953_comment},
  {"set_restitution", &Dtool_BulletTranslationalLimitMotor_set_restitution_954, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_restitution_954_comment},
  {"setRestitution", &Dtool_BulletTranslationalLimitMotor_set_restitution_954, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_restitution_954_comment},
  {"set_normal_cfm", &Dtool_BulletTranslationalLimitMotor_set_normal_cfm_955, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_normal_cfm_955_comment},
  {"setNormalCfm", &Dtool_BulletTranslationalLimitMotor_set_normal_cfm_955, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_normal_cfm_955_comment},
  {"set_stop_erp", &Dtool_BulletTranslationalLimitMotor_set_stop_erp_956, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_stop_erp_956_comment},
  {"setStopErp", &Dtool_BulletTranslationalLimitMotor_set_stop_erp_956, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_stop_erp_956_comment},
  {"set_stop_cfm", &Dtool_BulletTranslationalLimitMotor_set_stop_cfm_957, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_stop_cfm_957_comment},
  {"setStopCfm", &Dtool_BulletTranslationalLimitMotor_set_stop_cfm_957, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_stop_cfm_957_comment},
  {"is_limited", &Dtool_BulletTranslationalLimitMotor_is_limited_958, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_is_limited_958_comment},
  {"isLimited", &Dtool_BulletTranslationalLimitMotor_is_limited_958, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_is_limited_958_comment},
  {"get_motor_enabled", &Dtool_BulletTranslationalLimitMotor_get_motor_enabled_959, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_get_motor_enabled_959_comment},
  {"getMotorEnabled", &Dtool_BulletTranslationalLimitMotor_get_motor_enabled_959, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_get_motor_enabled_959_comment},
  {"get_current_limit", &Dtool_BulletTranslationalLimitMotor_get_current_limit_960, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_get_current_limit_960_comment},
  {"getCurrentLimit", &Dtool_BulletTranslationalLimitMotor_get_current_limit_960, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_get_current_limit_960_comment},
  {"get_current_error", &Dtool_BulletTranslationalLimitMotor_get_current_error_961, METH_NOARGS, (const char *)Dtool_BulletTranslationalLimitMotor_get_current_error_961_comment},
  {"getCurrentError", &Dtool_BulletTranslationalLimitMotor_get_current_error_961, METH_NOARGS, (const char *)Dtool_BulletTranslationalLimitMotor_get_current_error_961_comment},
  {"get_current_diff", &Dtool_BulletTranslationalLimitMotor_get_current_diff_962, METH_NOARGS, (const char *)Dtool_BulletTranslationalLimitMotor_get_current_diff_962_comment},
  {"getCurrentDiff", &Dtool_BulletTranslationalLimitMotor_get_current_diff_962, METH_NOARGS, (const char *)Dtool_BulletTranslationalLimitMotor_get_current_diff_962_comment},
  {"get_accumulated_impulse", &Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_963, METH_NOARGS, (const char *)Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_963_comment},
  {"getAccumulatedImpulse", &Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_963, METH_NOARGS, (const char *)Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_963_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletTranslationalLimitMotor[] = {
  {(char *)"current_error", &Dtool_BulletTranslationalLimitMotor_current_error_Getter, nullptr, nullptr, nullptr},
  {(char *)"current_diff", &Dtool_BulletTranslationalLimitMotor_current_diff_Getter, nullptr, nullptr, nullptr},
  {(char *)"accumulated_impulse", &Dtool_BulletTranslationalLimitMotor_accumulated_impulse_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletTranslationalLimitMotor = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletTranslationalLimitMotor = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletTranslationalLimitMotor",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletTranslationalLimitMotor,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletTranslationalLimitMotor,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * Rotation Limit structure for generic joints.\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletTranslationalLimitMotor,
    nullptr, // tp_members
    Dtool_Properties_BulletTranslationalLimitMotor,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletTranslationalLimitMotor,
    PyType_GenericAlloc,
    Dtool_new_BulletTranslationalLimitMotor,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletTranslationalLimitMotor,
  Dtool_UpcastInterface_BulletTranslationalLimitMotor,
  Dtool_DowncastInterface_BulletTranslationalLimitMotor,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletTranslationalLimitMotor(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletTranslationalLimitMotor._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletTranslationalLimitMotor._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletTranslationalLimitMotor) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletTranslationalLimitMotor)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletTranslationalLimitMotor);
  }
}

/**
 * Python method tables for BulletGenericConstraint (BulletGenericConstraint)
 */
static PyMethodDef Dtool_Methods_BulletGenericConstraint[] = {
  {"get_axis", &Dtool_BulletGenericConstraint_get_axis_969, METH_O, (const char *)Dtool_BulletGenericConstraint_get_axis_969_comment},
  {"getAxis", &Dtool_BulletGenericConstraint_get_axis_969, METH_O, (const char *)Dtool_BulletGenericConstraint_get_axis_969_comment},
  {"get_pivot", &Dtool_BulletGenericConstraint_get_pivot_970, METH_O, (const char *)Dtool_BulletGenericConstraint_get_pivot_970_comment},
  {"getPivot", &Dtool_BulletGenericConstraint_get_pivot_970, METH_O, (const char *)Dtool_BulletGenericConstraint_get_pivot_970_comment},
  {"get_angle", &Dtool_BulletGenericConstraint_get_angle_971, METH_O, (const char *)Dtool_BulletGenericConstraint_get_angle_971_comment},
  {"getAngle", &Dtool_BulletGenericConstraint_get_angle_971, METH_O, (const char *)Dtool_BulletGenericConstraint_get_angle_971_comment},
  {"set_linear_limit", (PyCFunction) &Dtool_BulletGenericConstraint_set_linear_limit_972, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletGenericConstraint_set_linear_limit_972_comment},
  {"setLinearLimit", (PyCFunction) &Dtool_BulletGenericConstraint_set_linear_limit_972, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletGenericConstraint_set_linear_limit_972_comment},
  {"set_angular_limit", (PyCFunction) &Dtool_BulletGenericConstraint_set_angular_limit_973, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletGenericConstraint_set_angular_limit_973_comment},
  {"setAngularLimit", (PyCFunction) &Dtool_BulletGenericConstraint_set_angular_limit_973, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletGenericConstraint_set_angular_limit_973_comment},
  {"get_rotational_limit_motor", &Dtool_BulletGenericConstraint_get_rotational_limit_motor_974, METH_O, (const char *)Dtool_BulletGenericConstraint_get_rotational_limit_motor_974_comment},
  {"getRotationalLimitMotor", &Dtool_BulletGenericConstraint_get_rotational_limit_motor_974, METH_O, (const char *)Dtool_BulletGenericConstraint_get_rotational_limit_motor_974_comment},
  {"get_translational_limit_motor", &Dtool_BulletGenericConstraint_get_translational_limit_motor_975, METH_NOARGS, (const char *)Dtool_BulletGenericConstraint_get_translational_limit_motor_975_comment},
  {"getTranslationalLimitMotor", &Dtool_BulletGenericConstraint_get_translational_limit_motor_975, METH_NOARGS, (const char *)Dtool_BulletGenericConstraint_get_translational_limit_motor_975_comment},
  {"set_frames", (PyCFunction) &Dtool_BulletGenericConstraint_set_frames_976, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletGenericConstraint_set_frames_976_comment},
  {"setFrames", (PyCFunction) &Dtool_BulletGenericConstraint_set_frames_976, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletGenericConstraint_set_frames_976_comment},
  {"get_frame_a", &Dtool_BulletGenericConstraint_get_frame_a_977, METH_NOARGS, (const char *)Dtool_BulletGenericConstraint_get_frame_a_977_comment},
  {"getFrameA", &Dtool_BulletGenericConstraint_get_frame_a_977, METH_NOARGS, (const char *)Dtool_BulletGenericConstraint_get_frame_a_977_comment},
  {"get_frame_b", &Dtool_BulletGenericConstraint_get_frame_b_978, METH_NOARGS, (const char *)Dtool_BulletGenericConstraint_get_frame_b_978_comment},
  {"getFrameB", &Dtool_BulletGenericConstraint_get_frame_b_978, METH_NOARGS, (const char *)Dtool_BulletGenericConstraint_get_frame_b_978_comment},
  {"get_class_type", &Dtool_BulletGenericConstraint_get_class_type_982, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletGenericConstraint_get_class_type_982_comment},
  {"getClassType", &Dtool_BulletGenericConstraint_get_class_type_982, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletGenericConstraint_get_class_type_982_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletGenericConstraint[] = {
  {(char *)"translational_limit_motor", &Dtool_BulletGenericConstraint_translational_limit_motor_Getter, nullptr, nullptr, nullptr},
  {(char *)"frame_a", &Dtool_BulletGenericConstraint_frame_a_Getter, nullptr, nullptr, nullptr},
  {(char *)"frame_b", &Dtool_BulletGenericConstraint_frame_b_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletGenericConstraint = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletGenericConstraint = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletGenericConstraint = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletGenericConstraint = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletGenericConstraint = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletGenericConstraint = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletGenericConstraint",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletGenericConstraint,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletGenericConstraint,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletGenericConstraint,
    &Dtool_SequenceMethods_BulletGenericConstraint,
    &Dtool_MappingMethods_BulletGenericConstraint,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletGenericConstraint,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletGenericConstraint,
    nullptr, // tp_members
    Dtool_Properties_BulletGenericConstraint,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletGenericConstraint,
    PyType_GenericAlloc,
    Dtool_new_BulletGenericConstraint,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletGenericConstraint,
  Dtool_UpcastInterface_BulletGenericConstraint,
  Dtool_DowncastInterface_BulletGenericConstraint,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletGenericConstraint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletConstraint(nullptr);
    Dtool_BulletGenericConstraint._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletConstraint);
    Dtool_BulletGenericConstraint._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletGenericConstraint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletGenericConstraint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletGenericConstraint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletGenericConstraint);
  }
}

/**
 * Python method tables for BulletHeightfieldShape (BulletHeightfieldShape)
 */
static PyMethodDef Dtool_Methods_BulletHeightfieldShape[] = {
  {"set_use_diamond_subdivision", (PyCFunction) &Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_985, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_985_comment},
  {"setUseDiamondSubdivision", (PyCFunction) &Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_985, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_985_comment},
  {"get_class_type", &Dtool_BulletHeightfieldShape_get_class_type_986, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHeightfieldShape_get_class_type_986_comment},
  {"getClassType", &Dtool_BulletHeightfieldShape_get_class_type_986, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHeightfieldShape_get_class_type_986_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyNumberMethods Dtool_NumberMethods_BulletHeightfieldShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletHeightfieldShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletHeightfieldShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletHeightfieldShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletHeightfieldShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletHeightfieldShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletHeightfieldShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletHeightfieldShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletHeightfieldShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletHeightfieldShape,
    &Dtool_SequenceMethods_BulletHeightfieldShape,
    &Dtool_MappingMethods_BulletHeightfieldShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletHeightfieldShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletHeightfieldShape,
    nullptr, // tp_members
    nullptr, // tp_getset
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletHeightfieldShape,
    PyType_GenericAlloc,
    Dtool_new_BulletHeightfieldShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletHeightfieldShape,
  Dtool_UpcastInterface_BulletHeightfieldShape,
  Dtool_DowncastInterface_BulletHeightfieldShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletHeightfieldShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(nullptr);
    Dtool_BulletHeightfieldShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    Dtool_BulletHeightfieldShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletHeightfieldShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletHeightfieldShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletHeightfieldShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletHeightfieldShape);
  }
}

/**
 * Python method tables for BulletHelper (BulletHelper)
 */
static PyMethodDef Dtool_Methods_BulletHelper[] = {
  {"from_collision_solids", (PyCFunction) &Dtool_BulletHelper_from_collision_solids_988, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_from_collision_solids_988_comment},
  {"fromCollisionSolids", (PyCFunction) &Dtool_BulletHelper_from_collision_solids_988, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_from_collision_solids_988_comment},
  {"get_sb_index", &Dtool_BulletHelper_get_sb_index_989, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHelper_get_sb_index_989_comment},
  {"getSbIndex", &Dtool_BulletHelper_get_sb_index_989, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHelper_get_sb_index_989_comment},
  {"get_sb_flip", &Dtool_BulletHelper_get_sb_flip_990, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHelper_get_sb_flip_990_comment},
  {"getSbFlip", &Dtool_BulletHelper_get_sb_flip_990, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHelper_get_sb_flip_990_comment},
  {"add_sb_index_column", &Dtool_BulletHelper_add_sb_index_column_991, METH_O | METH_STATIC, (const char *)Dtool_BulletHelper_add_sb_index_column_991_comment},
  {"addSbIndexColumn", &Dtool_BulletHelper_add_sb_index_column_991, METH_O | METH_STATIC, (const char *)Dtool_BulletHelper_add_sb_index_column_991_comment},
  {"add_sb_flip_column", &Dtool_BulletHelper_add_sb_flip_column_992, METH_O | METH_STATIC, (const char *)Dtool_BulletHelper_add_sb_flip_column_992_comment},
  {"addSbFlipColumn", &Dtool_BulletHelper_add_sb_flip_column_992, METH_O | METH_STATIC, (const char *)Dtool_BulletHelper_add_sb_flip_column_992_comment},
  {"make_geom_from_faces", (PyCFunction) &Dtool_BulletHelper_make_geom_from_faces_993, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_make_geom_from_faces_993_comment},
  {"makeGeomFromFaces", (PyCFunction) &Dtool_BulletHelper_make_geom_from_faces_993, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_make_geom_from_faces_993_comment},
  {"make_geom_from_links", (PyCFunction) &Dtool_BulletHelper_make_geom_from_links_994, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_make_geom_from_links_994_comment},
  {"makeGeomFromLinks", (PyCFunction) &Dtool_BulletHelper_make_geom_from_links_994, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_make_geom_from_links_994_comment},
  {"make_texcoords_for_patch", (PyCFunction) &Dtool_BulletHelper_make_texcoords_for_patch_995, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_make_texcoords_for_patch_995_comment},
  {"makeTexcoordsForPatch", (PyCFunction) &Dtool_BulletHelper_make_texcoords_for_patch_995, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_make_texcoords_for_patch_995_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyNumberMethods Dtool_NumberMethods_BulletHelper = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

struct Dtool_PyTypedObject Dtool_BulletHelper = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletHelper",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletHelper,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    nullptr, // tp_as_async
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletHelper,
    nullptr, // tp_as_sequence
    nullptr, // tp_as_mapping
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletHelper,
    nullptr, // tp_members
    nullptr, // tp_getset
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletHelper,
    PyType_GenericAlloc,
    Dtool_new_BulletHelper,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletHelper,
  Dtool_UpcastInterface_BulletHelper,
  Dtool_DowncastInterface_BulletHelper,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletHelper(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletHelper._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletHelper._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    static const PyGetSetDef def_sb_index = {(char *)"sb_index", &Dtool_BulletHelper_sb_index_Getter, nullptr, (char *)
    "// Internal names",
    nullptr};
    PyDict_SetItemString(dict, "sb_index", Dtool_NewStaticProperty(&Dtool_BulletHelper._PyType, &def_sb_index));
    static const PyGetSetDef def_sb_flip = {(char *)"sb_flip", &Dtool_BulletHelper_sb_flip_Getter, nullptr, nullptr, nullptr};
    PyDict_SetItemString(dict, "sb_flip", Dtool_NewStaticProperty(&Dtool_BulletHelper._PyType, &def_sb_flip));
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletHelper) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletHelper)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletHelper);
  }
}

/**
 * Python method tables for BulletHingeConstraint (BulletHingeConstraint)
 */
static PyMethodDef Dtool_Methods_BulletHingeConstraint[] = {
  {"get_hinge_angle", &Dtool_BulletHingeConstraint_get_hinge_angle_1003, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_hinge_angle_1003_comment},
  {"getHingeAngle", &Dtool_BulletHingeConstraint_get_hinge_angle_1003, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_hinge_angle_1003_comment},
  {"get_lower_limit", &Dtool_BulletHingeConstraint_get_lower_limit_1004, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_lower_limit_1004_comment},
  {"getLowerLimit", &Dtool_BulletHingeConstraint_get_lower_limit_1004, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_lower_limit_1004_comment},
  {"get_upper_limit", &Dtool_BulletHingeConstraint_get_upper_limit_1005, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_upper_limit_1005_comment},
  {"getUpperLimit", &Dtool_BulletHingeConstraint_get_upper_limit_1005, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_upper_limit_1005_comment},
  {"get_angular_only", &Dtool_BulletHingeConstraint_get_angular_only_1006, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_angular_only_1006_comment},
  {"getAngularOnly", &Dtool_BulletHingeConstraint_get_angular_only_1006, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_angular_only_1006_comment},
  {"set_angular_only", &Dtool_BulletHingeConstraint_set_angular_only_1007, METH_O, (const char *)Dtool_BulletHingeConstraint_set_angular_only_1007_comment},
  {"setAngularOnly", &Dtool_BulletHingeConstraint_set_angular_only_1007, METH_O, (const char *)Dtool_BulletHingeConstraint_set_angular_only_1007_comment},
  {"set_limit", (PyCFunction) &Dtool_BulletHingeConstraint_set_limit_1008, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_set_limit_1008_comment},
  {"setLimit", (PyCFunction) &Dtool_BulletHingeConstraint_set_limit_1008, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_set_limit_1008_comment},
  {"set_axis", &Dtool_BulletHingeConstraint_set_axis_1009, METH_O, (const char *)Dtool_BulletHingeConstraint_set_axis_1009_comment},
  {"setAxis", &Dtool_BulletHingeConstraint_set_axis_1009, METH_O, (const char *)Dtool_BulletHingeConstraint_set_axis_1009_comment},
  {"enable_angular_motor", (PyCFunction) &Dtool_BulletHingeConstraint_enable_angular_motor_1010, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_enable_angular_motor_1010_comment},
  {"enableAngularMotor", (PyCFunction) &Dtool_BulletHingeConstraint_enable_angular_motor_1010, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_enable_angular_motor_1010_comment},
  {"enable_motor", &Dtool_BulletHingeConstraint_enable_motor_1011, METH_O, (const char *)Dtool_BulletHingeConstraint_enable_motor_1011_comment},
  {"enableMotor", &Dtool_BulletHingeConstraint_enable_motor_1011, METH_O, (const char *)Dtool_BulletHingeConstraint_enable_motor_1011_comment},
  {"set_max_motor_impulse", &Dtool_BulletHingeConstraint_set_max_motor_impulse_1012, METH_O, (const char *)Dtool_BulletHingeConstraint_set_max_motor_impulse_1012_comment},
  {"setMaxMotorImpulse", &Dtool_BulletHingeConstraint_set_max_motor_impulse_1012, METH_O, (const char *)Dtool_BulletHingeConstraint_set_max_motor_impulse_1012_comment},
  {"set_motor_target", (PyCFunction) &Dtool_BulletHingeConstraint_set_motor_target_1013, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_set_motor_target_1013_comment},
  {"setMotorTarget", (PyCFunction) &Dtool_BulletHingeConstraint_set_motor_target_1013, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_set_motor_target_1013_comment},
  {"set_frames", (PyCFunction) &Dtool_BulletHingeConstraint_set_frames_1014, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_set_frames_1014_comment},
  {"setFrames", (PyCFunction) &Dtool_BulletHingeConstraint_set_frames_1014, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_set_frames_1014_comment},
  {"get_frame_a", &Dtool_BulletHingeConstraint_get_frame_a_1015, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_frame_a_1015_comment},
  {"getFrameA", &Dtool_BulletHingeConstraint_get_frame_a_1015, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_frame_a_1015_comment},
  {"get_frame_b", &Dtool_BulletHingeConstraint_get_frame_b_1016, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_frame_b_1016_comment},
  {"getFrameB", &Dtool_BulletHingeConstraint_get_frame_b_1016, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_frame_b_1016_comment},
  {"get_class_type", &Dtool_BulletHingeConstraint_get_class_type_1023, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHingeConstraint_get_class_type_1023_comment},
  {"getClassType", &Dtool_BulletHingeConstraint_get_class_type_1023, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHingeConstraint_get_class_type_1023_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletHingeConstraint[] = {
  {(char *)"hinge_angle", &Dtool_BulletHingeConstraint_hinge_angle_Getter, nullptr, nullptr, nullptr},
  {(char *)"lower_limit", &Dtool_BulletHingeConstraint_lower_limit_Getter, nullptr, nullptr, nullptr},
  {(char *)"upper_limit", &Dtool_BulletHingeConstraint_upper_limit_Getter, nullptr, nullptr, nullptr},
  {(char *)"angular_only", &Dtool_BulletHingeConstraint_angular_only_Getter, &Dtool_BulletHingeConstraint_angular_only_Setter, nullptr, nullptr},
  {(char *)"frame_a", &Dtool_BulletHingeConstraint_frame_a_Getter, nullptr, nullptr, nullptr},
  {(char *)"frame_b", &Dtool_BulletHingeConstraint_frame_b_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletHingeConstraint = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletHingeConstraint = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletHingeConstraint = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletHingeConstraint = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletHingeConstraint = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletHingeConstraint = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletHingeConstraint",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletHingeConstraint,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletHingeConstraint,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletHingeConstraint,
    &Dtool_SequenceMethods_BulletHingeConstraint,
    &Dtool_MappingMethods_BulletHingeConstraint,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletHingeConstraint,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * The hinge constraint lets two bodies rotate around a given axis while\n"
    " * adhering to specified limits.  It's motor can apply angular force to them.\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletHingeConstraint,
    nullptr, // tp_members
    Dtool_Properties_BulletHingeConstraint,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletHingeConstraint,
    PyType_GenericAlloc,
    Dtool_new_BulletHingeConstraint,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletHingeConstraint,
  Dtool_UpcastInterface_BulletHingeConstraint,
  Dtool_DowncastInterface_BulletHingeConstraint,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletHingeConstraint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletConstraint(nullptr);
    Dtool_BulletHingeConstraint._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletConstraint);
    Dtool_BulletHingeConstraint._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletHingeConstraint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletHingeConstraint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletHingeConstraint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletHingeConstraint);
  }
}

/**
 * Python method tables for BulletMinkowskiSumShape (BulletMinkowskiSumShape)
 */
static PyMethodDef Dtool_Methods_BulletMinkowskiSumShape[] = {
  {"set_transform_a", &Dtool_BulletMinkowskiSumShape_set_transform_a_1026, METH_O, (const char *)Dtool_BulletMinkowskiSumShape_set_transform_a_1026_comment},
  {"setTransformA", &Dtool_BulletMinkowskiSumShape_set_transform_a_1026, METH_O, (const char *)Dtool_BulletMinkowskiSumShape_set_transform_a_1026_comment},
  {"set_transform_b", &Dtool_BulletMinkowskiSumShape_set_transform_b_1027, METH_O, (const char *)Dtool_BulletMinkowskiSumShape_set_transform_b_1027_comment},
  {"setTransformB", &Dtool_BulletMinkowskiSumShape_set_transform_b_1027, METH_O, (const char *)Dtool_BulletMinkowskiSumShape_set_transform_b_1027_comment},
  {"get_transform_a", &Dtool_BulletMinkowskiSumShape_get_transform_a_1028, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_transform_a_1028_comment},
  {"getTransformA", &Dtool_BulletMinkowskiSumShape_get_transform_a_1028, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_transform_a_1028_comment},
  {"get_transform_b", &Dtool_BulletMinkowskiSumShape_get_transform_b_1029, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_transform_b_1029_comment},
  {"getTransformB", &Dtool_BulletMinkowskiSumShape_get_transform_b_1029, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_transform_b_1029_comment},
  {"get_shape_a", &Dtool_BulletMinkowskiSumShape_get_shape_a_1030, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_shape_a_1030_comment},
  {"getShapeA", &Dtool_BulletMinkowskiSumShape_get_shape_a_1030, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_shape_a_1030_comment},
  {"get_shape_b", &Dtool_BulletMinkowskiSumShape_get_shape_b_1031, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_shape_b_1031_comment},
  {"getShapeB", &Dtool_BulletMinkowskiSumShape_get_shape_b_1031, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_shape_b_1031_comment},
  {"get_class_type", &Dtool_BulletMinkowskiSumShape_get_class_type_1038, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletMinkowskiSumShape_get_class_type_1038_comment},
  {"getClassType", &Dtool_BulletMinkowskiSumShape_get_class_type_1038, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletMinkowskiSumShape_get_class_type_1038_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletMinkowskiSumShape[] = {
  {(char *)"transform_a", &Dtool_BulletMinkowskiSumShape_transform_a_Getter, &Dtool_BulletMinkowskiSumShape_transform_a_Setter, nullptr, nullptr},
  {(char *)"transform_b", &Dtool_BulletMinkowskiSumShape_transform_b_Getter, &Dtool_BulletMinkowskiSumShape_transform_b_Setter, nullptr, nullptr},
  {(char *)"shape_a", &Dtool_BulletMinkowskiSumShape_shape_a_Getter, nullptr, nullptr, nullptr},
  {(char *)"shape_b", &Dtool_BulletMinkowskiSumShape_shape_b_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletMinkowskiSumShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletMinkowskiSumShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletMinkowskiSumShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletMinkowskiSumShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletMinkowskiSumShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletMinkowskiSumShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletMinkowskiSumShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletMinkowskiSumShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletMinkowskiSumShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletMinkowskiSumShape,
    &Dtool_SequenceMethods_BulletMinkowskiSumShape,
    &Dtool_MappingMethods_BulletMinkowskiSumShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletMinkowskiSumShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletMinkowskiSumShape,
    nullptr, // tp_members
    Dtool_Properties_BulletMinkowskiSumShape,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletMinkowskiSumShape,
    PyType_GenericAlloc,
    Dtool_new_BulletMinkowskiSumShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletMinkowskiSumShape,
  Dtool_UpcastInterface_BulletMinkowskiSumShape,
  Dtool_DowncastInterface_BulletMinkowskiSumShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletMinkowskiSumShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(nullptr);
    Dtool_BulletMinkowskiSumShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    Dtool_BulletMinkowskiSumShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletMinkowskiSumShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletMinkowskiSumShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletMinkowskiSumShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletMinkowskiSumShape);
  }
}

/**
 * Python method tables for BulletMultiSphereShape (BulletMultiSphereShape)
 */
static PyMethodDef Dtool_Methods_BulletMultiSphereShape[] = {
  {"assign", &Dtool_BulletMultiSphereShape_operator_1041, METH_O, (const char *)Dtool_BulletMultiSphereShape_operator_1041_comment},
  {"get_sphere_count", &Dtool_BulletMultiSphereShape_get_sphere_count_1042, METH_NOARGS, (const char *)Dtool_BulletMultiSphereShape_get_sphere_count_1042_comment},
  {"getSphereCount", &Dtool_BulletMultiSphereShape_get_sphere_count_1042, METH_NOARGS, (const char *)Dtool_BulletMultiSphereShape_get_sphere_count_1042_comment},
  {"get_sphere_pos", &Dtool_BulletMultiSphereShape_get_sphere_pos_1043, METH_O, (const char *)Dtool_BulletMultiSphereShape_get_sphere_pos_1043_comment},
  {"getSpherePos", &Dtool_BulletMultiSphereShape_get_sphere_pos_1043, METH_O, (const char *)Dtool_BulletMultiSphereShape_get_sphere_pos_1043_comment},
  {"get_sphere_radius", &Dtool_BulletMultiSphereShape_get_sphere_radius_1044, METH_O, (const char *)Dtool_BulletMultiSphereShape_get_sphere_radius_1044_comment},
  {"getSphereRadius", &Dtool_BulletMultiSphereShape_get_sphere_radius_1044, METH_O, (const char *)Dtool_BulletMultiSphereShape_get_sphere_radius_1044_comment},
  {"get_class_type", &Dtool_BulletMultiSphereShape_get_class_type_1048, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletMultiSphereShape_get_class_type_1048_comment},
  {"getClassType", &Dtool_BulletMultiSphereShape_get_class_type_1048, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletMultiSphereShape_get_class_type_1048_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletMultiSphereShape[] = {
  {(char *)"sphere_count", &Dtool_BulletMultiSphereShape_sphere_count_Getter, nullptr, nullptr, nullptr},
  {(char *)"sphere_pos", &Dtool_BulletMultiSphereShape_sphere_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"sphere_radius", &Dtool_BulletMultiSphereShape_sphere_radius_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletMultiSphereShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletMultiSphereShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletMultiSphereShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletMultiSphereShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletMultiSphereShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletMultiSphereShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletMultiSphereShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletMultiSphereShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletMultiSphereShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletMultiSphereShape,
    &Dtool_SequenceMethods_BulletMultiSphereShape,
    &Dtool_MappingMethods_BulletMultiSphereShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletMultiSphereShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletMultiSphereShape,
    nullptr, // tp_members
    Dtool_Properties_BulletMultiSphereShape,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletMultiSphereShape,
    PyType_GenericAlloc,
    Dtool_new_BulletMultiSphereShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletMultiSphereShape,
  Dtool_UpcastInterface_BulletMultiSphereShape,
  Dtool_DowncastInterface_BulletMultiSphereShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletMultiSphereShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(nullptr);
    Dtool_BulletMultiSphereShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    Dtool_BulletMultiSphereShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletMultiSphereShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletMultiSphereShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletMultiSphereShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletMultiSphereShape);
  }
}

/**
 * Python method tables for BulletPlaneShape (BulletPlaneShape)
 */
static PyMethodDef Dtool_Methods_BulletPlaneShape[] = {
  {"get_plane", &Dtool_BulletPlaneShape_get_plane_1051, METH_NOARGS, (const char *)Dtool_BulletPlaneShape_get_plane_1051_comment},
  {"getPlane", &Dtool_BulletPlaneShape_get_plane_1051, METH_NOARGS, (const char *)Dtool_BulletPlaneShape_get_plane_1051_comment},
  {"get_plane_normal", &Dtool_BulletPlaneShape_get_plane_normal_1052, METH_NOARGS, (const char *)Dtool_BulletPlaneShape_get_plane_normal_1052_comment},
  {"getPlaneNormal", &Dtool_BulletPlaneShape_get_plane_normal_1052, METH_NOARGS, (const char *)Dtool_BulletPlaneShape_get_plane_normal_1052_comment},
  {"get_plane_constant", &Dtool_BulletPlaneShape_get_plane_constant_1053, METH_NOARGS, (const char *)Dtool_BulletPlaneShape_get_plane_constant_1053_comment},
  {"getPlaneConstant", &Dtool_BulletPlaneShape_get_plane_constant_1053, METH_NOARGS, (const char *)Dtool_BulletPlaneShape_get_plane_constant_1053_comment},
  {"make_from_solid", &Dtool_BulletPlaneShape_make_from_solid_1054, METH_O | METH_STATIC, (const char *)Dtool_BulletPlaneShape_make_from_solid_1054_comment},
  {"makeFromSolid", &Dtool_BulletPlaneShape_make_from_solid_1054, METH_O | METH_STATIC, (const char *)Dtool_BulletPlaneShape_make_from_solid_1054_comment},
  {"get_class_type", &Dtool_BulletPlaneShape_get_class_type_1060, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletPlaneShape_get_class_type_1060_comment},
  {"getClassType", &Dtool_BulletPlaneShape_get_class_type_1060, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletPlaneShape_get_class_type_1060_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletPlaneShape[] = {
  {(char *)"plane", &Dtool_BulletPlaneShape_plane_Getter, nullptr, nullptr, nullptr},
  {(char *)"plane_normal", &Dtool_BulletPlaneShape_plane_normal_Getter, nullptr, nullptr, nullptr},
  {(char *)"plane_constant", &Dtool_BulletPlaneShape_plane_constant_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletPlaneShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletPlaneShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletPlaneShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletPlaneShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletPlaneShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletPlaneShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletPlaneShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletPlaneShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletPlaneShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletPlaneShape,
    &Dtool_SequenceMethods_BulletPlaneShape,
    &Dtool_MappingMethods_BulletPlaneShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletPlaneShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletPlaneShape,
    nullptr, // tp_members
    Dtool_Properties_BulletPlaneShape,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletPlaneShape,
    PyType_GenericAlloc,
    Dtool_new_BulletPlaneShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletPlaneShape,
  Dtool_UpcastInterface_BulletPlaneShape,
  Dtool_DowncastInterface_BulletPlaneShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletPlaneShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(nullptr);
    Dtool_BulletPlaneShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    Dtool_BulletPlaneShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletPlaneShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletPlaneShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletPlaneShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletPlaneShape);
  }
}

/**
 * Python method tables for BulletSliderConstraint (BulletSliderConstraint)
 */
static PyMethodDef Dtool_Methods_BulletSliderConstraint[] = {
  {"get_linear_pos", &Dtool_BulletSliderConstraint_get_linear_pos_1063, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_linear_pos_1063_comment},
  {"getLinearPos", &Dtool_BulletSliderConstraint_get_linear_pos_1063, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_linear_pos_1063_comment},
  {"get_angular_pos", &Dtool_BulletSliderConstraint_get_angular_pos_1064, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_angular_pos_1064_comment},
  {"getAngularPos", &Dtool_BulletSliderConstraint_get_angular_pos_1064, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_angular_pos_1064_comment},
  {"get_lower_linear_limit", &Dtool_BulletSliderConstraint_get_lower_linear_limit_1065, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_lower_linear_limit_1065_comment},
  {"getLowerLinearLimit", &Dtool_BulletSliderConstraint_get_lower_linear_limit_1065, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_lower_linear_limit_1065_comment},
  {"get_upper_linear_limit", &Dtool_BulletSliderConstraint_get_upper_linear_limit_1066, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_upper_linear_limit_1066_comment},
  {"getUpperLinearLimit", &Dtool_BulletSliderConstraint_get_upper_linear_limit_1066, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_upper_linear_limit_1066_comment},
  {"get_lower_angular_limit", &Dtool_BulletSliderConstraint_get_lower_angular_limit_1067, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_lower_angular_limit_1067_comment},
  {"getLowerAngularLimit", &Dtool_BulletSliderConstraint_get_lower_angular_limit_1067, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_lower_angular_limit_1067_comment},
  {"get_upper_angular_limit", &Dtool_BulletSliderConstraint_get_upper_angular_limit_1068, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_upper_angular_limit_1068_comment},
  {"getUpperAngularLimit", &Dtool_BulletSliderConstraint_get_upper_angular_limit_1068, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_upper_angular_limit_1068_comment},
  {"set_lower_linear_limit", &Dtool_BulletSliderConstraint_set_lower_linear_limit_1069, METH_O, (const char *)Dtool_BulletSliderConstraint_set_lower_linear_limit_1069_comment},
  {"setLowerLinearLimit", &Dtool_BulletSliderConstraint_set_lower_linear_limit_1069, METH_O, (const char *)Dtool_BulletSliderConstraint_set_lower_linear_limit_1069_comment},
  {"set_upper_linear_limit", &Dtool_BulletSliderConstraint_set_upper_linear_limit_1070, METH_O, (const char *)Dtool_BulletSliderConstraint_set_upper_linear_limit_1070_comment},
  {"setUpperLinearLimit", &Dtool_BulletSliderConstraint_set_upper_linear_limit_1070, METH_O, (const char *)Dtool_BulletSliderConstraint_set_upper_linear_limit_1070_comment},
  {"set_lower_angular_limit", &Dtool_BulletSliderConstraint_set_lower_angular_limit_1071, METH_O, (const char *)Dtool_BulletSliderConstraint_set_lower_angular_limit_1071_comment},
  {"setLowerAngularLimit", &Dtool_BulletSliderConstraint_set_lower_angular_limit_1071, METH_O, (const char *)Dtool_BulletSliderConstraint_set_lower_angular_limit_1071_comment},
  {"set_upper_angular_limit", &Dtool_BulletSliderConstraint_set_upper_angular_limit_1072, METH_O, (const char *)Dtool_BulletSliderConstraint_set_upper_angular_limit_1072_comment},
  {"setUpperAngularLimit", &Dtool_BulletSliderConstraint_set_upper_angular_limit_1072, METH_O, (const char *)Dtool_BulletSliderConstraint_set_upper_angular_limit_1072_comment},
  {"set_powered_linear_motor", &Dtool_BulletSliderConstraint_set_powered_linear_motor_1073, METH_O, (const char *)Dtool_BulletSliderConstraint_set_powered_linear_motor_1073_comment},
  {"setPoweredLinearMotor", &Dtool_BulletSliderConstraint_set_powered_linear_motor_1073, METH_O, (const char *)Dtool_BulletSliderConstraint_set_powered_linear_motor_1073_comment},
  {"set_target_linear_motor_velocity", &Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_1074, METH_O, (const char *)Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_1074_comment},
  {"setTargetLinearMotorVelocity", &Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_1074, METH_O, (const char *)Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_1074_comment},
  {"set_max_linear_motor_force", &Dtool_BulletSliderConstraint_set_max_linear_motor_force_1075, METH_O, (const char *)Dtool_BulletSliderConstraint_set_max_linear_motor_force_1075_comment},
  {"setMaxLinearMotorForce", &Dtool_BulletSliderConstraint_set_max_linear_motor_force_1075, METH_O, (const char *)Dtool_BulletSliderConstraint_set_max_linear_motor_force_1075_comment},
  {"get_powered_linear_motor", &Dtool_BulletSliderConstraint_get_powered_linear_motor_1076, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_powered_linear_motor_1076_comment},
  {"getPoweredLinearMotor", &Dtool_BulletSliderConstraint_get_powered_linear_motor_1076, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_powered_linear_motor_1076_comment},
  {"get_target_linear_motor_velocity", &Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_1077, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_1077_comment},
  {"getTargetLinearMotorVelocity", &Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_1077, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_1077_comment},
  {"get_max_linear_motor_force", &Dtool_BulletSliderConstraint_get_max_linear_motor_force_1078, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_max_linear_motor_force_1078_comment},
  {"getMaxLinearMotorForce", &Dtool_BulletSliderConstraint_get_max_linear_motor_force_1078, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_max_linear_motor_force_1078_comment},
  {"set_powered_angular_motor", &Dtool_BulletSliderConstraint_set_powered_angular_motor_1079, METH_O, (const char *)Dtool_BulletSliderConstraint_set_powered_angular_motor_1079_comment},
  {"setPoweredAngularMotor", &Dtool_BulletSliderConstraint_set_powered_angular_motor_1079, METH_O, (const char *)Dtool_BulletSliderConstraint_set_powered_angular_motor_1079_comment},
  {"set_target_angular_motor_velocity", &Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_1080, METH_O, (const char *)Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_1080_comment},
  {"setTargetAngularMotorVelocity", &Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_1080, METH_O, (const char *)Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_1080_comment},
  {"set_max_angular_motor_force", &Dtool_BulletSliderConstraint_set_max_angular_motor_force_1081, METH_O, (const char *)Dtool_BulletSliderConstraint_set_max_angular_motor_force_1081_comment},
  {"setMaxAngularMotorForce", &Dtool_BulletSliderConstraint_set_max_angular_motor_force_1081, METH_O, (const char *)Dtool_BulletSliderConstraint_set_max_angular_motor_force_1081_comment},
  {"get_powered_angular_motor", &Dtool_BulletSliderConstraint_get_powered_angular_motor_1082, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_powered_angular_motor_1082_comment},
  {"getPoweredAngularMotor", &Dtool_BulletSliderConstraint_get_powered_angular_motor_1082, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_powered_angular_motor_1082_comment},
  {"get_target_angular_motor_velocity", &Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_1083, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_1083_comment},
  {"getTargetAngularMotorVelocity", &Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_1083, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_1083_comment},
  {"get_max_angular_motor_force", &Dtool_BulletSliderConstraint_get_max_angular_motor_force_1084, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_max_angular_motor_force_1084_comment},
  {"getMaxAngularMotorForce", &Dtool_BulletSliderConstraint_get_max_angular_motor_force_1084, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_max_angular_motor_force_1084_comment},
  {"set_frames", (PyCFunction) &Dtool_BulletSliderConstraint_set_frames_1085, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSliderConstraint_set_frames_1085_comment},
  {"setFrames", (PyCFunction) &Dtool_BulletSliderConstraint_set_frames_1085, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSliderConstraint_set_frames_1085_comment},
  {"get_frame_a", &Dtool_BulletSliderConstraint_get_frame_a_1086, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_frame_a_1086_comment},
  {"getFrameA", &Dtool_BulletSliderConstraint_get_frame_a_1086, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_frame_a_1086_comment},
  {"get_frame_b", &Dtool_BulletSliderConstraint_get_frame_b_1087, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_frame_b_1087_comment},
  {"getFrameB", &Dtool_BulletSliderConstraint_get_frame_b_1087, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_frame_b_1087_comment},
  {"get_class_type", &Dtool_BulletSliderConstraint_get_class_type_1102, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSliderConstraint_get_class_type_1102_comment},
  {"getClassType", &Dtool_BulletSliderConstraint_get_class_type_1102, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSliderConstraint_get_class_type_1102_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletSliderConstraint[] = {
  {(char *)"linear_pos", &Dtool_BulletSliderConstraint_linear_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"angular_pos", &Dtool_BulletSliderConstraint_angular_pos_Getter, nullptr, nullptr, nullptr},
  {(char *)"lower_linear_limit", &Dtool_BulletSliderConstraint_lower_linear_limit_Getter, &Dtool_BulletSliderConstraint_lower_linear_limit_Setter, (char *)
    "// Limits",
    nullptr},
  {(char *)"upper_linear_limit", &Dtool_BulletSliderConstraint_upper_linear_limit_Getter, &Dtool_BulletSliderConstraint_upper_linear_limit_Setter, nullptr, nullptr},
  {(char *)"lower_angular_limit", &Dtool_BulletSliderConstraint_lower_angular_limit_Getter, &Dtool_BulletSliderConstraint_lower_angular_limit_Setter, nullptr, nullptr},
  {(char *)"upper_angular_limit", &Dtool_BulletSliderConstraint_upper_angular_limit_Getter, &Dtool_BulletSliderConstraint_upper_angular_limit_Setter, nullptr, nullptr},
  {(char *)"powered_linear_motor", &Dtool_BulletSliderConstraint_powered_linear_motor_Getter, &Dtool_BulletSliderConstraint_powered_linear_motor_Setter, nullptr, nullptr},
  {(char *)"target_linear_motor_velocity", &Dtool_BulletSliderConstraint_target_linear_motor_velocity_Getter, &Dtool_BulletSliderConstraint_target_linear_motor_velocity_Setter, nullptr, nullptr},
  {(char *)"max_linear_motor_force", &Dtool_BulletSliderConstraint_max_linear_motor_force_Getter, &Dtool_BulletSliderConstraint_max_linear_motor_force_Setter, nullptr, nullptr},
  {(char *)"powered_angular_motor", &Dtool_BulletSliderConstraint_powered_angular_motor_Getter, &Dtool_BulletSliderConstraint_powered_angular_motor_Setter, nullptr, nullptr},
  {(char *)"target_angular_motor_velocity", &Dtool_BulletSliderConstraint_target_angular_motor_velocity_Getter, &Dtool_BulletSliderConstraint_target_angular_motor_velocity_Setter, nullptr, nullptr},
  {(char *)"max_angular_motor_force", &Dtool_BulletSliderConstraint_max_angular_motor_force_Getter, &Dtool_BulletSliderConstraint_max_angular_motor_force_Setter, nullptr, nullptr},
  {(char *)"frame_a", &Dtool_BulletSliderConstraint_frame_a_Getter, nullptr, nullptr, nullptr},
  {(char *)"frame_b", &Dtool_BulletSliderConstraint_frame_b_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletSliderConstraint = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletSliderConstraint = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletSliderConstraint = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletSliderConstraint = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletSliderConstraint = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletSliderConstraint = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletSliderConstraint",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSliderConstraint,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletSliderConstraint,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletSliderConstraint,
    &Dtool_SequenceMethods_BulletSliderConstraint,
    &Dtool_MappingMethods_BulletSliderConstraint,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletSliderConstraint,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletSliderConstraint,
    nullptr, // tp_members
    Dtool_Properties_BulletSliderConstraint,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletSliderConstraint,
    PyType_GenericAlloc,
    Dtool_new_BulletSliderConstraint,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSliderConstraint,
  Dtool_UpcastInterface_BulletSliderConstraint,
  Dtool_DowncastInterface_BulletSliderConstraint,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletSliderConstraint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletConstraint(nullptr);
    Dtool_BulletSliderConstraint._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletConstraint);
    Dtool_BulletSliderConstraint._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletSliderConstraint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSliderConstraint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSliderConstraint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSliderConstraint);
  }
}

/**
 * Python method tables for BulletSoftBodyControl (BulletSoftBodyControl)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyControl[] = {
  {"set_goal", &Dtool_BulletSoftBodyControl_set_goal_1111, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_goal_1111_comment},
  {"setGoal", &Dtool_BulletSoftBodyControl_set_goal_1111, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_goal_1111_comment},
  {"set_max_torque", &Dtool_BulletSoftBodyControl_set_max_torque_1112, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_max_torque_1112_comment},
  {"setMaxTorque", &Dtool_BulletSoftBodyControl_set_max_torque_1112, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_max_torque_1112_comment},
  {"set_angle", &Dtool_BulletSoftBodyControl_set_angle_1113, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_angle_1113_comment},
  {"setAngle", &Dtool_BulletSoftBodyControl_set_angle_1113, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_angle_1113_comment},
  {"set_sign", &Dtool_BulletSoftBodyControl_set_sign_1114, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_sign_1114_comment},
  {"setSign", &Dtool_BulletSoftBodyControl_set_sign_1114, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_sign_1114_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyControl = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletSoftBodyControl = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletSoftBodyControl = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletSoftBodyControl = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletSoftBodyControl = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletSoftBodyControl = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletSoftBodyControl",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyControl,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletSoftBodyControl,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletSoftBodyControl,
    &Dtool_SequenceMethods_BulletSoftBodyControl,
    &Dtool_MappingMethods_BulletSoftBodyControl,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletSoftBodyControl,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletSoftBodyControl,
    nullptr, // tp_members
    nullptr, // tp_getset
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyControl,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyControl,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyControl,
  Dtool_UpcastInterface_BulletSoftBodyControl,
  Dtool_DowncastInterface_BulletSoftBodyControl,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyControl(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletSoftBodyControl._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletSoftBodyControl._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyControl) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyControl)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyControl);
  }
}

/**
 * Python method tables for BulletSoftBodyShape (BulletSoftBodyShape)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyShape[] = {
  {"get_body", &Dtool_BulletSoftBodyShape_get_body_1116, METH_NOARGS, (const char *)Dtool_BulletSoftBodyShape_get_body_1116_comment},
  {"getBody", &Dtool_BulletSoftBodyShape_get_body_1116, METH_NOARGS, (const char *)Dtool_BulletSoftBodyShape_get_body_1116_comment},
  {"get_class_type", &Dtool_BulletSoftBodyShape_get_class_type_1118, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSoftBodyShape_get_class_type_1118_comment},
  {"getClassType", &Dtool_BulletSoftBodyShape_get_class_type_1118, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSoftBodyShape_get_class_type_1118_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletSoftBodyShape[] = {
  {(char *)"body", &Dtool_BulletSoftBodyShape_body_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletSoftBodyShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletSoftBodyShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletSoftBodyShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletSoftBodyShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletSoftBodyShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletSoftBodyShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletSoftBodyShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletSoftBodyShape,
    &Dtool_SequenceMethods_BulletSoftBodyShape,
    &Dtool_MappingMethods_BulletSoftBodyShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletSoftBodyShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletSoftBodyShape,
    nullptr, // tp_members
    Dtool_Properties_BulletSoftBodyShape,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyShape,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyShape,
  Dtool_UpcastInterface_BulletSoftBodyShape,
  Dtool_DowncastInterface_BulletSoftBodyShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(nullptr);
    Dtool_BulletSoftBodyShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    Dtool_BulletSoftBodyShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletSoftBodyShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyShape);
  }
}

/**
 * Python method tables for BulletSphereShape (BulletSphereShape)
 */
static PyMethodDef Dtool_Methods_BulletSphereShape[] = {
  {"get_radius", &Dtool_BulletSphereShape_get_radius_1121, METH_NOARGS, (const char *)Dtool_BulletSphereShape_get_radius_1121_comment},
  {"getRadius", &Dtool_BulletSphereShape_get_radius_1121, METH_NOARGS, (const char *)Dtool_BulletSphereShape_get_radius_1121_comment},
  {"make_from_solid", &Dtool_BulletSphereShape_make_from_solid_1122, METH_O | METH_STATIC, (const char *)Dtool_BulletSphereShape_make_from_solid_1122_comment},
  {"makeFromSolid", &Dtool_BulletSphereShape_make_from_solid_1122, METH_O | METH_STATIC, (const char *)Dtool_BulletSphereShape_make_from_solid_1122_comment},
  {"get_class_type", &Dtool_BulletSphereShape_get_class_type_1124, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSphereShape_get_class_type_1124_comment},
  {"getClassType", &Dtool_BulletSphereShape_get_class_type_1124, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSphereShape_get_class_type_1124_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletSphereShape[] = {
  {(char *)"radius", &Dtool_BulletSphereShape_radius_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletSphereShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletSphereShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletSphereShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletSphereShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletSphereShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletSphereShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletSphereShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSphereShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletSphereShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletSphereShape,
    &Dtool_SequenceMethods_BulletSphereShape,
    &Dtool_MappingMethods_BulletSphereShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletSphereShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletSphereShape,
    nullptr, // tp_members
    Dtool_Properties_BulletSphereShape,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletSphereShape,
    PyType_GenericAlloc,
    Dtool_new_BulletSphereShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSphereShape,
  Dtool_UpcastInterface_BulletSphereShape,
  Dtool_DowncastInterface_BulletSphereShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletSphereShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(nullptr);
    Dtool_BulletSphereShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    Dtool_BulletSphereShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletSphereShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSphereShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSphereShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSphereShape);
  }
}

/**
 * Python method tables for BulletSphericalConstraint (BulletSphericalConstraint)
 */
static PyMethodDef Dtool_Methods_BulletSphericalConstraint[] = {
  {"set_pivot_a", &Dtool_BulletSphericalConstraint_set_pivot_a_1127, METH_O, (const char *)Dtool_BulletSphericalConstraint_set_pivot_a_1127_comment},
  {"setPivotA", &Dtool_BulletSphericalConstraint_set_pivot_a_1127, METH_O, (const char *)Dtool_BulletSphericalConstraint_set_pivot_a_1127_comment},
  {"set_pivot_b", &Dtool_BulletSphericalConstraint_set_pivot_b_1128, METH_O, (const char *)Dtool_BulletSphericalConstraint_set_pivot_b_1128_comment},
  {"setPivotB", &Dtool_BulletSphericalConstraint_set_pivot_b_1128, METH_O, (const char *)Dtool_BulletSphericalConstraint_set_pivot_b_1128_comment},
  {"get_pivot_in_a", &Dtool_BulletSphericalConstraint_get_pivot_in_a_1129, METH_NOARGS, (const char *)Dtool_BulletSphericalConstraint_get_pivot_in_a_1129_comment},
  {"getPivotInA", &Dtool_BulletSphericalConstraint_get_pivot_in_a_1129, METH_NOARGS, (const char *)Dtool_BulletSphericalConstraint_get_pivot_in_a_1129_comment},
  {"get_pivot_in_b", &Dtool_BulletSphericalConstraint_get_pivot_in_b_1130, METH_NOARGS, (const char *)Dtool_BulletSphericalConstraint_get_pivot_in_b_1130_comment},
  {"getPivotInB", &Dtool_BulletSphericalConstraint_get_pivot_in_b_1130, METH_NOARGS, (const char *)Dtool_BulletSphericalConstraint_get_pivot_in_b_1130_comment},
  {"get_class_type", &Dtool_BulletSphericalConstraint_get_class_type_1133, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSphericalConstraint_get_class_type_1133_comment},
  {"getClassType", &Dtool_BulletSphericalConstraint_get_class_type_1133, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSphericalConstraint_get_class_type_1133_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletSphericalConstraint[] = {
  {(char *)"pivot_a", &Dtool_BulletSphericalConstraint_pivot_a_Getter, &Dtool_BulletSphericalConstraint_pivot_a_Setter, nullptr, nullptr},
  {(char *)"pivot_b", &Dtool_BulletSphericalConstraint_pivot_b_Getter, &Dtool_BulletSphericalConstraint_pivot_b_Setter, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletSphericalConstraint = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletSphericalConstraint = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletSphericalConstraint = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletSphericalConstraint = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletSphericalConstraint = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletSphericalConstraint = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletSphericalConstraint",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSphericalConstraint,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletSphericalConstraint,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletSphericalConstraint,
    &Dtool_SequenceMethods_BulletSphericalConstraint,
    &Dtool_MappingMethods_BulletSphericalConstraint,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletSphericalConstraint,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * A constraint between two rigid bodies, each with a pivot point.  The pivot\n"
    " * points are described in the body's local space.  The constraint limits\n"
    " * movement of the two rigid bodies in such a way that the pivot points match\n"
    " * in global space.  The spherical constraint can be seen as a \"ball and\n"
    " * socket\" joint.\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletSphericalConstraint,
    nullptr, // tp_members
    Dtool_Properties_BulletSphericalConstraint,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletSphericalConstraint,
    PyType_GenericAlloc,
    Dtool_new_BulletSphericalConstraint,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSphericalConstraint,
  Dtool_UpcastInterface_BulletSphericalConstraint,
  Dtool_DowncastInterface_BulletSphericalConstraint,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletSphericalConstraint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletConstraint(nullptr);
    Dtool_BulletSphericalConstraint._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletConstraint);
    Dtool_BulletSphericalConstraint._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletSphericalConstraint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSphericalConstraint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSphericalConstraint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSphericalConstraint);
  }
}

/**
 * Python method tables for BulletTickCallbackData (BulletTickCallbackData)
 */
static PyMethodDef Dtool_Methods_BulletTickCallbackData[] = {
  {"get_timestep", &Dtool_BulletTickCallbackData_get_timestep_1136, METH_NOARGS, (const char *)Dtool_BulletTickCallbackData_get_timestep_1136_comment},
  {"getTimestep", &Dtool_BulletTickCallbackData_get_timestep_1136, METH_NOARGS, (const char *)Dtool_BulletTickCallbackData_get_timestep_1136_comment},
  {"get_class_type", &Dtool_BulletTickCallbackData_get_class_type_1138, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletTickCallbackData_get_class_type_1138_comment},
  {"getClassType", &Dtool_BulletTickCallbackData_get_class_type_1138, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletTickCallbackData_get_class_type_1138_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletTickCallbackData[] = {
  {(char *)"timestep", &Dtool_BulletTickCallbackData_timestep_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletTickCallbackData = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletTickCallbackData = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletTickCallbackData = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletTickCallbackData = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletTickCallbackData = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletTickCallbackData = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletTickCallbackData",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletTickCallbackData,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletTickCallbackData,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletTickCallbackData,
    &Dtool_SequenceMethods_BulletTickCallbackData,
    &Dtool_MappingMethods_BulletTickCallbackData,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletTickCallbackData,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletTickCallbackData,
    nullptr, // tp_members
    Dtool_Properties_BulletTickCallbackData,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletTickCallbackData,
    PyType_GenericAlloc,
    Dtool_new_BulletTickCallbackData,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletTickCallbackData,
  Dtool_UpcastInterface_BulletTickCallbackData,
  Dtool_DowncastInterface_BulletTickCallbackData,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletTickCallbackData(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_CallbackData != nullptr);
    assert(Dtool_Ptr_CallbackData->_Dtool_ModuleClassInit != nullptr);
    Dtool_Ptr_CallbackData->_Dtool_ModuleClassInit(nullptr);
    Dtool_BulletTickCallbackData._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_CallbackData);
    Dtool_BulletTickCallbackData._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletTickCallbackData._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletTickCallbackData) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletTickCallbackData)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletTickCallbackData);
  }
}

/**
 * Python method tables for BulletTriangleMesh (BulletTriangleMesh)
 */
static PyMethodDef Dtool_Methods_BulletTriangleMesh[] = {
  {"add_triangle", (PyCFunction) &Dtool_BulletTriangleMesh_add_triangle_1142, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_add_triangle_1142_comment},
  {"addTriangle", (PyCFunction) &Dtool_BulletTriangleMesh_add_triangle_1142, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_add_triangle_1142_comment},
  {"add_array", (PyCFunction) &Dtool_BulletTriangleMesh_add_array_1143, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_add_array_1143_comment},
  {"addArray", (PyCFunction) &Dtool_BulletTriangleMesh_add_array_1143, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_add_array_1143_comment},
  {"add_geom", (PyCFunction) &Dtool_BulletTriangleMesh_add_geom_1144, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_add_geom_1144_comment},
  {"addGeom", (PyCFunction) &Dtool_BulletTriangleMesh_add_geom_1144, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_add_geom_1144_comment},
  {"set_welding_distance", &Dtool_BulletTriangleMesh_set_welding_distance_1145, METH_O, (const char *)Dtool_BulletTriangleMesh_set_welding_distance_1145_comment},
  {"setWeldingDistance", &Dtool_BulletTriangleMesh_set_welding_distance_1145, METH_O, (const char *)Dtool_BulletTriangleMesh_set_welding_distance_1145_comment},
  {"preallocate", (PyCFunction) &Dtool_BulletTriangleMesh_preallocate_1146, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_preallocate_1146_comment},
  {"get_num_triangles", &Dtool_BulletTriangleMesh_get_num_triangles_1147, METH_NOARGS, (const char *)Dtool_BulletTriangleMesh_get_num_triangles_1147_comment},
  {"getNumTriangles", &Dtool_BulletTriangleMesh_get_num_triangles_1147, METH_NOARGS, (const char *)Dtool_BulletTriangleMesh_get_num_triangles_1147_comment},
  {"get_welding_distance", &Dtool_BulletTriangleMesh_get_welding_distance_1148, METH_NOARGS, (const char *)Dtool_BulletTriangleMesh_get_welding_distance_1148_comment},
  {"getWeldingDistance", &Dtool_BulletTriangleMesh_get_welding_distance_1148, METH_NOARGS, (const char *)Dtool_BulletTriangleMesh_get_welding_distance_1148_comment},
  {"output", &Dtool_BulletTriangleMesh_output_1149, METH_O, (const char *)Dtool_BulletTriangleMesh_output_1149_comment},
  {"write", (PyCFunction) &Dtool_BulletTriangleMesh_write_1150, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_write_1150_comment},
  {"get_class_type", &Dtool_BulletTriangleMesh_get_class_type_1158, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletTriangleMesh_get_class_type_1158_comment},
  {"getClassType", &Dtool_BulletTriangleMesh_get_class_type_1158, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletTriangleMesh_get_class_type_1158_comment},
  {nullptr, nullptr, 0, nullptr}
};

//////////////////
//  A __repr__ function
//     BulletTriangleMesh
//////////////////
static PyObject *Dtool_Repr_BulletTriangleMesh(PyObject *self) {
  BulletTriangleMesh *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMesh, (void **)&local_this)) {
    return nullptr;
  }

  std::ostringstream os;
  local_this->output(os);
  std::string ss = os.str();
  return Dtool_WrapValue(ss);
}

//////////////////
//  A __str__ function
//     BulletTriangleMesh
//////////////////
static PyObject *Dtool_Str_BulletTriangleMesh(PyObject *self) {
  BulletTriangleMesh *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMesh, (void **)&local_this)) {
    return nullptr;
  }

  std::ostringstream os;
  local_this->write(os, 0);
  std::string ss = os.str();
  return Dtool_WrapValue(ss);
}

static PyGetSetDef Dtool_Properties_BulletTriangleMesh[] = {
  {(char *)"welding_distance", &Dtool_BulletTriangleMesh_welding_distance_Getter, &Dtool_BulletTriangleMesh_welding_distance_Setter, nullptr, nullptr},
  {(char *)"vertices", &Dtool_BulletTriangleMesh_vertices_Getter, nullptr, nullptr, nullptr},
  {(char *)"triangles", &Dtool_BulletTriangleMesh_triangles_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletTriangleMesh = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletTriangleMesh = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletTriangleMesh = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletTriangleMesh = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletTriangleMesh = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletTriangleMesh = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletTriangleMesh",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletTriangleMesh,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletTriangleMesh,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    &Dtool_Repr_BulletTriangleMesh,
    &Dtool_NumberMethods_BulletTriangleMesh,
    &Dtool_SequenceMethods_BulletTriangleMesh,
    &Dtool_MappingMethods_BulletTriangleMesh,
    nullptr, // tp_hash
    nullptr,
    &Dtool_Str_BulletTriangleMesh,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletTriangleMesh,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletTriangleMesh,
    nullptr, // tp_members
    Dtool_Properties_BulletTriangleMesh,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletTriangleMesh,
    PyType_GenericAlloc,
    Dtool_new_BulletTriangleMesh,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletTriangleMesh,
  Dtool_UpcastInterface_BulletTriangleMesh,
  Dtool_DowncastInterface_BulletTriangleMesh,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletTriangleMesh(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_TypedWritableReferenceCount != nullptr);
    assert(Dtool_Ptr_TypedWritableReferenceCount->_Dtool_ModuleClassInit != nullptr);
    Dtool_Ptr_TypedWritableReferenceCount->_Dtool_ModuleClassInit(nullptr);
    Dtool_BulletTriangleMesh._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_TypedWritableReferenceCount);
    Dtool_BulletTriangleMesh._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletTriangleMesh._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletTriangleMesh) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletTriangleMesh)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletTriangleMesh);
  }
}

/**
 * Python method tables for BulletTriangleMeshShape (BulletTriangleMeshShape)
 */
static PyMethodDef Dtool_Methods_BulletTriangleMeshShape[] = {
  {"refit_tree", (PyCFunction) &Dtool_BulletTriangleMeshShape_refit_tree_1161, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMeshShape_refit_tree_1161_comment},
  {"refitTree", (PyCFunction) &Dtool_BulletTriangleMeshShape_refit_tree_1161, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMeshShape_refit_tree_1161_comment},
  {"is_static", &Dtool_BulletTriangleMeshShape_is_static_1162, METH_NOARGS, (const char *)Dtool_BulletTriangleMeshShape_is_static_1162_comment},
  {"isStatic", &Dtool_BulletTriangleMeshShape_is_static_1162, METH_NOARGS, (const char *)Dtool_BulletTriangleMeshShape_is_static_1162_comment},
  {"is_dynamic", &Dtool_BulletTriangleMeshShape_is_dynamic_1163, METH_NOARGS, (const char *)Dtool_BulletTriangleMeshShape_is_dynamic_1163_comment},
  {"isDynamic", &Dtool_BulletTriangleMeshShape_is_dynamic_1163, METH_NOARGS, (const char *)Dtool_BulletTriangleMeshShape_is_dynamic_1163_comment},
  {"get_class_type", &Dtool_BulletTriangleMeshShape_get_class_type_1166, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletTriangleMeshShape_get_class_type_1166_comment},
  {"getClassType", &Dtool_BulletTriangleMeshShape_get_class_type_1166, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletTriangleMeshShape_get_class_type_1166_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, nullptr},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyGetSetDef Dtool_Properties_BulletTriangleMeshShape[] = {
  {(char *)"static", &Dtool_BulletTriangleMeshShape_static_Getter, nullptr, nullptr, nullptr},
  {(char *)"dynamic", &Dtool_BulletTriangleMeshShape_dynamic_Getter, nullptr, nullptr, nullptr},
  {nullptr},
};

static PyNumberMethods Dtool_NumberMethods_BulletTriangleMeshShape = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletTriangleMeshShape = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_BulletTriangleMeshShape = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_BulletTriangleMeshShape = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_BulletTriangleMeshShape = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_BulletTriangleMeshShape = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.bullet.BulletTriangleMeshShape",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletTriangleMeshShape,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_BulletTriangleMeshShape,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_BulletTriangleMeshShape,
    &Dtool_SequenceMethods_BulletTriangleMeshShape,
    &Dtool_MappingMethods_BulletTriangleMeshShape,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_BulletTriangleMeshShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_BulletTriangleMeshShape,
    nullptr, // tp_members
    Dtool_Properties_BulletTriangleMeshShape,
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_BulletTriangleMeshShape,
    PyType_GenericAlloc,
    Dtool_new_BulletTriangleMeshShape,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletTriangleMeshShape,
  Dtool_UpcastInterface_BulletTriangleMeshShape,
  Dtool_DowncastInterface_BulletTriangleMeshShape,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_BulletTriangleMeshShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(nullptr);
    Dtool_BulletTriangleMeshShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    Dtool_BulletTriangleMeshShape._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_BulletTriangleMeshShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletTriangleMeshShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletTriangleMeshShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletTriangleMeshShape);
  }
}


/**
 * Module Object Linker ..
 */
void Dtool_libpandabullet_RegisterTypes() {
  TypeRegistry *registry = TypeRegistry::ptr();
  nassertv(registry != nullptr);
  {
    BulletShape::init_type();
    TypeHandle handle = BulletShape::get_class_type();
    Dtool_BulletShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletShape);
  }
  {
    BulletBaseCharacterControllerNode::init_type();
    TypeHandle handle = BulletBaseCharacterControllerNode::get_class_type();
    Dtool_BulletBaseCharacterControllerNode._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletBaseCharacterControllerNode);
  }
  {
    BulletBodyNode::init_type();
    TypeHandle handle = BulletBodyNode::get_class_type();
    Dtool_BulletBodyNode._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletBodyNode);
  }
  {
    BulletBoxShape::init_type();
    TypeHandle handle = BulletBoxShape::get_class_type();
    Dtool_BulletBoxShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletBoxShape);
  }
  {
    BulletCapsuleShape::init_type();
    TypeHandle handle = BulletCapsuleShape::get_class_type();
    Dtool_BulletCapsuleShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletCapsuleShape);
  }
  {
    BulletCharacterControllerNode::init_type();
    TypeHandle handle = BulletCharacterControllerNode::get_class_type();
    Dtool_BulletCharacterControllerNode._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletCharacterControllerNode);
  }
  {
    BulletConeShape::init_type();
    TypeHandle handle = BulletConeShape::get_class_type();
    Dtool_BulletConeShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletConeShape);
  }
  {
    BulletConstraint::init_type();
    TypeHandle handle = BulletConstraint::get_class_type();
    Dtool_BulletConstraint._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletConstraint);
  }
  {
    BulletRigidBodyNode::init_type();
    TypeHandle handle = BulletRigidBodyNode::get_class_type();
    Dtool_BulletRigidBodyNode._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletRigidBodyNode);
  }
  {
    BulletConeTwistConstraint::init_type();
    TypeHandle handle = BulletConeTwistConstraint::get_class_type();
    Dtool_BulletConeTwistConstraint._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletConeTwistConstraint);
  }
  {
    BulletContactCallbackData::init_type();
    TypeHandle handle = BulletContactCallbackData::get_class_type();
    Dtool_BulletContactCallbackData._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletContactCallbackData);
  }
  {
    BulletDebugNode::init_type();
    TypeHandle handle = BulletDebugNode::get_class_type();
    Dtool_BulletDebugNode._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletDebugNode);
  }
  {
    BulletGhostNode::init_type();
    TypeHandle handle = BulletGhostNode::get_class_type();
    Dtool_BulletGhostNode._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletGhostNode);
  }
  {
    BulletSoftBodyNode::init_type();
    TypeHandle handle = BulletSoftBodyNode::get_class_type();
    Dtool_BulletSoftBodyNode._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletSoftBodyNode);
  }
  {
    BulletVehicle::init_type();
    TypeHandle handle = BulletVehicle::get_class_type();
    Dtool_BulletVehicle._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletVehicle);
  }
  {
    BulletWorld::init_type();
    TypeHandle handle = BulletWorld::get_class_type();
    Dtool_BulletWorld._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletWorld);
  }
  {
    BulletConvexHullShape::init_type();
    TypeHandle handle = BulletConvexHullShape::get_class_type();
    Dtool_BulletConvexHullShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletConvexHullShape);
  }
  {
    BulletConvexPointCloudShape::init_type();
    TypeHandle handle = BulletConvexPointCloudShape::get_class_type();
    Dtool_BulletConvexPointCloudShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletConvexPointCloudShape);
  }
  {
    BulletCylinderShape::init_type();
    TypeHandle handle = BulletCylinderShape::get_class_type();
    Dtool_BulletCylinderShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletCylinderShape);
  }
  {
    BulletFilterCallbackData::init_type();
    TypeHandle handle = BulletFilterCallbackData::get_class_type();
    Dtool_BulletFilterCallbackData._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletFilterCallbackData);
  }
  {
    BulletGenericConstraint::init_type();
    TypeHandle handle = BulletGenericConstraint::get_class_type();
    Dtool_BulletGenericConstraint._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletGenericConstraint);
  }
  {
    BulletHeightfieldShape::init_type();
    TypeHandle handle = BulletHeightfieldShape::get_class_type();
    Dtool_BulletHeightfieldShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletHeightfieldShape);
  }
  {
    BulletHingeConstraint::init_type();
    TypeHandle handle = BulletHingeConstraint::get_class_type();
    Dtool_BulletHingeConstraint._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletHingeConstraint);
  }
  {
    BulletMinkowskiSumShape::init_type();
    TypeHandle handle = BulletMinkowskiSumShape::get_class_type();
    Dtool_BulletMinkowskiSumShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletMinkowskiSumShape);
  }
  {
    BulletMultiSphereShape::init_type();
    TypeHandle handle = BulletMultiSphereShape::get_class_type();
    Dtool_BulletMultiSphereShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletMultiSphereShape);
  }
  {
    BulletPlaneShape::init_type();
    TypeHandle handle = BulletPlaneShape::get_class_type();
    Dtool_BulletPlaneShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletPlaneShape);
  }
  {
    BulletSliderConstraint::init_type();
    TypeHandle handle = BulletSliderConstraint::get_class_type();
    Dtool_BulletSliderConstraint._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletSliderConstraint);
  }
  {
    BulletSoftBodyShape::init_type();
    TypeHandle handle = BulletSoftBodyShape::get_class_type();
    Dtool_BulletSoftBodyShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletSoftBodyShape);
  }
  {
    BulletSphereShape::init_type();
    TypeHandle handle = BulletSphereShape::get_class_type();
    Dtool_BulletSphereShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletSphereShape);
  }
  {
    BulletSphericalConstraint::init_type();
    TypeHandle handle = BulletSphericalConstraint::get_class_type();
    Dtool_BulletSphericalConstraint._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletSphericalConstraint);
  }
  {
    BulletTickCallbackData::init_type();
    TypeHandle handle = BulletTickCallbackData::get_class_type();
    Dtool_BulletTickCallbackData._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletTickCallbackData);
  }
  {
    BulletTriangleMesh::init_type();
    TypeHandle handle = BulletTriangleMesh::get_class_type();
    Dtool_BulletTriangleMesh._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletTriangleMesh);
  }
  {
    BulletTriangleMeshShape::init_type();
    TypeHandle handle = BulletTriangleMeshShape::get_class_type();
    Dtool_BulletTriangleMeshShape._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_BulletTriangleMeshShape);
  }
}

void Dtool_libpandabullet_BuildInstants(PyObject *module) {
  (void) module;
  // enum BulletUpAxis
  PyModule_AddObject(module, "X_up", Dtool_WrapValue(::X_up));
  PyModule_AddObject(module, "XUp", Dtool_WrapValue(::X_up));
  PyModule_AddObject(module, "Y_up", Dtool_WrapValue(::Y_up));
  PyModule_AddObject(module, "YUp", Dtool_WrapValue(::Y_up));
  PyModule_AddObject(module, "Z_up", Dtool_WrapValue(::Z_up));
  PyModule_AddObject(module, "ZUp", Dtool_WrapValue(::Z_up));
  // BulletRayHit
  Dtool_PyModuleClassInit_BulletRayHit(module);
  PyModule_AddObject(module, "BulletRayHit", (PyObject *)&Dtool_BulletRayHit);
  // BulletAllHitsRayResult
  Dtool_PyModuleClassInit_BulletAllHitsRayResult(module);
  PyModule_AddObject(module, "BulletAllHitsRayResult", (PyObject *)&Dtool_BulletAllHitsRayResult);
  // BulletShape
  Dtool_PyModuleClassInit_BulletShape(module);
  PyModule_AddObject(module, "BulletShape", (PyObject *)&Dtool_BulletShape);
  // BulletBaseCharacterControllerNode
  Dtool_PyModuleClassInit_BulletBaseCharacterControllerNode(module);
  PyModule_AddObject(module, "BulletBaseCharacterControllerNode", (PyObject *)&Dtool_BulletBaseCharacterControllerNode);
  // BulletBodyNode
  Dtool_PyModuleClassInit_BulletBodyNode(module);
  PyModule_AddObject(module, "BulletBodyNode", (PyObject *)&Dtool_BulletBodyNode);
  // BulletBoxShape
  Dtool_PyModuleClassInit_BulletBoxShape(module);
  PyModule_AddObject(module, "BulletBoxShape", (PyObject *)&Dtool_BulletBoxShape);
  // BulletCapsuleShape
  Dtool_PyModuleClassInit_BulletCapsuleShape(module);
  PyModule_AddObject(module, "BulletCapsuleShape", (PyObject *)&Dtool_BulletCapsuleShape);
  // BulletCharacterControllerNode
  Dtool_PyModuleClassInit_BulletCharacterControllerNode(module);
  PyModule_AddObject(module, "BulletCharacterControllerNode", (PyObject *)&Dtool_BulletCharacterControllerNode);
  // BulletClosestHitRayResult
  Dtool_PyModuleClassInit_BulletClosestHitRayResult(module);
  PyModule_AddObject(module, "BulletClosestHitRayResult", (PyObject *)&Dtool_BulletClosestHitRayResult);
  // BulletClosestHitSweepResult
  Dtool_PyModuleClassInit_BulletClosestHitSweepResult(module);
  PyModule_AddObject(module, "BulletClosestHitSweepResult", (PyObject *)&Dtool_BulletClosestHitSweepResult);
  // BulletConeShape
  Dtool_PyModuleClassInit_BulletConeShape(module);
  PyModule_AddObject(module, "BulletConeShape", (PyObject *)&Dtool_BulletConeShape);
  // BulletConstraint
  Dtool_PyModuleClassInit_BulletConstraint(module);
  PyModule_AddObject(module, "BulletConstraint", (PyObject *)&Dtool_BulletConstraint);
  // BulletRigidBodyNode
  Dtool_PyModuleClassInit_BulletRigidBodyNode(module);
  PyModule_AddObject(module, "BulletRigidBodyNode", (PyObject *)&Dtool_BulletRigidBodyNode);
  // BulletConeTwistConstraint
  Dtool_PyModuleClassInit_BulletConeTwistConstraint(module);
  PyModule_AddObject(module, "BulletConeTwistConstraint", (PyObject *)&Dtool_BulletConeTwistConstraint);
  // BulletManifoldPoint
  Dtool_PyModuleClassInit_BulletManifoldPoint(module);
  PyModule_AddObject(module, "BulletManifoldPoint", (PyObject *)&Dtool_BulletManifoldPoint);
  // BulletContactCallbackData
  Dtool_PyModuleClassInit_BulletContactCallbackData(module);
  PyModule_AddObject(module, "BulletContactCallbackData", (PyObject *)&Dtool_BulletContactCallbackData);
  // BulletContact
  Dtool_PyModuleClassInit_BulletContact(module);
  PyModule_AddObject(module, "BulletContact", (PyObject *)&Dtool_BulletContact);
  // BulletContactResult
  Dtool_PyModuleClassInit_BulletContactResult(module);
  PyModule_AddObject(module, "BulletContactResult", (PyObject *)&Dtool_BulletContactResult);
  // BulletDebugNode
  Dtool_PyModuleClassInit_BulletDebugNode(module);
  PyModule_AddObject(module, "BulletDebugNode", (PyObject *)&Dtool_BulletDebugNode);
  // BulletGhostNode
  Dtool_PyModuleClassInit_BulletGhostNode(module);
  PyModule_AddObject(module, "BulletGhostNode", (PyObject *)&Dtool_BulletGhostNode);
  // BulletSoftBodyNodeElement
  Dtool_PyModuleClassInit_BulletSoftBodyNodeElement(module);
  PyModule_AddObject(module, "BulletSoftBodyNodeElement", (PyObject *)&Dtool_BulletSoftBodyNodeElement);
  // BulletSoftBodyNode
  Dtool_PyModuleClassInit_BulletSoftBodyNode(module);
  PyModule_AddObject(module, "BulletSoftBodyNode", (PyObject *)&Dtool_BulletSoftBodyNode);
  // BulletSoftBodyConfig
  Dtool_PyModuleClassInit_BulletSoftBodyConfig(module);
  PyModule_AddObject(module, "BulletSoftBodyConfig", (PyObject *)&Dtool_BulletSoftBodyConfig);
  // BulletSoftBodyWorldInfo
  Dtool_PyModuleClassInit_BulletSoftBodyWorldInfo(module);
  PyModule_AddObject(module, "BulletSoftBodyWorldInfo", (PyObject *)&Dtool_BulletSoftBodyWorldInfo);
  // BulletSoftBodyMaterial
  Dtool_PyModuleClassInit_BulletSoftBodyMaterial(module);
  PyModule_AddObject(module, "BulletSoftBodyMaterial", (PyObject *)&Dtool_BulletSoftBodyMaterial);
  // BulletVehicleTuning
  Dtool_PyModuleClassInit_BulletVehicleTuning(module);
  PyModule_AddObject(module, "BulletVehicleTuning", (PyObject *)&Dtool_BulletVehicleTuning);
  // BulletVehicle
  Dtool_PyModuleClassInit_BulletVehicle(module);
  PyModule_AddObject(module, "BulletVehicle", (PyObject *)&Dtool_BulletVehicle);
  // BulletWheel
  Dtool_PyModuleClassInit_BulletWheel(module);
  PyModule_AddObject(module, "BulletWheel", (PyObject *)&Dtool_BulletWheel);
  // BulletWheelRaycastInfo
  Dtool_PyModuleClassInit_BulletWheelRaycastInfo(module);
  PyModule_AddObject(module, "BulletWheelRaycastInfo", (PyObject *)&Dtool_BulletWheelRaycastInfo);
  // BulletWorld
  Dtool_PyModuleClassInit_BulletWorld(module);
  PyModule_AddObject(module, "BulletWorld", (PyObject *)&Dtool_BulletWorld);
  // BulletPersistentManifold
  Dtool_PyModuleClassInit_BulletPersistentManifold(module);
  PyModule_AddObject(module, "BulletPersistentManifold", (PyObject *)&Dtool_BulletPersistentManifold);
  // BulletConvexHullShape
  Dtool_PyModuleClassInit_BulletConvexHullShape(module);
  PyModule_AddObject(module, "BulletConvexHullShape", (PyObject *)&Dtool_BulletConvexHullShape);
  // BulletConvexPointCloudShape
  Dtool_PyModuleClassInit_BulletConvexPointCloudShape(module);
  PyModule_AddObject(module, "BulletConvexPointCloudShape", (PyObject *)&Dtool_BulletConvexPointCloudShape);
  // BulletCylinderShape
  Dtool_PyModuleClassInit_BulletCylinderShape(module);
  PyModule_AddObject(module, "BulletCylinderShape", (PyObject *)&Dtool_BulletCylinderShape);
  // BulletFilterCallbackData
  Dtool_PyModuleClassInit_BulletFilterCallbackData(module);
  PyModule_AddObject(module, "BulletFilterCallbackData", (PyObject *)&Dtool_BulletFilterCallbackData);
  // BulletRotationalLimitMotor
  Dtool_PyModuleClassInit_BulletRotationalLimitMotor(module);
  PyModule_AddObject(module, "BulletRotationalLimitMotor", (PyObject *)&Dtool_BulletRotationalLimitMotor);
  // BulletTranslationalLimitMotor
  Dtool_PyModuleClassInit_BulletTranslationalLimitMotor(module);
  PyModule_AddObject(module, "BulletTranslationalLimitMotor", (PyObject *)&Dtool_BulletTranslationalLimitMotor);
  // BulletGenericConstraint
  Dtool_PyModuleClassInit_BulletGenericConstraint(module);
  PyModule_AddObject(module, "BulletGenericConstraint", (PyObject *)&Dtool_BulletGenericConstraint);
  // BulletHeightfieldShape
  Dtool_PyModuleClassInit_BulletHeightfieldShape(module);
  PyModule_AddObject(module, "BulletHeightfieldShape", (PyObject *)&Dtool_BulletHeightfieldShape);
  // BulletHelper
  Dtool_PyModuleClassInit_BulletHelper(module);
  PyModule_AddObject(module, "BulletHelper", (PyObject *)&Dtool_BulletHelper);
  // BulletHingeConstraint
  Dtool_PyModuleClassInit_BulletHingeConstraint(module);
  PyModule_AddObject(module, "BulletHingeConstraint", (PyObject *)&Dtool_BulletHingeConstraint);
  // BulletMinkowskiSumShape
  Dtool_PyModuleClassInit_BulletMinkowskiSumShape(module);
  PyModule_AddObject(module, "BulletMinkowskiSumShape", (PyObject *)&Dtool_BulletMinkowskiSumShape);
  // BulletMultiSphereShape
  Dtool_PyModuleClassInit_BulletMultiSphereShape(module);
  PyModule_AddObject(module, "BulletMultiSphereShape", (PyObject *)&Dtool_BulletMultiSphereShape);
  // BulletPlaneShape
  Dtool_PyModuleClassInit_BulletPlaneShape(module);
  PyModule_AddObject(module, "BulletPlaneShape", (PyObject *)&Dtool_BulletPlaneShape);
  // BulletSliderConstraint
  Dtool_PyModuleClassInit_BulletSliderConstraint(module);
  PyModule_AddObject(module, "BulletSliderConstraint", (PyObject *)&Dtool_BulletSliderConstraint);
  // BulletSoftBodyControl
  Dtool_PyModuleClassInit_BulletSoftBodyControl(module);
  PyModule_AddObject(module, "BulletSoftBodyControl", (PyObject *)&Dtool_BulletSoftBodyControl);
  // BulletSoftBodyShape
  Dtool_PyModuleClassInit_BulletSoftBodyShape(module);
  PyModule_AddObject(module, "BulletSoftBodyShape", (PyObject *)&Dtool_BulletSoftBodyShape);
  // BulletSphereShape
  Dtool_PyModuleClassInit_BulletSphereShape(module);
  PyModule_AddObject(module, "BulletSphereShape", (PyObject *)&Dtool_BulletSphereShape);
  // BulletSphericalConstraint
  Dtool_PyModuleClassInit_BulletSphericalConstraint(module);
  PyModule_AddObject(module, "BulletSphericalConstraint", (PyObject *)&Dtool_BulletSphericalConstraint);
  // BulletTickCallbackData
  Dtool_PyModuleClassInit_BulletTickCallbackData(module);
  PyModule_AddObject(module, "BulletTickCallbackData", (PyObject *)&Dtool_BulletTickCallbackData);
  // BulletTriangleMesh
  Dtool_PyModuleClassInit_BulletTriangleMesh(module);
  PyModule_AddObject(module, "BulletTriangleMesh", (PyObject *)&Dtool_BulletTriangleMesh);
  // BulletTriangleMeshShape
  Dtool_PyModuleClassInit_BulletTriangleMeshShape(module);
  PyModule_AddObject(module, "BulletTriangleMeshShape", (PyObject *)&Dtool_BulletTriangleMeshShape);
}

static PyMethodDef python_simple_funcs[] = {
  {"get_default_up_axis", &Dtool_get_default_up_axis_2, METH_NOARGS, (const char *)Dtool_get_default_up_axis_2_comment},
  {"getDefaultUpAxis", &Dtool_get_default_up_axis_2, METH_NOARGS, (const char *)Dtool_get_default_up_axis_2_comment},
  {"get_bullet_version", &Dtool_get_bullet_version_3, METH_NOARGS, (const char *)Dtool_get_bullet_version_3_comment},
  {"getBulletVersion", &Dtool_get_bullet_version_3, METH_NOARGS, (const char *)Dtool_get_bullet_version_3_comment},
  // Support Function For Dtool_types ... for now in each module ??
  {"Dtool_BorrowThisReference", &Dtool_BorrowThisReference, METH_VARARGS, "Used to borrow 'this' pointer (to, from)\nAssumes no ownership."},
  {nullptr, nullptr, 0, nullptr}
};

#ifdef LINK_ALL_STATIC
extern const struct LibraryDef libpandabullet_moddef = {python_simple_funcs, exports, nullptr};
#else
extern const struct LibraryDef libpandabullet_moddef = {python_simple_funcs, exports, imports};
#endif
static InterrogateModuleDef _in_module_def = {
  1583614336,  /* file_identifier */
  "libpandabullet",  /* library_name */
  "fCJ_",  /* library_hash_name */
  "panda3d.bullet",  /* module_name */
  "libpandabullet.in",  /* database_filename */
  nullptr,  /* unique_names */
  0,  /* num_unique_names */
  nullptr,  /* fptrs */
  0,  /* num_fptrs */
  1,  /* first_index */
  2162  /* next_index */
};

Configure(_in_configure_libpandabullet);
ConfigureFn(_in_configure_libpandabullet) {
  interrogate_request_module(&_in_module_def);
}

