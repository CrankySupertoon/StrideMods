/*
 * This file was generated by:
 * built/bin/interrogate -srcdir panda/src/gsgbase -Ipanda/src/gsgbase -DCPPPARSER -D__STDC__=1 -D__cplusplus=201103L -D__attribute__(x)= -D_LP64 -oc built/tmp/libp3gsgbase_igate.cxx -od built/pandac/input/libp3gsgbase.in -fnames -string -refcount -assert -python-native -Sbuilt/include/parser-inc -Ipanda/src/gsgbase -Sbuilt/tmp -Sbuilt/include -S/usr/include/eigen3 -module panda3d.core -library libp3gsgbase config_gsgbase.h graphicsOutputBase.h graphicsStateGuardianBase.h p3gsgbase_composite1.cxx
 *
 */

#include "dtoolbase.h"
#include "interrogate_request.h"
#include "dconfig.h"
#include "pnotify.h"
#include <sstream>
#include "py_panda.h"
#include "extension.h"
#include "dcast.h"

#include "config_gsgbase.h"
#include "graphicsOutputBase.h"
#include "graphicsStateGuardianBase.h"
#include "lightMutex.h"
#include "luse.h"
#include "nodeCachedReferenceCount.h"
#include "pandabase.h"
#include "typedWritableReferenceCount.h"

#undef _POSIX_C_SOURCE
#undef _XOPEN_SOURCE
#define PY_SSIZE_T_CLEAN 1

#if PYTHON_FRAMEWORK
  #include <Python/Python.h>
#else
  #include "Python.h"
#endif

/**
 * Forward declarations for top-level class GraphicsOutputBase
 */
typedef GraphicsOutputBase GraphicsOutputBase_localtype;
Define_Module_ClassRef(panda3d.core, GraphicsOutputBase, GraphicsOutputBase_localtype, GraphicsOutputBase);
static struct Dtool_PyTypedObject *const Dtool_Ptr_GraphicsOutputBase = &Dtool_GraphicsOutputBase;
static void Dtool_PyModuleClassInit_GraphicsOutputBase(PyObject *module);

/**
 * Forward declarations for top-level class GraphicsStateGuardianBase
 */
typedef GraphicsStateGuardianBase GraphicsStateGuardianBase_localtype;
Define_Module_ClassRef(panda3d.core, GraphicsStateGuardianBase, GraphicsStateGuardianBase_localtype, GraphicsStateGuardianBase);
static struct Dtool_PyTypedObject *const Dtool_Ptr_GraphicsStateGuardianBase = &Dtool_GraphicsStateGuardianBase;
static void Dtool_PyModuleClassInit_GraphicsStateGuardianBase(PyObject *module);

/**
 * Declarations for exported classes
 */
static const Dtool_TypeDef exports[] = {
  {"GraphicsOutputBase", &Dtool_GraphicsOutputBase},
  {"GraphicsStateGuardianBase", &Dtool_GraphicsStateGuardianBase},
  {nullptr, nullptr},
};

/**
 * Extern declarations for imported classes
 */
#ifndef LINK_ALL_STATIC
static Dtool_TypeDef imports[] = {
  {"TypeHandle", nullptr},
#define Dtool_Ptr_TypeHandle (imports[0].type)
  {"TypedObject", nullptr},
#define Dtool_Ptr_TypedObject (imports[1].type)
  {"ReferenceCount", nullptr},
#define Dtool_Ptr_ReferenceCount (imports[2].type)
  {"TypedWritable", nullptr},
#define Dtool_Ptr_TypedWritable (imports[3].type)
  {"TypedWritableReferenceCount", nullptr},
#define Dtool_Ptr_TypedWritableReferenceCount (imports[4].type)
  {nullptr, nullptr},
};
#endif

// TypeHandle
#ifndef LINK_ALL_STATIC
inline static TypeHandle *Dtool_Coerce_TypeHandle(PyObject *args, TypeHandle &coerced) {
  nassertr(Dtool_Ptr_TypeHandle != nullptr, nullptr);
  nassertr(Dtool_Ptr_TypeHandle->_Dtool_Coerce != nullptr, nullptr);
  return ((TypeHandle *(*)(PyObject *, TypeHandle &))Dtool_Ptr_TypeHandle->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_TypeHandle;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypeHandle = &Dtool_TypeHandle;
extern TypeHandle *Dtool_Coerce_TypeHandle(PyObject *args, TypeHandle &coerced);
#endif
// TypedObject
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_TypedObject;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedObject = &Dtool_TypedObject;
#endif
// ReferenceCount
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_ReferenceCount;
static struct Dtool_PyTypedObject *const Dtool_Ptr_ReferenceCount = &Dtool_ReferenceCount;
#endif
// TypedWritable
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_TypedWritable;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedWritable = &Dtool_TypedWritable;
#endif
// TypedWritableReferenceCount
#ifndef LINK_ALL_STATIC
#else
extern struct Dtool_PyTypedObject Dtool_TypedWritableReferenceCount;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedWritableReferenceCount = &Dtool_TypedWritableReferenceCount;
#endif

/**
 * Python wrappers for global functions
 */
/**
 * Python wrappers for functions of class GraphicsOutputBase
 */
/**
 * Python function wrapper for:
 * virtual void GraphicsOutputBase::set_sort(int sort) = 0
 */
static PyObject *Dtool_GraphicsOutputBase_set_sort_3(PyObject *self, PyObject *arg) {
  GraphicsOutputBase *local_this = nullptr;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_GraphicsOutputBase, (void **)&local_this, "GraphicsOutputBase.set_sort")) {
    return nullptr;
  }
  // 1-virtual void GraphicsOutputBase::set_sort(int sort) = 0
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    ((*local_this).set_sort)((int)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_sort(const GraphicsOutputBase self, int sort)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_GraphicsOutputBase_set_sort_3_comment =
  "C++ Interface:\n"
  "set_sort(const GraphicsOutputBase self, int sort)\n";
#else
static const char *Dtool_GraphicsOutputBase_set_sort_3_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle GraphicsOutputBase::get_class_type(void)
 */
static PyObject *Dtool_GraphicsOutputBase_get_class_type_5(PyObject *, PyObject *) {
  // 1-static TypeHandle GraphicsOutputBase::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((GraphicsOutputBase::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsOutputBase_get_class_type_5_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_GraphicsOutputBase_get_class_type_5_comment = nullptr;
#endif

static int Dtool_Init_GraphicsOutputBase(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_GraphicsOutputBase(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_GraphicsOutputBase) {
    printf("GraphicsOutputBase ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  GraphicsOutputBase *local_this = (GraphicsOutputBase *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_GraphicsOutputBase) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_GraphicsOutputBase(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_GraphicsOutputBase) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (GraphicsOutputBase*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (GraphicsOutputBase*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (GraphicsOutputBase*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (GraphicsOutputBase*)other_this;
  }
  return nullptr;
}

/**
 * Python wrappers for functions of class GraphicsStateGuardianBase
 */
/**
 * Python function wrapper for:
 * virtual bool GraphicsStateGuardianBase::get_incomplete_render(void) const = 0
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_incomplete_render_8(PyObject *self, PyObject *) {
  GraphicsStateGuardianBase *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_GraphicsStateGuardianBase)) {
    return nullptr;
  }
  // 1-virtual bool GraphicsStateGuardianBase::get_incomplete_render(void) const = 0
  bool return_value = ((*(const GraphicsStateGuardianBase*)local_this).get_incomplete_render)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_incomplete_render_8_comment =
  "C++ Interface:\n"
  "get_incomplete_render(GraphicsStateGuardianBase self)\n";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_incomplete_render_8_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * virtual bool GraphicsStateGuardianBase::get_effective_incomplete_render(void) const = 0
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_effective_incomplete_render_9(PyObject *self, PyObject *) {
  GraphicsStateGuardianBase *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_GraphicsStateGuardianBase)) {
    return nullptr;
  }
  // 1-virtual bool GraphicsStateGuardianBase::get_effective_incomplete_render(void) const = 0
  bool return_value = ((*(const GraphicsStateGuardianBase*)local_this).get_effective_incomplete_render)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_effective_incomplete_render_9_comment =
  "C++ Interface:\n"
  "get_effective_incomplete_render(GraphicsStateGuardianBase self)\n";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_effective_incomplete_render_9_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * virtual bool GraphicsStateGuardianBase::prefers_triangle_strips(void) const = 0
 */
static PyObject *Dtool_GraphicsStateGuardianBase_prefers_triangle_strips_10(PyObject *self, PyObject *) {
  GraphicsStateGuardianBase *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_GraphicsStateGuardianBase)) {
    return nullptr;
  }
  // 1-virtual bool GraphicsStateGuardianBase::prefers_triangle_strips(void) const = 0
  bool return_value = ((*(const GraphicsStateGuardianBase*)local_this).prefers_triangle_strips)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_prefers_triangle_strips_10_comment =
  "C++ Interface:\n"
  "prefers_triangle_strips(GraphicsStateGuardianBase self)\n";
#else
static const char *Dtool_GraphicsStateGuardianBase_prefers_triangle_strips_10_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * virtual int GraphicsStateGuardianBase::get_max_vertices_per_array(void) const = 0
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_max_vertices_per_array_11(PyObject *self, PyObject *) {
  GraphicsStateGuardianBase *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_GraphicsStateGuardianBase)) {
    return nullptr;
  }
  // 1-virtual int GraphicsStateGuardianBase::get_max_vertices_per_array(void) const = 0
  int return_value = ((*(const GraphicsStateGuardianBase*)local_this).get_max_vertices_per_array)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_max_vertices_per_array_11_comment =
  "C++ Interface:\n"
  "get_max_vertices_per_array(GraphicsStateGuardianBase self)\n";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_max_vertices_per_array_11_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * virtual int GraphicsStateGuardianBase::get_max_vertices_per_primitive(void) const = 0
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_max_vertices_per_primitive_12(PyObject *self, PyObject *) {
  GraphicsStateGuardianBase *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_GraphicsStateGuardianBase)) {
    return nullptr;
  }
  // 1-virtual int GraphicsStateGuardianBase::get_max_vertices_per_primitive(void) const = 0
  int return_value = ((*(const GraphicsStateGuardianBase*)local_this).get_max_vertices_per_primitive)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_max_vertices_per_primitive_12_comment =
  "C++ Interface:\n"
  "get_max_vertices_per_primitive(GraphicsStateGuardianBase self)\n";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_max_vertices_per_primitive_12_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * virtual int GraphicsStateGuardianBase::get_max_texture_dimension(void) const = 0
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_max_texture_dimension_13(PyObject *self, PyObject *) {
  GraphicsStateGuardianBase *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_GraphicsStateGuardianBase)) {
    return nullptr;
  }
  // 1-virtual int GraphicsStateGuardianBase::get_max_texture_dimension(void) const = 0
  int return_value = ((*(const GraphicsStateGuardianBase*)local_this).get_max_texture_dimension)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_max_texture_dimension_13_comment =
  "C++ Interface:\n"
  "get_max_texture_dimension(GraphicsStateGuardianBase self)\n";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_max_texture_dimension_13_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * virtual bool GraphicsStateGuardianBase::get_supports_compressed_texture_format(int compression_mode) const = 0
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_supports_compressed_texture_format_14(PyObject *self, PyObject *arg) {
  GraphicsStateGuardianBase *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_GraphicsStateGuardianBase)) {
    return nullptr;
  }
  // 1-virtual bool GraphicsStateGuardianBase::get_supports_compressed_texture_format(int compression_mode) const = 0
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    bool return_value = ((*(const GraphicsStateGuardianBase*)local_this).get_supports_compressed_texture_format)((int)arg_val);
    return Dtool_Return_Bool(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_supports_compressed_texture_format(GraphicsStateGuardianBase self, int compression_mode)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_supports_compressed_texture_format_14_comment =
  "C++ Interface:\n"
  "get_supports_compressed_texture_format(GraphicsStateGuardianBase self, int compression_mode)\n";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_supports_compressed_texture_format_14_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * virtual bool GraphicsStateGuardianBase::get_supports_multisample(void) const = 0
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_supports_multisample_15(PyObject *self, PyObject *) {
  GraphicsStateGuardianBase *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_GraphicsStateGuardianBase)) {
    return nullptr;
  }
  // 1-virtual bool GraphicsStateGuardianBase::get_supports_multisample(void) const = 0
  bool return_value = ((*(const GraphicsStateGuardianBase*)local_this).get_supports_multisample)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_supports_multisample_15_comment =
  "C++ Interface:\n"
  "get_supports_multisample(GraphicsStateGuardianBase self)\n";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_supports_multisample_15_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * virtual int GraphicsStateGuardianBase::get_supported_geom_rendering(void) const = 0
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_supported_geom_rendering_16(PyObject *self, PyObject *) {
  GraphicsStateGuardianBase *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_GraphicsStateGuardianBase)) {
    return nullptr;
  }
  // 1-virtual int GraphicsStateGuardianBase::get_supported_geom_rendering(void) const = 0
  int return_value = ((*(const GraphicsStateGuardianBase*)local_this).get_supported_geom_rendering)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_supported_geom_rendering_16_comment =
  "C++ Interface:\n"
  "get_supported_geom_rendering(GraphicsStateGuardianBase self)\n";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_supported_geom_rendering_16_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * virtual bool GraphicsStateGuardianBase::get_supports_shadow_filter(void) const = 0
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_supports_shadow_filter_17(PyObject *self, PyObject *) {
  GraphicsStateGuardianBase *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_GraphicsStateGuardianBase)) {
    return nullptr;
  }
  // 1-virtual bool GraphicsStateGuardianBase::get_supports_shadow_filter(void) const = 0
  bool return_value = ((*(const GraphicsStateGuardianBase*)local_this).get_supports_shadow_filter)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_supports_shadow_filter_17_comment =
  "C++ Interface:\n"
  "get_supports_shadow_filter(GraphicsStateGuardianBase self)\n";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_supports_shadow_filter_17_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * virtual bool GraphicsStateGuardianBase::get_supports_texture_srgb(void) const = 0
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_supports_texture_srgb_18(PyObject *self, PyObject *) {
  GraphicsStateGuardianBase *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_GraphicsStateGuardianBase)) {
    return nullptr;
  }
  // 1-virtual bool GraphicsStateGuardianBase::get_supports_texture_srgb(void) const = 0
  bool return_value = ((*(const GraphicsStateGuardianBase*)local_this).get_supports_texture_srgb)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_supports_texture_srgb_18_comment =
  "C++ Interface:\n"
  "get_supports_texture_srgb(GraphicsStateGuardianBase self)\n";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_supports_texture_srgb_18_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * virtual bool GraphicsStateGuardianBase::get_supports_hlsl(void) const = 0
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_supports_hlsl_19(PyObject *self, PyObject *) {
  GraphicsStateGuardianBase *local_this = nullptr;
  if (!DtoolInstance_GetPointer(self, local_this, Dtool_GraphicsStateGuardianBase)) {
    return nullptr;
  }
  // 1-virtual bool GraphicsStateGuardianBase::get_supports_hlsl(void) const = 0
  bool return_value = ((*(const GraphicsStateGuardianBase*)local_this).get_supports_hlsl)();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_supports_hlsl_19_comment =
  "C++ Interface:\n"
  "get_supports_hlsl(GraphicsStateGuardianBase self)\n";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_supports_hlsl_19_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static GraphicsStateGuardianBase *GraphicsStateGuardianBase::get_default_gsg(void)
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_default_gsg_20(PyObject *, PyObject *) {
  // 1-static GraphicsStateGuardianBase *GraphicsStateGuardianBase::get_default_gsg(void)
  GraphicsStateGuardianBase *return_value = (GraphicsStateGuardianBase::get_default_gsg)();
  if (return_value != nullptr) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != nullptr) {
      unref_delete(return_value);
    }
    return nullptr;
  }
  if (return_value == nullptr) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_GraphicsStateGuardianBase, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_default_gsg_20_comment =
  "C++ Interface:\n"
  "get_default_gsg()\n"
  "\n"
  "/**\n"
  " * Returns a pointer to the \"default\" GSG.  This is typically the first GSG\n"
  " * created in an application; in a single-window application, it will be the\n"
  " * only GSG. This GSG is used to determine default optimization choices for\n"
  " * loaded geometry.\n"
  " *\n"
  " * The return value may be NULL if a GSG has not been created.\n"
  " */";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_default_gsg_20_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static void GraphicsStateGuardianBase::set_default_gsg(GraphicsStateGuardianBase *default_gsg)
 */
static PyObject *Dtool_GraphicsStateGuardianBase_set_default_gsg_21(PyObject *, PyObject *arg) {
  // 1-static void GraphicsStateGuardianBase::set_default_gsg(GraphicsStateGuardianBase *default_gsg)
  GraphicsStateGuardianBase *arg_this = (GraphicsStateGuardianBase *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_GraphicsStateGuardianBase, 0, "GraphicsStateGuardianBase.set_default_gsg", false, true);
  if (arg_this != nullptr) {
    (GraphicsStateGuardianBase::set_default_gsg)(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_default_gsg(GraphicsStateGuardianBase default_gsg)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_set_default_gsg_21_comment =
  "C++ Interface:\n"
  "set_default_gsg(GraphicsStateGuardianBase default_gsg)\n"
  "\n"
  "/**\n"
  " * Specifies a particular GSG to use as the \"default\" GSG.  See\n"
  " * get_default_gsg().\n"
  " */";
#else
static const char *Dtool_GraphicsStateGuardianBase_set_default_gsg_21_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static std::size_t GraphicsStateGuardianBase::get_num_gsgs(void)
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_num_gsgs_22(PyObject *, PyObject *) {
  // 1-static std::size_t GraphicsStateGuardianBase::get_num_gsgs(void)
  std::size_t return_value = (GraphicsStateGuardianBase::get_num_gsgs)();
  if (Dtool_CheckErrorOccurred()) {
    return nullptr;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_num_gsgs_22_comment =
  "C++ Interface:\n"
  "get_num_gsgs()\n"
  "\n"
  "/**\n"
  " * Returns the total number of GSG's in the universe.\n"
  " */";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_num_gsgs_22_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static GraphicsStateGuardianBase *GraphicsStateGuardianBase::get_gsg(std::size_t n)
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_gsg_23(PyObject *, PyObject *arg) {
  // 1-static GraphicsStateGuardianBase *GraphicsStateGuardianBase::get_gsg(std::size_t n)
  if (PyLongOrInt_Check(arg)) {
    size_t arg_val = PyLongOrInt_AsSize_t(arg);
#ifndef NDEBUG
    if (arg_val == (size_t)-1 && _PyErr_OCCURRED()) {
      return nullptr;
    }
#endif
    GraphicsStateGuardianBase *return_value = (GraphicsStateGuardianBase::get_gsg)(arg_val);
    if (return_value != nullptr) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != nullptr) {
        unref_delete(return_value);
      }
      return nullptr;
    }
    if (return_value == nullptr) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_GraphicsStateGuardianBase, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_gsg(int n)\n");
  }
  return nullptr;
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_gsg_23_comment =
  "C++ Interface:\n"
  "get_gsg(int n)\n"
  "\n"
  "/**\n"
  " * Returns the nth GSG in the universe.  GSG's automatically add themselves\n"
  " * and remove themselves from this list as they are created and destroyed.\n"
  " */";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_gsg_23_comment = nullptr;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle GraphicsStateGuardianBase::get_class_type(void)
 */
static PyObject *Dtool_GraphicsStateGuardianBase_get_class_type_25(PyObject *, PyObject *) {
  // 1-static TypeHandle GraphicsStateGuardianBase::get_class_type(void)
  TypeHandle *return_value = new TypeHandle((GraphicsStateGuardianBase::get_class_type)());
  if (return_value == nullptr) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return nullptr;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_GraphicsStateGuardianBase_get_class_type_25_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_GraphicsStateGuardianBase_get_class_type_25_comment = nullptr;
#endif

static int Dtool_Init_GraphicsStateGuardianBase(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_GraphicsStateGuardianBase_get_gsgs(PyObject *self, PyObject *) {
  Py_ssize_t count = (Py_ssize_t)(GraphicsStateGuardianBase::get_num_gsgs)();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_GraphicsStateGuardianBase_get_gsg_23(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return nullptr;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_GraphicsStateGuardianBase(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *type = DtoolInstance_TYPE(self);
  if (type != &Dtool_GraphicsStateGuardianBase) {
    printf("GraphicsStateGuardianBase ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(nullptr);
    return nullptr;
  }

  GraphicsStateGuardianBase *local_this = (GraphicsStateGuardianBase *)DtoolInstance_VOID_PTR(self);
  if (requested_type == &Dtool_GraphicsStateGuardianBase) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *) local_this;
  }
  return nullptr;
}

static void *Dtool_DowncastInterface_GraphicsStateGuardianBase(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == nullptr || from_type == nullptr) {
    return nullptr;
  }
  if (from_type == Dtool_Ptr_GraphicsStateGuardianBase) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (GraphicsStateGuardianBase*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (GraphicsStateGuardianBase*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (GraphicsStateGuardianBase*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (GraphicsStateGuardianBase*)other_this;
  }
  return nullptr;
}

/**
 * Python method tables for GraphicsOutputBase (GraphicsOutputBase)
 */
static PyMethodDef Dtool_Methods_GraphicsOutputBase[] = {
  {"set_sort", &Dtool_GraphicsOutputBase_set_sort_3, METH_O, (const char *)Dtool_GraphicsOutputBase_set_sort_3_comment},
  {"setSort", &Dtool_GraphicsOutputBase_set_sort_3, METH_O, (const char *)Dtool_GraphicsOutputBase_set_sort_3_comment},
  {"get_class_type", &Dtool_GraphicsOutputBase_get_class_type_5, METH_NOARGS | METH_STATIC, (const char *)Dtool_GraphicsOutputBase_get_class_type_5_comment},
  {"getClassType", &Dtool_GraphicsOutputBase_get_class_type_5, METH_NOARGS | METH_STATIC, (const char *)Dtool_GraphicsOutputBase_get_class_type_5_comment},
  {nullptr, nullptr, 0, nullptr}
};

static PyNumberMethods Dtool_NumberMethods_GraphicsOutputBase = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_GraphicsOutputBase = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_GraphicsOutputBase = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_GraphicsOutputBase = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_GraphicsOutputBase = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_GraphicsOutputBase = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.core.GraphicsOutputBase",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_GraphicsOutputBase,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_GraphicsOutputBase,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_GraphicsOutputBase,
    &Dtool_SequenceMethods_GraphicsOutputBase,
    &Dtool_MappingMethods_GraphicsOutputBase,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_GraphicsOutputBase,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * An abstract base class for GraphicsOutput, for all the usual reasons.\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_GraphicsOutputBase,
    nullptr, // tp_members
    nullptr, // tp_getset
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_GraphicsOutputBase,
    PyType_GenericAlloc,
    Dtool_new_GraphicsOutputBase,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_GraphicsOutputBase,
  Dtool_UpcastInterface_GraphicsOutputBase,
  Dtool_DowncastInterface_GraphicsOutputBase,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_GraphicsOutputBase(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_TypedWritableReferenceCount != nullptr);
    assert(Dtool_Ptr_TypedWritableReferenceCount->_Dtool_ModuleClassInit != nullptr);
    Dtool_Ptr_TypedWritableReferenceCount->_Dtool_ModuleClassInit(nullptr);
    Dtool_GraphicsOutputBase._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_TypedWritableReferenceCount);
    Dtool_GraphicsOutputBase._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_GraphicsOutputBase._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_GraphicsOutputBase) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(GraphicsOutputBase)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_GraphicsOutputBase);
  }
}

/**
 * Python method tables for GraphicsStateGuardianBase (GraphicsStateGuardianBase)
 */
static PyMethodDef Dtool_Methods_GraphicsStateGuardianBase[] = {
  {"get_incomplete_render", &Dtool_GraphicsStateGuardianBase_get_incomplete_render_8, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_incomplete_render_8_comment},
  {"getIncompleteRender", &Dtool_GraphicsStateGuardianBase_get_incomplete_render_8, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_incomplete_render_8_comment},
  {"get_effective_incomplete_render", &Dtool_GraphicsStateGuardianBase_get_effective_incomplete_render_9, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_effective_incomplete_render_9_comment},
  {"getEffectiveIncompleteRender", &Dtool_GraphicsStateGuardianBase_get_effective_incomplete_render_9, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_effective_incomplete_render_9_comment},
  {"prefers_triangle_strips", &Dtool_GraphicsStateGuardianBase_prefers_triangle_strips_10, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_prefers_triangle_strips_10_comment},
  {"prefersTriangleStrips", &Dtool_GraphicsStateGuardianBase_prefers_triangle_strips_10, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_prefers_triangle_strips_10_comment},
  {"get_max_vertices_per_array", &Dtool_GraphicsStateGuardianBase_get_max_vertices_per_array_11, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_max_vertices_per_array_11_comment},
  {"getMaxVerticesPerArray", &Dtool_GraphicsStateGuardianBase_get_max_vertices_per_array_11, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_max_vertices_per_array_11_comment},
  {"get_max_vertices_per_primitive", &Dtool_GraphicsStateGuardianBase_get_max_vertices_per_primitive_12, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_max_vertices_per_primitive_12_comment},
  {"getMaxVerticesPerPrimitive", &Dtool_GraphicsStateGuardianBase_get_max_vertices_per_primitive_12, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_max_vertices_per_primitive_12_comment},
  {"get_max_texture_dimension", &Dtool_GraphicsStateGuardianBase_get_max_texture_dimension_13, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_max_texture_dimension_13_comment},
  {"getMaxTextureDimension", &Dtool_GraphicsStateGuardianBase_get_max_texture_dimension_13, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_max_texture_dimension_13_comment},
  {"get_supports_compressed_texture_format", &Dtool_GraphicsStateGuardianBase_get_supports_compressed_texture_format_14, METH_O, (const char *)Dtool_GraphicsStateGuardianBase_get_supports_compressed_texture_format_14_comment},
  {"getSupportsCompressedTextureFormat", &Dtool_GraphicsStateGuardianBase_get_supports_compressed_texture_format_14, METH_O, (const char *)Dtool_GraphicsStateGuardianBase_get_supports_compressed_texture_format_14_comment},
  {"get_supports_multisample", &Dtool_GraphicsStateGuardianBase_get_supports_multisample_15, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_supports_multisample_15_comment},
  {"getSupportsMultisample", &Dtool_GraphicsStateGuardianBase_get_supports_multisample_15, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_supports_multisample_15_comment},
  {"get_supported_geom_rendering", &Dtool_GraphicsStateGuardianBase_get_supported_geom_rendering_16, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_supported_geom_rendering_16_comment},
  {"getSupportedGeomRendering", &Dtool_GraphicsStateGuardianBase_get_supported_geom_rendering_16, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_supported_geom_rendering_16_comment},
  {"get_supports_shadow_filter", &Dtool_GraphicsStateGuardianBase_get_supports_shadow_filter_17, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_supports_shadow_filter_17_comment},
  {"getSupportsShadowFilter", &Dtool_GraphicsStateGuardianBase_get_supports_shadow_filter_17, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_supports_shadow_filter_17_comment},
  {"get_supports_texture_srgb", &Dtool_GraphicsStateGuardianBase_get_supports_texture_srgb_18, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_supports_texture_srgb_18_comment},
  {"getSupportsTextureSrgb", &Dtool_GraphicsStateGuardianBase_get_supports_texture_srgb_18, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_supports_texture_srgb_18_comment},
  {"get_supports_hlsl", &Dtool_GraphicsStateGuardianBase_get_supports_hlsl_19, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_supports_hlsl_19_comment},
  {"getSupportsHlsl", &Dtool_GraphicsStateGuardianBase_get_supports_hlsl_19, METH_NOARGS, (const char *)Dtool_GraphicsStateGuardianBase_get_supports_hlsl_19_comment},
  {"get_default_gsg", &Dtool_GraphicsStateGuardianBase_get_default_gsg_20, METH_NOARGS | METH_STATIC, (const char *)Dtool_GraphicsStateGuardianBase_get_default_gsg_20_comment},
  {"getDefaultGsg", &Dtool_GraphicsStateGuardianBase_get_default_gsg_20, METH_NOARGS | METH_STATIC, (const char *)Dtool_GraphicsStateGuardianBase_get_default_gsg_20_comment},
  {"set_default_gsg", &Dtool_GraphicsStateGuardianBase_set_default_gsg_21, METH_O | METH_STATIC, (const char *)Dtool_GraphicsStateGuardianBase_set_default_gsg_21_comment},
  {"setDefaultGsg", &Dtool_GraphicsStateGuardianBase_set_default_gsg_21, METH_O | METH_STATIC, (const char *)Dtool_GraphicsStateGuardianBase_set_default_gsg_21_comment},
  {"get_num_gsgs", &Dtool_GraphicsStateGuardianBase_get_num_gsgs_22, METH_NOARGS | METH_STATIC, (const char *)Dtool_GraphicsStateGuardianBase_get_num_gsgs_22_comment},
  {"getNumGsgs", &Dtool_GraphicsStateGuardianBase_get_num_gsgs_22, METH_NOARGS | METH_STATIC, (const char *)Dtool_GraphicsStateGuardianBase_get_num_gsgs_22_comment},
  {"get_gsg", &Dtool_GraphicsStateGuardianBase_get_gsg_23, METH_O | METH_STATIC, (const char *)Dtool_GraphicsStateGuardianBase_get_gsg_23_comment},
  {"getGsg", &Dtool_GraphicsStateGuardianBase_get_gsg_23, METH_O | METH_STATIC, (const char *)Dtool_GraphicsStateGuardianBase_get_gsg_23_comment},
  {"get_class_type", &Dtool_GraphicsStateGuardianBase_get_class_type_25, METH_NOARGS | METH_STATIC, (const char *)Dtool_GraphicsStateGuardianBase_get_class_type_25_comment},
  {"getClassType", &Dtool_GraphicsStateGuardianBase_get_class_type_25, METH_NOARGS | METH_STATIC, (const char *)Dtool_GraphicsStateGuardianBase_get_class_type_25_comment},
  {"get_gsgs", (PyCFunction) &MakeSeq_GraphicsStateGuardianBase_get_gsgs, METH_NOARGS | METH_STATIC, nullptr},
  { "getGsgs", (PyCFunction) &MakeSeq_GraphicsStateGuardianBase_get_gsgs, METH_NOARGS | METH_STATIC, nullptr},
  {nullptr, nullptr, 0, nullptr}
};

static PyNumberMethods Dtool_NumberMethods_GraphicsStateGuardianBase = {
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr, // nb_long
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
#if PY_MAJOR_VERSION < 3
  nullptr,
#endif
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#if PY_VERSION_HEX >= 0x02050000
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x03050000
  nullptr,
  nullptr,
#endif
};

static PySequenceMethods Dtool_SequenceMethods_GraphicsStateGuardianBase = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr, // sq_slice
  nullptr,
  nullptr, // sq_ass_slice
  nullptr,
  nullptr,
  nullptr,
};

static PyMappingMethods Dtool_MappingMethods_GraphicsStateGuardianBase = {
  nullptr,
  nullptr,
  nullptr,
};

static PyBufferProcs Dtool_BufferProcs_GraphicsStateGuardianBase = {
#if PY_MAJOR_VERSION < 3
  nullptr,
  nullptr,
  nullptr,
  nullptr,
#endif
#if PY_VERSION_HEX >= 0x02060000
  nullptr,
  nullptr,
#endif
};

#if PY_VERSION_HEX >= 0x03050000
static PyAsyncMethods Dtool_AsyncMethods_GraphicsStateGuardianBase = {
  nullptr,
  nullptr,
  nullptr,
};
#endif

struct Dtool_PyTypedObject Dtool_GraphicsStateGuardianBase = {
  {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "panda3d.core.GraphicsStateGuardianBase",
    0, // tp_basicsize
    0, // tp_itemsize
    &Dtool_FreeInstance_GraphicsStateGuardianBase,
#if PY_VERSION_HEX >= 0x03080000
    0, // tp_vectorcall_offset
#else
    nullptr,
#endif
    nullptr,
    nullptr,
#if PY_VERSION_HEX >= 0x03050000
    &Dtool_AsyncMethods_GraphicsStateGuardianBase,
#elif PY_MAJOR_VERSION >= 3
    nullptr, // tp_reserved
#else
    nullptr, // tp_compare
#endif
    nullptr,
    &Dtool_NumberMethods_GraphicsStateGuardianBase,
    &Dtool_SequenceMethods_GraphicsStateGuardianBase,
    &Dtool_MappingMethods_GraphicsStateGuardianBase,
    nullptr, // tp_hash
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    &Dtool_BufferProcs_GraphicsStateGuardianBase,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * This is a base class for the GraphicsStateGuardian class, which is itself a\n"
    " * base class for the various GSG's for different platforms.  This class\n"
    " * contains all the function prototypes to support the double-dispatch of GSG\n"
    " * to geoms, transitions, etc.  It lives in a separate class in its own\n"
    " * package so we can avoid circular build dependency problems.\n"
    " *\n"
    " * GraphicsStateGuardians are not actually writable to bam files, of course,\n"
    " * but they may be passed as event parameters, so they inherit from\n"
    " * TypedWritableReferenceCount instead of TypedReferenceCount for that\n"
    " * convenience.\n"
    " */",
#endif
    nullptr, // tp_traverse
    nullptr, // tp_clear
    nullptr, // tp_richcompare
    0, // tp_weaklistoffset
    nullptr,
    nullptr,
    Dtool_Methods_GraphicsStateGuardianBase,
    nullptr, // tp_members
    nullptr, // tp_getset
    nullptr, // tp_base
    nullptr, // tp_dict
    nullptr,
    nullptr,
    0, // tp_dictoffset
    Dtool_Init_GraphicsStateGuardianBase,
    PyType_GenericAlloc,
    Dtool_new_GraphicsStateGuardianBase,
    PyObject_Del,
    nullptr, // tp_is_gc
    nullptr, // tp_bases
    nullptr, // tp_mro
    nullptr, // tp_cache
    nullptr, // tp_subclasses
    nullptr, // tp_weaklist
    nullptr, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    nullptr, // tp_finalize
#endif
#if PY_VERSION_HEX >= 0x03080000
    nullptr, // tp_vectorcall
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_GraphicsStateGuardianBase,
  Dtool_UpcastInterface_GraphicsStateGuardianBase,
  Dtool_DowncastInterface_GraphicsStateGuardianBase,
  nullptr,
  nullptr,
};

static void Dtool_PyModuleClassInit_GraphicsStateGuardianBase(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_TypedWritableReferenceCount != nullptr);
    assert(Dtool_Ptr_TypedWritableReferenceCount->_Dtool_ModuleClassInit != nullptr);
    Dtool_Ptr_TypedWritableReferenceCount->_Dtool_ModuleClassInit(nullptr);
    Dtool_GraphicsStateGuardianBase._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_TypedWritableReferenceCount);
    Dtool_GraphicsStateGuardianBase._PyType.tp_base = (PyTypeObject *)Dtool_GetSuperBase();
    PyObject *dict = PyDict_New();
    Dtool_GraphicsStateGuardianBase._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_GraphicsStateGuardianBase) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(GraphicsStateGuardianBase)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_GraphicsStateGuardianBase);
  }
}


/**
 * Module Object Linker ..
 */
void Dtool_libp3gsgbase_RegisterTypes() {
  TypeRegistry *registry = TypeRegistry::ptr();
  nassertv(registry != nullptr);
  {
    GraphicsOutputBase::init_type();
    TypeHandle handle = GraphicsOutputBase::get_class_type();
    Dtool_GraphicsOutputBase._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_GraphicsOutputBase);
  }
  {
    GraphicsStateGuardianBase::init_type();
    TypeHandle handle = GraphicsStateGuardianBase::get_class_type();
    Dtool_GraphicsStateGuardianBase._type = handle;
    registry->record_python_type(handle, (PyObject *)&Dtool_GraphicsStateGuardianBase);
  }
}

void Dtool_libp3gsgbase_BuildInstants(PyObject *module) {
  (void) module;
  // GraphicsOutputBase
  Dtool_PyModuleClassInit_GraphicsOutputBase(module);
  PyModule_AddObject(module, "GraphicsOutputBase", (PyObject *)&Dtool_GraphicsOutputBase);
  // GraphicsStateGuardianBase
  Dtool_PyModuleClassInit_GraphicsStateGuardianBase(module);
  PyModule_AddObject(module, "GraphicsStateGuardianBase", (PyObject *)&Dtool_GraphicsStateGuardianBase);
}

static PyMethodDef python_simple_funcs[] = {
  // Support Function For Dtool_types ... for now in each module ??
  {"Dtool_BorrowThisReference", &Dtool_BorrowThisReference, METH_VARARGS, "Used to borrow 'this' pointer (to, from)\nAssumes no ownership."},
  {nullptr, nullptr, 0, nullptr}
};

#ifdef LINK_ALL_STATIC
extern const struct LibraryDef libp3gsgbase_moddef = {python_simple_funcs, exports, nullptr};
#else
extern const struct LibraryDef libp3gsgbase_moddef = {python_simple_funcs, exports, imports};
#endif
static InterrogateModuleDef _in_module_def = {
  1583613053,  /* file_identifier */
  "libp3gsgbase",  /* library_name */
  "Oe1b",  /* library_hash_name */
  "panda3d.core",  /* module_name */
  "libp3gsgbase.in",  /* database_filename */
  nullptr,  /* unique_names */
  0,  /* num_unique_names */
  nullptr,  /* fptrs */
  0,  /* num_fptrs */
  1,  /* first_index */
  62  /* next_index */
};

Configure(_in_configure_libp3gsgbase);
ConfigureFn(_in_configure_libp3gsgbase) {
  interrogate_request_module(&_in_module_def);
}

